
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00002f7c  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002e2  008002e2  000031f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000031f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c91  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  0000613d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001382  00000000  00000000  00006a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  00007e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac3  00000000  00000000  00008580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001970  00000000  00000000  00009043  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000a9b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	5a c1       	rjmp	.+692    	; 0x2ba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c1       	rjmp	.+688    	; 0x2ba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c1       	rjmp	.+684    	; 0x2ba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c1       	rjmp	.+680    	; 0x2ba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c1       	rjmp	.+676    	; 0x2ba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c1       	rjmp	.+672    	; 0x2ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c1       	rjmp	.+668    	; 0x2ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c1       	rjmp	.+664    	; 0x2ba <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_9>
      28:	48 c1       	rjmp	.+656    	; 0x2ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_11>
      30:	44 c1       	rjmp	.+648    	; 0x2ba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c1       	rjmp	.+644    	; 0x2ba <__bad_interrupt>
      36:	00 00       	nop
      38:	40 c1       	rjmp	.+640    	; 0x2ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c1       	rjmp	.+636    	; 0x2ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c1       	rjmp	.+632    	; 0x2ba <__bad_interrupt>
      42:	00 00       	nop
      44:	3a c1       	rjmp	.+628    	; 0x2ba <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c1       	rjmp	.+624    	; 0x2ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c1       	rjmp	.+620    	; 0x2ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	34 c1       	rjmp	.+616    	; 0x2ba <__bad_interrupt>
      52:	00 00       	nop
      54:	32 c1       	rjmp	.+612    	; 0x2ba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c1       	rjmp	.+608    	; 0x2ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c1       	rjmp	.+604    	; 0x2ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c1       	rjmp	.+600    	; 0x2ba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c1       	rjmp	.+596    	; 0x2ba <__bad_interrupt>
      66:	00 00       	nop
      68:	28 c1       	rjmp	.+592    	; 0x2ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	26 c1       	rjmp	.+588    	; 0x2ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c1       	rjmp	.+584    	; 0x2ba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c1       	rjmp	.+580    	; 0x2ba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c1       	rjmp	.+576    	; 0x2ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c1       	rjmp	.+572    	; 0x2ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c1       	rjmp	.+568    	; 0x2ba <__bad_interrupt>
      82:	00 00       	nop
      84:	1a c1       	rjmp	.+564    	; 0x2ba <__bad_interrupt>
      86:	00 00       	nop
      88:	18 c1       	rjmp	.+560    	; 0x2ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 06       	cpc	r3, r31
      d8:	64 ec       	ldi	r22, 0xC4	; 196
      da:	1b 3c       	cpi	r17, 0xCB	; 203
      dc:	04 bc       	out	0x24, r0	; 36
      de:	16 3e       	cpi	r17, 0xE6	; 230
      e0:	3b e5       	ldi	r19, 0x5B	; 91
      e2:	b9 3c       	cpi	r27, 0xC9	; 201
      e4:	c9 3c       	cpi	r28, 0xC9	; 201
      e6:	37 c2       	rjmp	.+1134   	; 0x556 <move+0x7a>
      e8:	9e 5a       	subi	r25, 0xAE	; 174
      ea:	3d 66       	ori	r19, 0x6D	; 109
      ec:	04 98       	cbi	0x00, 4	; 0
      ee:	08 3e       	cpi	r16, 0xE8	; 232
      f0:	ea 69       	ori	r30, 0x9A	; 154
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	07 63       	ori	r16, 0x37	; 55
      fc:	42 36       	cpi	r20, 0x62	; 98
      fe:	b7 9b       	sbis	0x16, 7	; 22
     100:	d8 a7       	std	Y+40, r29	; 0x28
     102:	1a 39       	cpi	r17, 0x9A	; 154
     104:	68 56       	subi	r22, 0x68	; 104
     106:	18 ae       	std	Y+56, r1	; 0x38
     108:	ba ab       	std	Y+50, r27	; 0x32
     10a:	55 8c       	ldd	r5, Z+29	; 0x1d
     10c:	1d 3c       	cpi	r17, 0xCD	; 205
     10e:	b7 cc       	rjmp	.-1682   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
     110:	57 63       	ori	r21, 0x37	; 55
     112:	bd 6d       	ori	r27, 0xDD	; 221
     114:	ed fd       	.word	0xfded	; ????
     116:	75 3e       	cpi	r23, 0xE5	; 229
     118:	f6 17       	cp	r31, r22
     11a:	72 31       	cpi	r23, 0x12	; 18
     11c:	bf 00       	.word	0x00bf	; ????
     11e:	00 00       	nop
     120:	80 3f       	cpi	r24, 0xF0	; 240
     122:	08 00       	.word	0x0008	; ????
     124:	00 00       	nop
     126:	be 92       	st	-X, r11
     128:	24 49       	sbci	r18, 0x94	; 148
     12a:	12 3e       	cpi	r17, 0xE2	; 226
     12c:	ab aa       	std	Y+51, r10	; 0x33
     12e:	aa 2a       	or	r10, r26
     130:	be cd       	rjmp	.-1156   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     132:	cc cc       	rjmp	.-1640   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     134:	4c 3e       	cpi	r20, 0xEC	; 236
     136:	00 00       	nop
     138:	00 80       	ld	r0, Z
     13a:	be ab       	std	Y+54, r27	; 0x36
     13c:	aa aa       	std	Y+50, r10	; 0x32
     13e:	aa 3e       	cpi	r26, 0xEA	; 234
     140:	00 00       	nop
     142:	00 00       	nop
     144:	bf 00       	.word	0x00bf	; ????
     146:	00 00       	nop
     148:	80 3f       	cpi	r24, 0xF0	; 240
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	00 08       	sbc	r0, r0
     150:	41 78       	andi	r20, 0x81	; 129
     152:	d3 bb       	out	0x13, r29	; 19
     154:	43 87       	std	Z+11, r20	; 0x0b
     156:	d1 13       	cpse	r29, r17
     158:	3d 19       	sub	r19, r13
     15a:	0e 3c       	cpi	r16, 0xCE	; 206
     15c:	c3 bd       	out	0x23, r28	; 35
     15e:	42 82       	std	Z+2, r4	; 0x02
     160:	ad 2b       	or	r26, r29
     162:	3e 68       	ori	r19, 0x8E	; 142
     164:	ec 82       	std	Y+4, r14	; 0x04
     166:	76 be       	out	0x36, r7	; 54
     168:	d9 8f       	std	Y+25, r29	; 0x19
     16a:	e1 a9       	ldd	r30, Z+49	; 0x31
     16c:	3e 4c       	sbci	r19, 0xCE	; 206
     16e:	80 ef       	ldi	r24, 0xF0	; 240
     170:	ff be       	out	0x3f, r15	; 63
     172:	01 c4       	rjmp	.+2050   	; 0x976 <get_linear_width+0x5e>
     174:	ff 7f       	andi	r31, 0xFF	; 255
     176:	3f 00       	.word	0x003f	; ????
     178:	00 00       	nop
	...

0000017c <__trampolines_end>:
     17c:	6e 61       	ori	r22, 0x1E	; 30
     17e:	6e 00       	.word	0x006e	; ????

00000180 <__c.2177>:
     180:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     190:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1a0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1b0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1c0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1d0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1e0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1f0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     200:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     210:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     220:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     230:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     240:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     250:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     260:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     270:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	d0 e1       	ldi	r29, 0x10	; 16
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61

0000028a <__do_copy_data>:
     28a:	12 e0       	ldi	r17, 0x02	; 2
     28c:	a0 e0       	ldi	r26, 0x00	; 0
     28e:	b1 e0       	ldi	r27, 0x01	; 1
     290:	ec e7       	ldi	r30, 0x7C	; 124
     292:	ff e2       	ldi	r31, 0x2F	; 47
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0b bf       	out	0x3b, r16	; 59
     298:	02 c0       	rjmp	.+4      	; 0x29e <__do_copy_data+0x14>
     29a:	07 90       	elpm	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	a2 3e       	cpi	r26, 0xE2	; 226
     2a0:	b1 07       	cpc	r27, r17
     2a2:	d9 f7       	brne	.-10     	; 0x29a <__do_copy_data+0x10>

000002a4 <__do_clear_bss>:
     2a4:	22 e0       	ldi	r18, 0x02	; 2
     2a6:	a2 ee       	ldi	r26, 0xE2	; 226
     2a8:	b2 e0       	ldi	r27, 0x02	; 2
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <.do_clear_bss_start>

000002ac <.do_clear_bss_loop>:
     2ac:	1d 92       	st	X+, r1

000002ae <.do_clear_bss_start>:
     2ae:	ae 3e       	cpi	r26, 0xEE	; 238
     2b0:	b2 07       	cpc	r27, r18
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <.do_clear_bss_loop>
     2b4:	35 d2       	rcall	.+1130   	; 0x720 <main>
     2b6:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_exit>

000002ba <__bad_interrupt>:
     2ba:	a2 ce       	rjmp	.-700    	; 0x0 <__vectors>

000002bc <lcd_toggle_clear>:


/// Clears the LCD
void lcd_clear(void) {
	lcd_command(HD_LCD_CLEAR);
	wait_ms(1);
     2bc:	de 9a       	sbi	0x1b, 6	; 27
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <wait_ms>
     2c4:	de 98       	cbi	0x1b, 6	; 27
     2c6:	8b b3       	in	r24, 0x1b	; 27
     2c8:	80 7f       	andi	r24, 0xF0	; 240
     2ca:	8b bb       	out	0x1b, r24	; 27
     2cc:	08 95       	ret

000002ce <lcd_command>:
     2ce:	cf 93       	push	r28
     2d0:	c8 2f       	mov	r28, r24
     2d2:	dc 98       	cbi	0x1b, 4	; 27
     2d4:	8b b3       	in	r24, 0x1b	; 27
     2d6:	9c 2f       	mov	r25, r28
     2d8:	92 95       	swap	r25
     2da:	9f 70       	andi	r25, 0x0F	; 15
     2dc:	89 2b       	or	r24, r25
     2de:	8b bb       	out	0x1b, r24	; 27
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	ec df       	rcall	.-40     	; 0x2bc <lcd_toggle_clear>
     2e4:	8b b3       	in	r24, 0x1b	; 27
     2e6:	cf 70       	andi	r28, 0x0F	; 15
     2e8:	c8 2b       	or	r28, r24
     2ea:	cb bb       	out	0x1b, r28	; 27
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	e6 df       	rcall	.-52     	; 0x2bc <lcd_toggle_clear>
     2f0:	dc 9a       	sbi	0x1b, 4	; 27
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	ea cf       	rjmp	.-44     	; 0x2ce <lcd_command>
     2fa:	08 95       	ret

000002fc <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
     304:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <wait_ms>
	PORTA&=~enable;
     30e:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
     310:	85 e0       	ldi	r24, 0x05	; 5
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <wait_ms>
	PORTA|=enable;
     318:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <wait_ms>
	PORTA&=~enable;
     322:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
     324:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <wait_ms>
	PORTA&=~enable;
     32e:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	c2 df       	rcall	.-124    	; 0x2bc <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
     338:	8b b3       	in	r24, 0x1b	; 27
     33a:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	be df       	rcall	.-132    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x0E;
     340:	8b b3       	in	r24, 0x1b	; 27
     342:	8e 60       	ori	r24, 0x0E	; 14
     344:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	b9 df       	rcall	.-142    	; 0x2bc <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
     34a:	8b b3       	in	r24, 0x1b	; 27
     34c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	b5 df       	rcall	.-150    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x06;
     352:	8b b3       	in	r24, 0x1b	; 27
     354:	86 60       	ori	r24, 0x06	; 6
     356:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	b0 df       	rcall	.-160    	; 0x2bc <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
     35c:	8b b3       	in	r24, 0x1b	; 27
     35e:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	ac df       	rcall	.-168    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x01;
     364:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	a9 df       	rcall	.-174    	; 0x2bc <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
     36a:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
     36c:	c4 cf       	rjmp	.-120    	; 0x2f6 <lcd_home_line1>
     36e:	08 95       	ret

00000370 <rotate>:
	}
	
	oi_set_wheels(0, 0);
}

void rotate(oi_t *self, float degrees, robot* bot) {
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
     392:	4a 01       	movw	r8, r20
     394:	5b 01       	movw	r10, r22
     396:	89 01       	movw	r16, r18
		float sensordegrees = degrees/1.13; //calibration: make number smaller to oversteer.
     398:	27 ed       	ldi	r18, 0xD7	; 215
     39a:	33 ea       	ldi	r19, 0xA3	; 163
     39c:	40 e9       	ldi	r20, 0x90	; 144
     39e:	5f e3       	ldi	r21, 0x3F	; 63
     3a0:	c5 01       	movw	r24, r10
     3a2:	b4 01       	movw	r22, r8
     3a4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__divsf3>
     3a8:	6b 01       	movw	r12, r22
     3aa:	7c 01       	movw	r14, r24
		float toturn = 0;
		bot->angle += fmod(degrees, 360);
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	44 eb       	ldi	r20, 0xB4	; 180
     3b2:	53 e4       	ldi	r21, 0x43	; 67
     3b4:	c5 01       	movw	r24, r10
     3b6:	b4 01       	movw	r22, r8
     3b8:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <fmod>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	f8 01       	movw	r30, r16
     3c2:	60 85       	ldd	r22, Z+8	; 0x08
     3c4:	71 85       	ldd	r23, Z+9	; 0x09
     3c6:	82 85       	ldd	r24, Z+10	; 0x0a
     3c8:	93 85       	ldd	r25, Z+11	; 0x0b
     3ca:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3>
     3ce:	f8 01       	movw	r30, r16
     3d0:	60 87       	std	Z+8, r22	; 0x08
     3d2:	71 87       	std	Z+9, r23	; 0x09
     3d4:	82 87       	std	Z+10, r24	; 0x0a
     3d6:	93 87       	std	Z+11, r25	; 0x0b
		
		
		if (degrees > 0){ //rotate CCW
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	a9 01       	movw	r20, r18
     3de:	c5 01       	movw	r24, r10
     3e0:	b4 01       	movw	r22, r8
     3e2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     3e6:	18 16       	cp	r1, r24
     3e8:	64 f5       	brge	.+88     	; 0x442 <rotate+0xd2>
			oi_set_wheels(150,-150);
     3ea:	6a e6       	ldi	r22, 0x6A	; 106
     3ec:	7f ef       	ldi	r23, 0xFF	; 255
     3ee:	86 e9       	ldi	r24, 0x96	; 150
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	9f d7       	rcall	.+3902   	; 0x1332 <oi_set_wheels>
			while (toturn < sensordegrees) {
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	a9 01       	movw	r20, r18
     3fa:	c7 01       	movw	r24, r14
     3fc:	b6 01       	movw	r22, r12
     3fe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     402:	18 16       	cp	r1, r24
     404:	14 f5       	brge	.+68     	; 0x44a <rotate+0xda>
     406:	41 2c       	mov	r4, r1
     408:	51 2c       	mov	r5, r1
     40a:	32 01       	movw	r6, r4
				oi_update(self);
     40c:	ce 01       	movw	r24, r28
     40e:	e9 d7       	rcall	.+4050   	; 0x13e2 <oi_update>
				toturn += self->angle;
     410:	6e 85       	ldd	r22, Y+14	; 0x0e
     412:	7f 85       	ldd	r23, Y+15	; 0x0f
     414:	07 2e       	mov	r0, r23
     416:	00 0c       	add	r0, r0
     418:	88 0b       	sbc	r24, r24
     41a:	99 0b       	sbc	r25, r25
     41c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     420:	9b 01       	movw	r18, r22
     422:	ac 01       	movw	r20, r24
     424:	c3 01       	movw	r24, r6
     426:	b2 01       	movw	r22, r4
     428:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3>
     42c:	2b 01       	movw	r4, r22
     42e:	3c 01       	movw	r6, r24
		bot->angle += fmod(degrees, 360);
		
		
		if (degrees > 0){ //rotate CCW
			oi_set_wheels(150,-150);
			while (toturn < sensordegrees) {
     430:	9b 01       	movw	r18, r22
     432:	ac 01       	movw	r20, r24
     434:	c7 01       	movw	r24, r14
     436:	b6 01       	movw	r22, r12
     438:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     43c:	18 16       	cp	r1, r24
     43e:	34 f3       	brlt	.-52     	; 0x40c <rotate+0x9c>
     440:	07 c0       	rjmp	.+14     	; 0x450 <rotate+0xe0>
	oi_set_wheels(0, 0);
}

void rotate(oi_t *self, float degrees, robot* bot) {
		float sensordegrees = degrees/1.13; //calibration: make number smaller to oversteer.
		float toturn = 0;
     442:	41 2c       	mov	r4, r1
     444:	51 2c       	mov	r5, r1
     446:	32 01       	movw	r6, r4
     448:	03 c0       	rjmp	.+6      	; 0x450 <rotate+0xe0>
     44a:	41 2c       	mov	r4, r1
     44c:	51 2c       	mov	r5, r1
     44e:	32 01       	movw	r6, r4
			while (toturn < sensordegrees) {
				oi_update(self);
				toturn += self->angle;
			}
		}
		if (degrees < 0){ //rotate CW
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	a9 01       	movw	r20, r18
     456:	c5 01       	movw	r24, r10
     458:	b4 01       	movw	r22, r8
     45a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__cmpsf2>
     45e:	88 23       	and	r24, r24
     460:	3c f5       	brge	.+78     	; 0x4b0 <rotate+0x140>
			oi_set_wheels(-150,150);
     462:	66 e9       	ldi	r22, 0x96	; 150
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	8a e6       	ldi	r24, 0x6A	; 106
     468:	9f ef       	ldi	r25, 0xFF	; 255
     46a:	63 d7       	rcall	.+3782   	; 0x1332 <oi_set_wheels>
			while (toturn > sensordegrees) {
     46c:	a7 01       	movw	r20, r14
     46e:	96 01       	movw	r18, r12
     470:	c3 01       	movw	r24, r6
     472:	b2 01       	movw	r22, r4
     474:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     478:	18 16       	cp	r1, r24
     47a:	d4 f4       	brge	.+52     	; 0x4b0 <rotate+0x140>
				oi_update(self);
     47c:	ce 01       	movw	r24, r28
     47e:	b1 d7       	rcall	.+3938   	; 0x13e2 <oi_update>
				toturn += self->angle;
     480:	6e 85       	ldd	r22, Y+14	; 0x0e
     482:	7f 85       	ldd	r23, Y+15	; 0x0f
     484:	07 2e       	mov	r0, r23
     486:	00 0c       	add	r0, r0
     488:	88 0b       	sbc	r24, r24
     48a:	99 0b       	sbc	r25, r25
     48c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
     494:	c3 01       	movw	r24, r6
     496:	b2 01       	movw	r22, r4
     498:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3>
     49c:	2b 01       	movw	r4, r22
     49e:	3c 01       	movw	r6, r24
				toturn += self->angle;
			}
		}
		if (degrees < 0){ //rotate CW
			oi_set_wheels(-150,150);
			while (toturn > sensordegrees) {
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	c7 01       	movw	r24, r14
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__cmpsf2>
     4ac:	88 23       	and	r24, r24
     4ae:	34 f3       	brlt	.-52     	; 0x47c <rotate+0x10c>
				oi_update(self);
				toturn += self->angle;
			}
		}
		oi_set_wheels(0, 0); // stop
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	3c d7       	rcall	.+3704   	; 0x1332 <oi_set_wheels>
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	7f 90       	pop	r7
     4d4:	6f 90       	pop	r6
     4d6:	5f 90       	pop	r5
     4d8:	4f 90       	pop	r4
     4da:	08 95       	ret

000004dc <move>:
	}
	
	return 0;
}

void move(oi_t *self, float distance_mm, robot *bot) { // Find more accurate way of moving robot
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	4a 01       	movw	r8, r20
     500:	5b 01       	movw	r10, r22
     502:	89 01       	movw	r16, r18
	float togo = distance_mm/0.11;                    // calculated sensor distance
     504:	2e ea       	ldi	r18, 0xAE	; 174
     506:	37 e4       	ldi	r19, 0x47	; 71
     508:	41 ee       	ldi	r20, 0xE1	; 225
     50a:	5d e3       	ldi	r21, 0x3D	; 61
     50c:	c5 01       	movw	r24, r10
     50e:	b4 01       	movw	r22, r8
     510:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__divsf3>
     514:	2b 01       	movw	r4, r22
     516:	3c 01       	movw	r6, r24
	float travel = 0;				                    // distance traveled by robot
	bot->dist_traveled = distance_mm;
     518:	f8 01       	movw	r30, r16
     51a:	84 86       	std	Z+12, r8	; 0x0c
     51c:	95 86       	std	Z+13, r9	; 0x0d
     51e:	a6 86       	std	Z+14, r10	; 0x0e
     520:	b7 86       	std	Z+15, r11	; 0x0f
	
	if (distance_mm > 0) {
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	0c f0       	brlt	.+2      	; 0x536 <move+0x5a>
     534:	ab c0       	rjmp	.+342    	; 0x68c <move+0x1b0>
		oi_set_wheels(150, 150);
     536:	66 e9       	ldi	r22, 0x96	; 150
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	86 e9       	ldi	r24, 0x96	; 150
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	f9 d6       	rcall	.+3570   	; 0x1332 <oi_set_wheels>
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	a9 01       	movw	r20, r18
     546:	c3 01       	movw	r24, r6
     548:	b2 01       	movw	r22, r4
     54a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     54e:	18 16       	cp	r1, r24
     550:	0c f0       	brlt	.+2      	; 0x554 <move+0x78>
     552:	d0 c0       	rjmp	.+416    	; 0x6f4 <move+0x218>
			if ((self->cliff_frontleft_signal > 900 || self->cliff_frontleft) || (self->cliff_frontright_signal > 670 || self->cliff_frontright)) {
     554:	8e 8d       	ldd	r24, Y+30	; 0x1e
     556:	9f 8d       	ldd	r25, Y+31	; 0x1f
     558:	85 38       	cpi	r24, 0x85	; 133
     55a:	93 40       	sbci	r25, 0x03	; 3
     55c:	38 f5       	brcc	.+78     	; 0x5ac <move+0xd0>
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	81 11       	cpse	r24, r1
     562:	24 c0       	rjmp	.+72     	; 0x5ac <move+0xd0>
     564:	88 a1       	ldd	r24, Y+32	; 0x20
     566:	99 a1       	ldd	r25, Y+33	; 0x21
     568:	8f 39       	cpi	r24, 0x9F	; 159
     56a:	92 40       	sbci	r25, 0x02	; 2
     56c:	f8 f4       	brcc	.+62     	; 0x5ac <move+0xd0>
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	81 11       	cpse	r24, r1
     572:	1c c0       	rjmp	.+56     	; 0x5ac <move+0xd0>
				move(self, -distance_mm, bot);
				break;
			}
			
			if (self->cliff_left_signal > 920 || self->cliff_left) {
     574:	8c 8d       	ldd	r24, Y+28	; 0x1c
     576:	9d 8d       	ldd	r25, Y+29	; 0x1d
     578:	89 39       	cpi	r24, 0x99	; 153
     57a:	93 40       	sbci	r25, 0x03	; 3
     57c:	30 f5       	brcc	.+76     	; 0x5ca <move+0xee>
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	81 11       	cpse	r24, r1
     582:	23 c0       	rjmp	.+70     	; 0x5ca <move+0xee>
     584:	c1 2c       	mov	r12, r1
     586:	d1 2c       	mov	r13, r1
     588:	76 01       	movw	r14, r12
     58a:	26 c0       	rjmp	.+76     	; 0x5d8 <move+0xfc>
	
	if (distance_mm > 0) {
		oi_set_wheels(150, 150);
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
			if ((self->cliff_frontleft_signal > 900 || self->cliff_frontleft) || (self->cliff_frontright_signal > 670 || self->cliff_frontright)) {
     58c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     58e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     590:	85 38       	cpi	r24, 0x85	; 133
     592:	93 40       	sbci	r25, 0x03	; 3
     594:	58 f4       	brcc	.+22     	; 0x5ac <move+0xd0>
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	81 11       	cpse	r24, r1
     59a:	08 c0       	rjmp	.+16     	; 0x5ac <move+0xd0>
     59c:	88 a1       	ldd	r24, Y+32	; 0x20
     59e:	99 a1       	ldd	r25, Y+33	; 0x21
     5a0:	8f 39       	cpi	r24, 0x9F	; 159
     5a2:	92 40       	sbci	r25, 0x02	; 2
     5a4:	18 f4       	brcc	.+6      	; 0x5ac <move+0xd0>
     5a6:	8c 81       	ldd	r24, Y+4	; 0x04
     5a8:	88 23       	and	r24, r24
     5aa:	39 f0       	breq	.+14     	; 0x5ba <move+0xde>
				move(self, -distance_mm, bot);
     5ac:	b5 01       	movw	r22, r10
     5ae:	a4 01       	movw	r20, r8
     5b0:	70 58       	subi	r23, 0x80	; 128
     5b2:	98 01       	movw	r18, r16
     5b4:	ce 01       	movw	r24, r28
     5b6:	92 df       	rcall	.-220    	; 0x4dc <move>
				break;
     5b8:	9d c0       	rjmp	.+314    	; 0x6f4 <move+0x218>
			}
			
			if (self->cliff_left_signal > 920 || self->cliff_left) {
     5ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5be:	89 39       	cpi	r24, 0x99	; 153
     5c0:	93 40       	sbci	r25, 0x03	; 3
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <move+0xee>
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	88 23       	and	r24, r24
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <move+0xfc>
				move(self, -distance_mm, bot);
     5ca:	b5 01       	movw	r22, r10
     5cc:	a4 01       	movw	r20, r8
     5ce:	70 58       	subi	r23, 0x80	; 128
     5d0:	98 01       	movw	r18, r16
     5d2:	ce 01       	movw	r24, r28
     5d4:	83 df       	rcall	.-250    	; 0x4dc <move>
				break;
     5d6:	8e c0       	rjmp	.+284    	; 0x6f4 <move+0x218>
			}
			
			if (self->cliff_right_signal > 550 || self->cliff_right) {
     5d8:	8a a1       	ldd	r24, Y+34	; 0x22
     5da:	9b a1       	ldd	r25, Y+35	; 0x23
     5dc:	87 32       	cpi	r24, 0x27	; 39
     5de:	92 40       	sbci	r25, 0x02	; 2
     5e0:	18 f4       	brcc	.+6      	; 0x5e8 <move+0x10c>
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	88 23       	and	r24, r24
     5e6:	39 f0       	breq	.+14     	; 0x5f6 <move+0x11a>
				move(self, -distance_mm, bot);
     5e8:	b5 01       	movw	r22, r10
     5ea:	a4 01       	movw	r20, r8
     5ec:	70 58       	subi	r23, 0x80	; 128
     5ee:	98 01       	movw	r18, r16
     5f0:	ce 01       	movw	r24, r28
     5f2:	74 df       	rcall	.-280    	; 0x4dc <move>
				break;
     5f4:	7f c0       	rjmp	.+254    	; 0x6f4 <move+0x218>
			}
			
			if (self->bumper_left) {
     5f6:	88 81       	ld	r24, Y
     5f8:	81 ff       	sbrs	r24, 1
     5fa:	15 c0       	rjmp	.+42     	; 0x626 <move+0x14a>
				move(self, -15, bot);
     5fc:	98 01       	movw	r18, r16
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e7       	ldi	r22, 0x70	; 112
     604:	71 ec       	ldi	r23, 0xC1	; 193
     606:	ce 01       	movw	r24, r28
     608:	69 df       	rcall	.-302    	; 0x4dc <move>
				travel -= 15.0/0.115;
				wait_ms(100);
     60a:	84 e6       	ldi	r24, 0x64	; 100
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	ec d7       	rcall	.+4056   	; 0x15e8 <wait_ms>
				rotate(self, -90, bot);
     610:	98 01       	movw	r18, r16
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	64 eb       	ldi	r22, 0xB4	; 180
     618:	72 ec       	ldi	r23, 0xC2	; 194
     61a:	ce 01       	movw	r24, r28
     61c:	a9 de       	rcall	.-686    	; 0x370 <rotate>
				wait_ms(100);
     61e:	84 e6       	ldi	r24, 0x64	; 100
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	e2 d7       	rcall	.+4036   	; 0x15e8 <wait_ms>
				break;
     624:	67 c0       	rjmp	.+206    	; 0x6f4 <move+0x218>
			}
			
			if (self->bumper_right) {
     626:	80 ff       	sbrs	r24, 0
     628:	15 c0       	rjmp	.+42     	; 0x654 <move+0x178>
				move(self, -15, bot);
     62a:	98 01       	movw	r18, r16
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	60 e7       	ldi	r22, 0x70	; 112
     632:	71 ec       	ldi	r23, 0xC1	; 193
     634:	ce 01       	movw	r24, r28
     636:	52 df       	rcall	.-348    	; 0x4dc <move>
				travel -= 15.0/0.115;
				wait_ms(100);
     638:	84 e6       	ldi	r24, 0x64	; 100
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	d5 d7       	rcall	.+4010   	; 0x15e8 <wait_ms>
				rotate(self, 90, bot);
     63e:	98 01       	movw	r18, r16
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	64 eb       	ldi	r22, 0xB4	; 180
     646:	72 e4       	ldi	r23, 0x42	; 66
     648:	ce 01       	movw	r24, r28
     64a:	92 de       	rcall	.-732    	; 0x370 <rotate>
				wait_ms(100);
     64c:	84 e6       	ldi	r24, 0x64	; 100
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	cb d7       	rcall	.+3990   	; 0x15e8 <wait_ms>
				break;
     652:	50 c0       	rjmp	.+160    	; 0x6f4 <move+0x218>
			}
			oi_update(self);
     654:	ce 01       	movw	r24, r28
     656:	c5 d6       	rcall	.+3466   	; 0x13e2 <oi_update>
			travel += self->distance;
     658:	6c 85       	ldd	r22, Y+12	; 0x0c
     65a:	7d 85       	ldd	r23, Y+13	; 0x0d
     65c:	07 2e       	mov	r0, r23
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3>
     674:	6b 01       	movw	r12, r22
     676:	7c 01       	movw	r14, r24
	bot->dist_traveled = distance_mm;
	
	if (distance_mm > 0) {
		oi_set_wheels(150, 150);
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	c3 01       	movw	r24, r6
     67e:	b2 01       	movw	r22, r4
     680:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__gesf2>
     684:	18 16       	cp	r1, r24
     686:	0c f4       	brge	.+2      	; 0x68a <move+0x1ae>
     688:	81 cf       	rjmp	.-254    	; 0x58c <move+0xb0>
     68a:	34 c0       	rjmp	.+104    	; 0x6f4 <move+0x218>
				break;
			}
			oi_update(self);
			travel += self->distance;
		}
	} else if (distance_mm < 0) {
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	a9 01       	movw	r20, r18
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	5c f5       	brge	.+86     	; 0x6f4 <move+0x218>
		oi_set_wheels(-150, -150);
     69e:	6a e6       	ldi	r22, 0x6A	; 106
     6a0:	7f ef       	ldi	r23, 0xFF	; 255
     6a2:	8a e6       	ldi	r24, 0x6A	; 106
     6a4:	9f ef       	ldi	r25, 0xFF	; 255
     6a6:	45 d6       	rcall	.+3210   	; 0x1332 <oi_set_wheels>
		
		while (travel > togo) {
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	a9 01       	movw	r20, r18
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	ec f4       	brge	.+58     	; 0x6f4 <move+0x218>
     6ba:	c1 2c       	mov	r12, r1
     6bc:	d1 2c       	mov	r13, r1
     6be:	76 01       	movw	r14, r12
			oi_update(self);
     6c0:	ce 01       	movw	r24, r28
     6c2:	8f d6       	rcall	.+3358   	; 0x13e2 <oi_update>
			travel += self->distance;
     6c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     6c8:	bc 01       	movw	r22, r24
     6ca:	99 0f       	add	r25, r25
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     6d4:	9b 01       	movw	r18, r22
     6d6:	ac 01       	movw	r20, r24
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__addsf3>
     6e0:	6b 01       	movw	r12, r22
     6e2:	7c 01       	movw	r14, r24
			travel += self->distance;
		}
	} else if (distance_mm < 0) {
		oi_set_wheels(-150, -150);
		
		while (travel > togo) {
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c3 01       	movw	r24, r6
     6ea:	b2 01       	movw	r22, r4
     6ec:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__cmpsf2>
     6f0:	88 23       	and	r24, r24
     6f2:	34 f3       	brlt	.-52     	; 0x6c0 <move+0x1e4>
			oi_update(self);
			travel += self->distance;
		}
	}
	
	oi_set_wheels(0, 0);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	1a d6       	rcall	.+3124   	; 0x1332 <oi_set_wheels>
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	9f 90       	pop	r9
     714:	8f 90       	pop	r8
     716:	7f 90       	pop	r7
     718:	6f 90       	pop	r6
     71a:	5f 90       	pop	r5
     71c:	4f 90       	pop	r4
     71e:	08 95       	ret

00000720 <main>:
// Prototypes
void move(oi_t *self, float distance_mm, robot *bot);
void rotate(oi_t *self, float degrees, robot *bot);

int main(void)
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	ca 5a       	subi	r28, 0xAA	; 170
     72a:	d1 09       	sbc	r29, r1
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
	obstacle obst;
	robot bot;
    oi_t *sensor_data = oi_alloc();
     736:	ce d5       	rcall	.+2972   	; 0x12d4 <oi_alloc>
     738:	7c 01       	movw	r14, r24
	reset(&obst, &bot);
     73a:	be 01       	movw	r22, r28
     73c:	6b 56       	subi	r22, 0x6B	; 107
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	5c d2       	rcall	.+1208   	; 0xbfe <reset>
    oi_init(sensor_data);
     746:	c7 01       	movw	r24, r14
     748:	09 d7       	rcall	.+3602   	; 0x155c <oi_init>
	char dist_to_travel = 15; // cm
	char angle_to_turn = 45;  // degrees
	
	unsigned char current;
	unsigned char num_notes = 3;
	unsigned char notes[] = {36, 36, 36};
     74a:	84 e2       	ldi	r24, 0x24	; 36
     74c:	cb 55       	subi	r28, 0x5B	; 91
     74e:	df 4f       	sbci	r29, 0xFF	; 255
     750:	88 83       	st	Y, r24
     752:	c5 5a       	subi	r28, 0xA5	; 165
     754:	d0 40       	sbci	r29, 0x00	; 0
     756:	ca 55       	subi	r28, 0x5A	; 90
     758:	df 4f       	sbci	r29, 0xFF	; 255
     75a:	88 83       	st	Y, r24
     75c:	c6 5a       	subi	r28, 0xA6	; 166
     75e:	d0 40       	sbci	r29, 0x00	; 0
     760:	c9 55       	subi	r28, 0x59	; 89
     762:	df 4f       	sbci	r29, 0xFF	; 255
     764:	88 83       	st	Y, r24
     766:	c7 5a       	subi	r28, 0xA7	; 167
     768:	d0 40       	sbci	r29, 0x00	; 0
	unsigned char duration[] = {15, 15, 15};
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	c8 55       	subi	r28, 0x58	; 88
     76e:	df 4f       	sbci	r29, 0xFF	; 255
     770:	88 83       	st	Y, r24
     772:	c8 5a       	subi	r28, 0xA8	; 168
     774:	d0 40       	sbci	r29, 0x00	; 0
     776:	c7 55       	subi	r28, 0x57	; 87
     778:	df 4f       	sbci	r29, 0xFF	; 255
     77a:	88 83       	st	Y, r24
     77c:	c9 5a       	subi	r28, 0xA9	; 169
     77e:	d0 40       	sbci	r29, 0x00	; 0
     780:	c6 55       	subi	r28, 0x56	; 86
     782:	df 4f       	sbci	r29, 0xFF	; 255
     784:	88 83       	st	Y, r24
     786:	ca 5a       	subi	r28, 0xAA	; 170
     788:	d0 40       	sbci	r29, 0x00	; 0
	
	while (1) {
		oi_update(sensor_data);
     78a:	c7 01       	movw	r24, r14
     78c:	2a d6       	rcall	.+3156   	; 0x13e2 <oi_update>
		/*lprintf("Cliff L: %d\nCliff Front L: %d\nCliff Front R: %d\nCliff R: %d", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
		lprintf("Cliff L: %d\nCliff Front L: %d\nCliff Front R: %d\nCliff R: %d", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
		wait_ms(100);*/
		
		current = USART_Receive();
     78e:	0e 94 45 0c 	call	0x188a	; 0x188a <USART_Receive>
     792:	18 2f       	mov	r17, r24
		
		if (current == 'w') {
     794:	87 37       	cpi	r24, 0x77	; 119
     796:	89 f4       	brne	.+34     	; 0x7ba <main+0x9a>
			move(sensor_data, dist_to_travel, &bot);
     798:	9e 01       	movw	r18, r28
     79a:	2b 56       	subi	r18, 0x6B	; 107
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e7       	ldi	r22, 0x70	; 112
     7a4:	71 e4       	ldi	r23, 0x41	; 65
     7a6:	c7 01       	movw	r24, r14
     7a8:	99 de       	rcall	.-718    	; 0x4dc <move>
			update_information(&obst, &bot, sensor_data);
     7aa:	a7 01       	movw	r20, r14
     7ac:	be 01       	movw	r22, r28
     7ae:	6b 56       	subi	r22, 0x6B	; 107
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	f7 d0       	rcall	.+494    	; 0x9a6 <update_information>
     7b8:	38 c0       	rjmp	.+112    	; 0x82a <main+0x10a>
		} else if (current == 'a') {
     7ba:	81 36       	cpi	r24, 0x61	; 97
     7bc:	51 f4       	brne	.+20     	; 0x7d2 <main+0xb2>
			rotate(sensor_data, angle_to_turn, &bot);
     7be:	9e 01       	movw	r18, r28
     7c0:	2b 56       	subi	r18, 0x6B	; 107
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	64 e3       	ldi	r22, 0x34	; 52
     7ca:	72 e4       	ldi	r23, 0x42	; 66
     7cc:	c7 01       	movw	r24, r14
     7ce:	d0 dd       	rcall	.-1120   	; 0x370 <rotate>
     7d0:	2c c0       	rjmp	.+88     	; 0x82a <main+0x10a>
		} else if (current == 'd') {
     7d2:	84 36       	cpi	r24, 0x64	; 100
     7d4:	51 f4       	brne	.+20     	; 0x7ea <main+0xca>
			rotate(sensor_data, -angle_to_turn, &bot);
     7d6:	9e 01       	movw	r18, r28
     7d8:	2b 56       	subi	r18, 0x6B	; 107
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	64 e3       	ldi	r22, 0x34	; 52
     7e2:	72 ec       	ldi	r23, 0xC2	; 194
     7e4:	c7 01       	movw	r24, r14
     7e6:	c4 dd       	rcall	.-1144   	; 0x370 <rotate>
     7e8:	20 c0       	rjmp	.+64     	; 0x82a <main+0x10a>
		} else if (current == 'q') {
     7ea:	81 37       	cpi	r24, 0x71	; 113
     7ec:	81 f4       	brne	.+32     	; 0x80e <main+0xee>
			sweep(&obst, &bot);
     7ee:	be 01       	movw	r22, r28
     7f0:	6b 56       	subi	r22, 0x6B	; 107
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	69 d4       	rcall	.+2258   	; 0x10cc <sweep>
			print_and_process_stats(&obst);
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	e9 d4       	rcall	.+2514   	; 0x11d2 <print_and_process_stats>
			reset(&obst, &bot);
     800:	be 01       	movw	r22, r28
     802:	6b 56       	subi	r22, 0x6B	; 107
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	f9 d1       	rcall	.+1010   	; 0xbfe <reset>
     80c:	0e c0       	rjmp	.+28     	; 0x82a <main+0x10a>
		} else {
			oi_load_song(2, num_notes, notes, duration);
     80e:	9e 01       	movw	r18, r28
     810:	28 55       	subi	r18, 0x58	; 88
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	ae 01       	movw	r20, r28
     816:	4b 55       	subi	r20, 0x5B	; 91
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	9e d5       	rcall	.+2876   	; 0x1360 <oi_load_song>
			oi_play_song(2);
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	cc d5       	rcall	.+2968   	; 0x13c2 <oi_play_song>
		}
		
		USART_Transmit(current);
     82a:	81 2f       	mov	r24, r17
     82c:	0e 94 41 0c 	call	0x1882	; 0x1882 <USART_Transmit>
	}
     830:	ac cf       	rjmp	.-168    	; 0x78a <main+0x6a>

00000832 <initializations>:
#include <math.h>
#include "lcd.h"
#include "util.h"
#include "object_tracking.h"

void initializations(obstacle* obst, robot* bot) {
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	8b 01       	movw	r16, r22
	obst->degrees = 0.0; // Start angle at 0
     83e:	18 82       	st	Y, r1
     840:	19 82       	std	Y+1, r1	; 0x01
     842:	1a 82       	std	Y+2, r1	; 0x02
     844:	1b 82       	std	Y+3, r1	; 0x03
	
	lcd_init();               // Initialize LCD
     846:	5a dd       	rcall	.-1356   	; 0x2fc <lcd_init>
	ADC_init();               // Initialize IR
     848:	fc d6       	rcall	.+3576   	; 0x1642 <ADC_init>
	ping_timer_init();        // Initialize Ping
     84a:	31 d7       	rcall	.+3682   	; 0x16ae <ping_timer_init>
	servo_timer_init();       // Initialize Servo
     84c:	9e d7       	rcall	.+3900   	; 0x178a <servo_timer_init>
	USART_Init(UBRR);         // Initialize USART for Bluetooth communication
     84e:	82 e2       	ldi	r24, 0x22	; 34
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 36 0c 	call	0x186c	; 0x186c <USART_Init>
	move_servo(&obst->degrees);     // Move Servo to starting position
     856:	ce 01       	movw	r24, r28
     858:	af d7       	rcall	.+3934   	; 0x17b8 <move_servo>
	wait_ms(500);             // Wait for Servo to settle
     85a:	84 ef       	ldi	r24, 0xF4	; 244
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	c4 d6       	rcall	.+3464   	; 0x15e8 <wait_ms>
	
	/* IR Variable Initializations */
	obst->cur_dist_IR = 0;
     860:	1d 82       	std	Y+5, r1	; 0x05
     862:	1c 82       	std	Y+4, r1	; 0x04
	obst->last_dist_IR = 0;
     864:	1f 82       	std	Y+7, r1	; 0x07
     866:	1e 82       	std	Y+6, r1	; 0x06
	obst->total_dist_IR = 0;
     868:	19 86       	std	Y+9, r1	; 0x09
     86a:	18 86       	std	Y+8, r1	; 0x08
	obst->start_angle_IR = 0;
     86c:	1a 86       	std	Y+10, r1	; 0x0a
	obst->end_angle_IR = 0;
     86e:	1b 86       	std	Y+11, r1	; 0x0b
	obst->object_detected = 0; // Using ^= to toggle breaks program if used a lot. Why?
     870:	8c 85       	ldd	r24, Y+12	; 0x0c
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	8c 87       	std	Y+12, r24	; 0x0c
	obst->all_object_index = 0;
     876:	fe 01       	movw	r30, r28
     878:	ed 56       	subi	r30, 0x6D	; 109
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	80 81       	ld	r24, Z
     87e:	80 7f       	andi	r24, 0xF0	; 240
     880:	80 83       	st	Z, r24
	obst->cur_obj_size_IR = 20;
     882:	8c 85       	ldd	r24, Y+12	; 0x0c
     884:	81 7c       	andi	r24, 0xC1	; 193
     886:	88 62       	ori	r24, 0x28	; 40
     888:	8c 87       	std	Y+12, r24	; 0x0c
	
	/* SONAR Variable Initializations */
	obst->cur_dist_SONAR = 0.0;
     88a:	1d 86       	std	Y+13, r1	; 0x0d
     88c:	1e 86       	std	Y+14, r1	; 0x0e
     88e:	1f 86       	std	Y+15, r1	; 0x0f
     890:	18 8a       	std	Y+16, r1	; 0x10
	obst->last_dist_SONAR = 0.0;
     892:	19 8a       	std	Y+17, r1	; 0x11
     894:	1a 8a       	std	Y+18, r1	; 0x12
     896:	1b 8a       	std	Y+19, r1	; 0x13
     898:	1c 8a       	std	Y+20, r1	; 0x14
	obst->start_dist_SONAR = 0;
     89a:	1d 8a       	std	Y+21, r1	; 0x15
	obst->end_dist_SONAR = 0;
     89c:	1e 8a       	std	Y+22, r1	; 0x16
	
	/* Smallest Object Variable Initializations */
	obst->smallest_obj_angular_size = 50;
     89e:	8f 89       	ldd	r24, Y+23	; 0x17
     8a0:	80 7c       	andi	r24, 0xC0	; 192
     8a2:	82 63       	ori	r24, 0x32	; 50
     8a4:	8f 8b       	std	Y+23, r24	; 0x17
	obst->smallest_obj_linear_size = LARGE_OBJECT_SIZE_MIN;
     8a6:	8f 89       	ldd	r24, Y+23	; 0x17
     8a8:	80 6c       	ori	r24, 0xC0	; 192
     8aa:	8f 8b       	std	Y+23, r24	; 0x17
     8ac:	88 8d       	ldd	r24, Y+24	; 0x18
     8ae:	88 7f       	andi	r24, 0xF8	; 248
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	88 8f       	std	Y+24, r24	; 0x18
	obst->smallest_obj_dist_SONAR = 0;
     8b4:	19 8e       	std	Y+25, r1	; 0x19
	obst->smallest_obj_dist_IR = 0;
     8b6:	1a 8e       	std	Y+26, r1	; 0x1a
	obst->smallest_obj_position = 0.0;
     8b8:	1b 8e       	std	Y+27, r1	; 0x1b
     8ba:	1c 8e       	std	Y+28, r1	; 0x1c
     8bc:	1d 8e       	std	Y+29, r1	; 0x1d
     8be:	1e 8e       	std	Y+30, r1	; 0x1e
	
	/* Closest Object Variable Initializations */
	obst->closest_obj_angular_size = 0;
     8c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8c2:	80 7c       	andi	r24, 0xC0	; 192
     8c4:	8f 8f       	std	Y+31, r24	; 0x1f
	obst->closest_obj_linear_size = 0;
     8c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8c8:	8f 73       	andi	r24, 0x3F	; 63
     8ca:	8f 8f       	std	Y+31, r24	; 0x1f
     8cc:	88 a1       	ldd	r24, Y+32	; 0x20
     8ce:	88 7f       	andi	r24, 0xF8	; 248
     8d0:	88 a3       	std	Y+32, r24	; 0x20
	obst->closest_obj_dist_SONAR = 341; // Approximate SONAR Range Limit
     8d2:	85 e5       	ldi	r24, 0x55	; 85
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	9a a3       	std	Y+34, r25	; 0x22
     8d8:	89 a3       	std	Y+33, r24	; 0x21
	obst->closest_obj_dist_IR = 2752;   // Approximate IR Range Limit
     8da:	80 ec       	ldi	r24, 0xC0	; 192
     8dc:	9a e0       	ldi	r25, 0x0A	; 10
     8de:	9c a3       	std	Y+36, r25	; 0x24
     8e0:	8b a3       	std	Y+35, r24	; 0x23
	obst->closest_obj_position = 0.0;
     8e2:	1d a2       	std	Y+37, r1	; 0x25
     8e4:	1e a2       	std	Y+38, r1	; 0x26
     8e6:	1f a2       	std	Y+39, r1	; 0x27
     8e8:	18 a6       	std	Y+40, r1	; 0x28
	
	/* Object Validation Level Initialization */
	obst->validation_level = 0;
     8ea:	19 a6       	std	Y+41, r1	; 0x29
	
	/* Robot Coordinates Initialization */
	bot->x = 0;
     8ec:	f8 01       	movw	r30, r16
     8ee:	10 82       	st	Z, r1
     8f0:	11 82       	std	Z+1, r1	; 0x01
     8f2:	12 82       	std	Z+2, r1	; 0x02
     8f4:	13 82       	std	Z+3, r1	; 0x03
	bot->y = 0;
     8f6:	14 82       	std	Z+4, r1	; 0x04
     8f8:	15 82       	std	Z+5, r1	; 0x05
     8fa:	16 82       	std	Z+6, r1	; 0x06
     8fc:	17 82       	std	Z+7, r1	; 0x07
	bot->angle = 0.0;
     8fe:	10 86       	std	Z+8, r1	; 0x08
     900:	11 86       	std	Z+9, r1	; 0x09
     902:	12 86       	std	Z+10, r1	; 0x0a
     904:	13 86       	std	Z+11, r1	; 0x0b
	bot->dist_traveled = 0;
     906:	14 86       	std	Z+12, r1	; 0x0c
     908:	15 86       	std	Z+13, r1	; 0x0d
     90a:	16 86       	std	Z+14, r1	; 0x0e
     90c:	17 86       	std	Z+15, r1	; 0x0f
	
	Obstacle Variables to Analyze
	obst->obst_index = 0; // Amount of goal posts found. There are 4 posts total so 3 bits will suffice.*/
	
	// Note: Object array does not need to be initialized
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <get_linear_width>:
	
	/* Find Closest Object */
	find_closest_obj(obst);
}

char get_linear_width(obstacle* obst) {
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	cf 93       	push	r28
	return 2 * obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * tan((obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] * (3.141516/180)) / 2); // sin((3.141516/180) * obst->object_array[obst->object_index][ANGULAR_WIDTH]) * obst->object_array[obst->object_index][DISTANCE_SONAR];
     922:	fc 01       	movw	r30, r24
     924:	ed 56       	subi	r30, 0x6D	; 109
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	20 81       	ld	r18, Z
     92a:	2f 70       	andi	r18, 0x0F	; 15
     92c:	dc 01       	movw	r26, r24
     92e:	37 e0       	ldi	r19, 0x07	; 7
     930:	23 9f       	mul	r18, r19
     932:	a0 0d       	add	r26, r0
     934:	b1 1d       	adc	r27, r1
     936:	11 24       	eor	r1, r1
     938:	9c 96       	adiw	r26, 0x2c	; 44
     93a:	cc 91       	ld	r28, X
     93c:	20 81       	ld	r18, Z
     93e:	2f 70       	andi	r18, 0x0F	; 15
     940:	fc 01       	movw	r30, r24
     942:	37 e0       	ldi	r19, 0x07	; 7
     944:	23 9f       	mul	r18, r19
     946:	e0 0d       	add	r30, r0
     948:	f1 1d       	adc	r31, r1
     94a:	11 24       	eor	r1, r1
     94c:	62 a5       	ldd	r22, Z+42	; 0x2a
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     958:	20 e5       	ldi	r18, 0x50	; 80
     95a:	39 ef       	ldi	r19, 0xF9	; 249
     95c:	4e e8       	ldi	r20, 0x8E	; 142
     95e:	5c e3       	ldi	r21, 0x3C	; 60
     960:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     970:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <tan>
     974:	6b 01       	movw	r12, r22
     976:	7c 01       	movw	r14, r24
     978:	8c 2f       	mov	r24, r28
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	bc 01       	movw	r22, r24
     982:	99 0f       	add	r25, r25
     984:	88 0b       	sbc	r24, r24
     986:	99 0b       	sbc	r25, r25
     988:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     98c:	a7 01       	movw	r20, r14
     98e:	96 01       	movw	r18, r12
     990:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     994:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixunssfsi>
     998:	86 2f       	mov	r24, r22
}
     99a:	cf 91       	pop	r28
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	08 95       	ret

000009a6 <update_information>:

void update_information(obstacle* obst, robot* bot, oi_t* self) {
     9a6:	2f 92       	push	r2
     9a8:	3f 92       	push	r3
     9aa:	4f 92       	push	r4
     9ac:	5f 92       	push	r5
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	e8 97       	sbiw	r28, 0x38	; 56
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	2c 01       	movw	r4, r24
     9dc:	3b 01       	movw	r6, r22
	bot->x = bot->x + bot->dist_traveled * cos(bot->angle * (3.141516/180)); // Update robot x coordinate
     9de:	fb 01       	movw	r30, r22
     9e0:	c4 84       	ldd	r12, Z+12	; 0x0c
     9e2:	d5 84       	ldd	r13, Z+13	; 0x0d
     9e4:	e6 84       	ldd	r14, Z+14	; 0x0e
     9e6:	f7 84       	ldd	r15, Z+15	; 0x0f
     9e8:	20 e5       	ldi	r18, 0x50	; 80
     9ea:	39 ef       	ldi	r19, 0xF9	; 249
     9ec:	4e e8       	ldi	r20, 0x8E	; 142
     9ee:	5c e3       	ldi	r21, 0x3C	; 60
     9f0:	60 85       	ldd	r22, Z+8	; 0x08
     9f2:	71 85       	ldd	r23, Z+9	; 0x09
     9f4:	82 85       	ldd	r24, Z+10	; 0x0a
     9f6:	93 85       	ldd	r25, Z+11	; 0x0b
     9f8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     9fc:	4b 01       	movw	r8, r22
     9fe:	5c 01       	movw	r10, r24
     a00:	e7 d7       	rcall	.+4046   	; 0x19d0 <cos>
     a02:	9b 01       	movw	r18, r22
     a04:	ac 01       	movw	r20, r24
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	f3 01       	movw	r30, r6
     a14:	60 81       	ld	r22, Z
     a16:	71 81       	ldd	r23, Z+1	; 0x01
     a18:	82 81       	ldd	r24, Z+2	; 0x02
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	49 d7       	rcall	.+3730   	; 0x18b0 <__addsf3>
     a1e:	f3 01       	movw	r30, r6
     a20:	60 83       	st	Z, r22
     a22:	71 83       	std	Z+1, r23	; 0x01
     a24:	82 83       	std	Z+2, r24	; 0x02
     a26:	93 83       	std	Z+3, r25	; 0x03
	bot->y = bot->y + bot->dist_traveled * sin(bot->angle * (3.141516/180)); // Update robot y coordinate
     a28:	c5 01       	movw	r24, r10
     a2a:	b4 01       	movw	r22, r8
     a2c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sin>
     a30:	9b 01       	movw	r18, r22
     a32:	ac 01       	movw	r20, r24
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	f3 01       	movw	r30, r6
     a42:	64 81       	ldd	r22, Z+4	; 0x04
     a44:	75 81       	ldd	r23, Z+5	; 0x05
     a46:	86 81       	ldd	r24, Z+6	; 0x06
     a48:	97 81       	ldd	r25, Z+7	; 0x07
     a4a:	32 d7       	rcall	.+3684   	; 0x18b0 <__addsf3>
     a4c:	f3 01       	movw	r30, r6
     a4e:	64 83       	std	Z+4, r22	; 0x04
     a50:	75 83       	std	Z+5, r23	; 0x05
     a52:	86 83       	std	Z+6, r24	; 0x06
     a54:	97 83       	std	Z+7, r25	; 0x07
	
	if (obst->all_object_index > 0) { // Are there objects to keep track of? If so, update the objects distance and angle in respect to the robot
     a56:	f2 01       	movw	r30, r4
     a58:	ed 56       	subi	r30, 0x6D	; 109
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	80 81       	ld	r24, Z
     a5e:	8f 70       	andi	r24, 0x0F	; 15
     a60:	09 f4       	brne	.+2      	; 0xa64 <update_information+0xbe>
     a62:	84 c0       	rjmp	.+264    	; 0xb6c <update_information+0x1c6>
		for (int i = 0; i < obst->all_object_index; i++) { // Loop through total detected objects
     a64:	80 81       	ld	r24, Z
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	09 f4       	brne	.+2      	; 0xa6c <update_information+0xc6>
     a6a:	80 c0       	rjmp	.+256    	; 0xb6c <update_information+0x1c6>
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	f8 af       	std	Y+56, r31	; 0x38
     a72:	ef ab       	std	Y+55, r30	; 0x37
			obst->all_objects_array[i][ALL_DISTANCE_SONAR] = sqrt( pow(bot->x - obst->all_objects_array[i][ALL_X], 2) + pow(bot->y - obst->all_objects_array[i][ALL_Y], 2) ); // Apply distance formula
     a74:	18 01       	movw	r2, r16
     a76:	22 0c       	add	r2, r2
     a78:	33 1c       	adc	r3, r3
     a7a:	22 0c       	add	r2, r2
     a7c:	33 1c       	adc	r3, r3
     a7e:	22 0c       	add	r2, r2
     a80:	33 1c       	adc	r3, r3
     a82:	20 1a       	sub	r2, r16
     a84:	31 0a       	sbc	r3, r17
     a86:	24 0c       	add	r2, r4
     a88:	35 1c       	adc	r3, r5
     a8a:	f1 01       	movw	r30, r2
     a8c:	67 a5       	ldd	r22, Z+47	; 0x2f
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	f3 01       	movw	r30, r6
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	03 d7       	rcall	.+3590   	; 0x18ae <__subsf3>
     aa8:	4b 01       	movw	r8, r22
     aaa:	5c 01       	movw	r10, r24
     aac:	f1 01       	movw	r30, r2
     aae:	60 a9       	ldd	r22, Z+48	; 0x30
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     aba:	9b 01       	movw	r18, r22
     abc:	ac 01       	movw	r20, r24
     abe:	f3 01       	movw	r30, r6
     ac0:	64 81       	ldd	r22, Z+4	; 0x04
     ac2:	75 81       	ldd	r23, Z+5	; 0x05
     ac4:	86 81       	ldd	r24, Z+6	; 0x06
     ac6:	97 81       	ldd	r25, Z+7	; 0x07
     ac8:	f2 d6       	rcall	.+3556   	; 0x18ae <__subsf3>
     aca:	6b 01       	movw	r12, r22
     acc:	7c 01       	movw	r14, r24
     ace:	a5 01       	movw	r20, r10
     ad0:	94 01       	movw	r18, r8
     ad2:	c5 01       	movw	r24, r10
     ad4:	b4 01       	movw	r22, r8
     ad6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     ada:	6b ab       	std	Y+51, r22	; 0x33
     adc:	7c ab       	std	Y+52, r23	; 0x34
     ade:	8d ab       	std	Y+53, r24	; 0x35
     ae0:	9e ab       	std	Y+54, r25	; 0x36
     ae2:	a5 01       	movw	r20, r10
     ae4:	94 01       	movw	r18, r8
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     aee:	4b 01       	movw	r8, r22
     af0:	5c 01       	movw	r10, r24
     af2:	a7 01       	movw	r20, r14
     af4:	96 01       	movw	r18, r12
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__mulsf3>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	d4 d6       	rcall	.+3496   	; 0x18b0 <__addsf3>
     b08:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <sqrt>
     b0c:	d1 d7       	rcall	.+4002   	; 0x1ab0 <__fixunssfsi>
     b0e:	f1 01       	movw	r30, r2
     b10:	64 a7       	std	Z+44, r22	; 0x2c
			obst->all_objects_array[i][ALL_POSITION] = atan( (obst->all_objects_array[i][ALL_Y] - bot->y) / (obst->all_objects_array[i][ALL_X] - bot->x) ); // Apply formula to find theta
     b12:	60 a9       	ldd	r22, Z+48	; 0x30
     b14:	b7 a4       	ldd	r11, Z+47	; 0x2f
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	f7 d7       	rcall	.+4078   	; 0x1b0c <__floatsisf>
     b1e:	f3 01       	movw	r30, r6
     b20:	24 81       	ldd	r18, Z+4	; 0x04
     b22:	35 81       	ldd	r19, Z+5	; 0x05
     b24:	46 81       	ldd	r20, Z+6	; 0x06
     b26:	57 81       	ldd	r21, Z+7	; 0x07
     b28:	c2 d6       	rcall	.+3460   	; 0x18ae <__subsf3>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	6b 2d       	mov	r22, r11
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	ea d7       	rcall	.+4052   	; 0x1b0c <__floatsisf>
     b38:	f3 01       	movw	r30, r6
     b3a:	20 81       	ld	r18, Z
     b3c:	31 81       	ldd	r19, Z+1	; 0x01
     b3e:	42 81       	ldd	r20, Z+2	; 0x02
     b40:	53 81       	ldd	r21, Z+3	; 0x03
     b42:	b5 d6       	rcall	.+3434   	; 0x18ae <__subsf3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	44 d7       	rcall	.+3720   	; 0x19d6 <__divsf3>
     b4e:	14 d7       	rcall	.+3624   	; 0x1978 <atan>
     b50:	af d7       	rcall	.+3934   	; 0x1ab0 <__fixunssfsi>
     b52:	f1 01       	movw	r30, r2
     b54:	66 a7       	std	Z+46, r22	; 0x2e
void update_information(obstacle* obst, robot* bot, oi_t* self) {
	bot->x = bot->x + bot->dist_traveled * cos(bot->angle * (3.141516/180)); // Update robot x coordinate
	bot->y = bot->y + bot->dist_traveled * sin(bot->angle * (3.141516/180)); // Update robot y coordinate
	
	if (obst->all_object_index > 0) { // Are there objects to keep track of? If so, update the objects distance and angle in respect to the robot
		for (int i = 0; i < obst->all_object_index; i++) { // Loop through total detected objects
     b56:	0f 5f       	subi	r16, 0xFF	; 255
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	ef a9       	ldd	r30, Y+55	; 0x37
     b5c:	f8 ad       	ldd	r31, Y+56	; 0x38
     b5e:	80 81       	ld	r24, Z
     b60:	8f 70       	andi	r24, 0x0F	; 15
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	08 17       	cp	r16, r24
     b66:	19 07       	cpc	r17, r25
     b68:	0c f4       	brge	.+2      	; 0xb6c <update_information+0x1c6>
     b6a:	84 cf       	rjmp	.-248    	; 0xa74 <update_information+0xce>
			obst->all_objects_array[i][ALL_POSITION] = atan( (obst->all_objects_array[i][ALL_Y] - bot->y) / (obst->all_objects_array[i][ALL_X] - bot->x) ); // Apply formula to find theta
		}
	}
	
	char buffer[50];
	sprintf(buffer, "\r\nBot X: %.3lf\r\nBot Y: %.3lf\r\nBot Angle: %.3lf\r\n", bot->x, bot->y, bot->angle);
     b6c:	f3 01       	movw	r30, r6
     b6e:	83 85       	ldd	r24, Z+11	; 0x0b
     b70:	8f 93       	push	r24
     b72:	82 85       	ldd	r24, Z+10	; 0x0a
     b74:	8f 93       	push	r24
     b76:	81 85       	ldd	r24, Z+9	; 0x09
     b78:	8f 93       	push	r24
     b7a:	80 85       	ldd	r24, Z+8	; 0x08
     b7c:	8f 93       	push	r24
     b7e:	87 81       	ldd	r24, Z+7	; 0x07
     b80:	8f 93       	push	r24
     b82:	86 81       	ldd	r24, Z+6	; 0x06
     b84:	8f 93       	push	r24
     b86:	85 81       	ldd	r24, Z+5	; 0x05
     b88:	8f 93       	push	r24
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	8f 93       	push	r24
     b8e:	83 81       	ldd	r24, Z+3	; 0x03
     b90:	8f 93       	push	r24
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	8f 93       	push	r24
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	8f 93       	push	r24
     b9a:	80 81       	ld	r24, Z
     b9c:	8f 93       	push	r24
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	8e 01       	movw	r16, r28
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	1f 93       	push	r17
     bae:	0f 93       	push	r16
     bb0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <sprintf>
	
	send_message(buffer);
     bb4:	c8 01       	movw	r24, r16
     bb6:	6d d6       	rcall	.+3290   	; 0x1892 <send_message>
	// Do not reset the angle. Bot needs to know where it was last angled to be accurate.
	bot->dist_traveled = 0; // Reset for next run
     bb8:	f3 01       	movw	r30, r6
     bba:	14 86       	std	Z+12, r1	; 0x0c
     bbc:	15 86       	std	Z+13, r1	; 0x0d
     bbe:	16 86       	std	Z+14, r1	; 0x0e
     bc0:	17 86       	std	Z+15, r1	; 0x0f
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
}
     bcc:	e8 96       	adiw	r28, 0x38	; 56
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	3f 90       	pop	r3
     bfa:	2f 90       	pop	r2
     bfc:	08 95       	ret

00000bfe <reset>:

/*char getY(obstacle* obst, robot* bot){
	return (char) obst->cur_dist_IR * sin(toRad((obst->start_angle_IR + obst->end_angle_IR)/2));
}*/

void reset(obstacle* obst, robot* bot) {
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
     c08:	8b 01       	movw	r16, r22
	obst->degrees = 0.0;
     c0a:	18 82       	st	Y, r1
     c0c:	19 82       	std	Y+1, r1	; 0x01
     c0e:	1a 82       	std	Y+2, r1	; 0x02
     c10:	1b 82       	std	Y+3, r1	; 0x03
	move_servo(&obst->degrees);
     c12:	d2 d5       	rcall	.+2980   	; 0x17b8 <move_servo>
	initializations(obst, bot); // reinitialize
     c14:	b8 01       	movw	r22, r16
     c16:	ce 01       	movw	r24, r28
     c18:	0c de       	rcall	.-1000   	; 0x832 <initializations>
	for (int i = 0; i < 15; i++) { // reset object arrays
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
		for (int j = 0; j < 7; j++) {
			if (j < 5) {
				obst->all_objects_array[i][j] = 0;
     c1e:	f9 01       	movw	r30, r18
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e2 1b       	sub	r30, r18
     c2e:	f3 0b       	sbc	r31, r19
     c30:	ec 0f       	add	r30, r28
     c32:	fd 1f       	adc	r31, r29
     c34:	12 a6       	std	Z+42, r1	; 0x2a
     c36:	13 a6       	std	Z+43, r1	; 0x2b
     c38:	14 a6       	std	Z+44, r1	; 0x2c
     c3a:	15 a6       	std	Z+45, r1	; 0x2d
     c3c:	16 a6       	std	Z+46, r1	; 0x2e

void reset(obstacle* obst, robot* bot) {
	obst->degrees = 0.0;
	move_servo(&obst->degrees);
	initializations(obst, bot); // reinitialize
	for (int i = 0; i < 15; i++) { // reset object arrays
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	2f 30       	cpi	r18, 0x0F	; 15
     c44:	31 05       	cpc	r19, r1
     c46:	59 f7       	brne	.-42     	; 0xc1e <reset+0x20>
			if (j < 5) {
				obst->all_objects_array[i][j] = 0;
			}
		}
	}
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <find_objs_IR>:

void find_objs_IR(obstacle* obst, robot* bot) {
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	8b 01       	movw	r16, r22
	if (obst->cur_dist_IR <= MAX_DETECTION_DISTANCE) { // Current IR measured distance is within detection range?
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	81 35       	cpi	r24, 0x51	; 81
     c76:	91 05       	cpc	r25, r1
     c78:	2c f5       	brge	.+74     	; 0xcc4 <find_objs_IR+0x72>
		if (obst->object_detected == 0) { // If yes, are we looking for a new object?
     c7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c7c:	80 fd       	sbrc	r24, 0
     c7e:	13 c0       	rjmp	.+38     	; 0xca6 <find_objs_IR+0x54>
			obst->object_detected = 1; // We've detected something
     c80:	8c 85       	ldd	r24, Y+12	; 0x0c
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	8c 87       	std	Y+12, r24	; 0x0c
			obst->start_angle_IR = obst->degrees; // Log start angle
     c86:	68 81       	ld	r22, Y
     c88:	79 81       	ldd	r23, Y+1	; 0x01
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	9b 81       	ldd	r25, Y+3	; 0x03
     c8e:	10 d7       	rcall	.+3616   	; 0x1ab0 <__fixunssfsi>
     c90:	6a 87       	std	Y+10, r22	; 0x0a
			obst->start_dist_SONAR = obst->cur_dist_SONAR; // Log distance measured by sonar as start distance (IR is less consistent, but computed averages anyway as backup)
     c92:	6d 85       	ldd	r22, Y+13	; 0x0d
     c94:	7e 85       	ldd	r23, Y+14	; 0x0e
     c96:	8f 85       	ldd	r24, Y+15	; 0x0f
     c98:	98 89       	ldd	r25, Y+16	; 0x10
     c9a:	0a d7       	rcall	.+3604   	; 0x1ab0 <__fixunssfsi>
     c9c:	6d 8b       	std	Y+21, r22	; 0x15
			obst->validation_level++; // Begin object validation sequence
     c9e:	89 a5       	ldd	r24, Y+41	; 0x29
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	89 a7       	std	Y+41, r24	; 0x29
     ca4:	1a c1       	rjmp	.+564    	; 0xeda <find_objs_IR+0x288>
		} else if (obst->object_detected == 1) { // Continue object validation sequence if still in detection range
     ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca8:	80 ff       	sbrs	r24, 0
     caa:	17 c1       	rjmp	.+558    	; 0xeda <find_objs_IR+0x288>
			obst->validation_level++;
     cac:	89 a5       	ldd	r24, Y+41	; 0x29
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	89 a7       	std	Y+41, r24	; 0x29
			obst->total_dist_IR += obst->cur_dist_IR; // Find total distance measured by IR
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	28 85       	ldd	r18, Y+8	; 0x08
     cb8:	39 85       	ldd	r19, Y+9	; 0x09
     cba:	82 0f       	add	r24, r18
     cbc:	93 1f       	adc	r25, r19
     cbe:	99 87       	std	Y+9, r25	; 0x09
     cc0:	88 87       	std	Y+8, r24	; 0x08
     cc2:	0b c1       	rjmp	.+534    	; 0xeda <find_objs_IR+0x288>
		}
		} else {
		if ((obst->object_detected == 1 && obst->validation_level >= SMALL_OBJECT_SIZE_MIN)) { // We've finished seeing the object. Is the object valid (at least as big as smallest object size)?
     cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	fd c0       	rjmp	.+506    	; 0xec4 <find_objs_IR+0x272>
     cca:	89 a5       	ldd	r24, Y+41	; 0x29
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <find_objs_IR+0x80>
     cd0:	f9 c0       	rjmp	.+498    	; 0xec4 <find_objs_IR+0x272>
			obst->end_angle_IR = obst->degrees - 1; // Log the last measured angle
     cd2:	68 81       	ld	r22, Y
     cd4:	79 81       	ldd	r23, Y+1	; 0x01
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	e5 d5       	rcall	.+3018   	; 0x18ae <__subsf3>
     ce4:	e5 d6       	rcall	.+3530   	; 0x1ab0 <__fixunssfsi>
     ce6:	6b 87       	std	Y+11, r22	; 0x0b
			obst->end_dist_SONAR = obst->last_dist_SONAR; // Log the last distance measured by the sonar as end distance (same reason as before)
     ce8:	69 89       	ldd	r22, Y+17	; 0x11
     cea:	7a 89       	ldd	r23, Y+18	; 0x12
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	df d6       	rcall	.+3518   	; 0x1ab0 <__fixunssfsi>
     cf2:	6e 8b       	std	Y+22, r22	; 0x16
			obst->object_detected = 0; // Reset detection variable
     cf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	8c 87       	std	Y+12, r24	; 0x0c
			obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] = obst->end_angle_IR - obst->start_angle_IR; // Log calculated object angular size
     cfa:	fe 01       	movw	r30, r28
     cfc:	ed 56       	subi	r30, 0x6D	; 109
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	90 81       	ld	r25, Z
     d02:	9f 70       	andi	r25, 0x0F	; 15
     d04:	8b 85       	ldd	r24, Y+11	; 0x0b
     d06:	2a 85       	ldd	r18, Y+10	; 0x0a
     d08:	82 1b       	sub	r24, r18
     d0a:	de 01       	movw	r26, r28
     d0c:	27 e0       	ldi	r18, 0x07	; 7
     d0e:	92 9f       	mul	r25, r18
     d10:	a0 0d       	add	r26, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	11 24       	eor	r1, r1
     d16:	9a 96       	adiw	r26, 0x2a	; 42
     d18:	8c 93       	st	X, r24
			obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] = (obst->start_dist_SONAR + obst->end_dist_SONAR) / 2; // Log calculated object distance
     d1a:	20 81       	ld	r18, Z
     d1c:	2f 70       	andi	r18, 0x0F	; 15
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	4d 89       	ldd	r20, Y+21	; 0x15
     d22:	8e 89       	ldd	r24, Y+22	; 0x16
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	84 0f       	add	r24, r20
     d28:	91 1d       	adc	r25, r1
     d2a:	95 95       	asr	r25
     d2c:	87 95       	ror	r24
     d2e:	f9 01       	movw	r30, r18
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e2 1b       	sub	r30, r18
     d3e:	f3 0b       	sbc	r31, r19
     d40:	ec 0f       	add	r30, r28
     d42:	fd 1f       	adc	r31, r29
     d44:	84 a7       	std	Z+44, r24	; 0x2c
			obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_IR] = obst->total_dist_IR / (obst->validation_level - 1); // IR Distance = Average = Sum/N (total distance/number of distance measurements), where validation level serves as N - 1 (to account for extra sample at line 113)
     d46:	7e 01       	movw	r14, r28
     d48:	33 e9       	ldi	r19, 0x93	; 147
     d4a:	e3 0e       	add	r14, r19
     d4c:	f1 1c       	adc	r15, r1
     d4e:	f7 01       	movw	r30, r14
     d50:	20 81       	ld	r18, Z
     d52:	2f 70       	andi	r18, 0x0F	; 15
     d54:	88 85       	ldd	r24, Y+8	; 0x08
     d56:	99 85       	ldd	r25, Y+9	; 0x09
     d58:	69 a5       	ldd	r22, Y+41	; 0x29
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	61 50       	subi	r22, 0x01	; 1
     d5e:	71 09       	sbc	r23, r1
     d60:	0e 94 94 14 	call	0x2928	; 0x2928 <__divmodhi4>
     d64:	fe 01       	movw	r30, r28
     d66:	37 e0       	ldi	r19, 0x07	; 7
     d68:	23 9f       	mul	r18, r19
     d6a:	e0 0d       	add	r30, r0
     d6c:	f1 1d       	adc	r31, r1
     d6e:	11 24       	eor	r1, r1
     d70:	65 a7       	std	Z+45, r22	; 0x2d
			obst->all_objects_array[obst->all_object_index][ALL_LINEAR_WIDTH] = get_linear_width(obst); // Log calculated linear width
     d72:	f7 01       	movw	r30, r14
     d74:	80 81       	ld	r24, Z
     d76:	8f 70       	andi	r24, 0x0F	; 15
     d78:	c8 2e       	mov	r12, r24
     d7a:	d1 2c       	mov	r13, r1
     d7c:	ce 01       	movw	r24, r28
     d7e:	cc dd       	rcall	.-1128   	; 0x918 <get_linear_width>
     d80:	f6 01       	movw	r30, r12
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ec 19       	sub	r30, r12
     d90:	fd 09       	sbc	r31, r13
     d92:	ec 0f       	add	r30, r28
     d94:	fd 1f       	adc	r31, r29
     d96:	83 a7       	std	Z+43, r24	; 0x2b
			obst->all_objects_array[obst->all_object_index][ALL_POSITION] = (obst->start_angle_IR + (obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] / 2)); // Log calculated object angular position
     d98:	f7 01       	movw	r30, r14
     d9a:	20 81       	ld	r18, Z
     d9c:	2f 70       	andi	r18, 0x0F	; 15
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	80 81       	ld	r24, Z
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	fe 01       	movw	r30, r28
     da6:	37 e0       	ldi	r19, 0x07	; 7
     da8:	83 9f       	mul	r24, r19
     daa:	e0 0d       	add	r30, r0
     dac:	f1 1d       	adc	r31, r1
     dae:	11 24       	eor	r1, r1
     db0:	82 a5       	ldd	r24, Z+42	; 0x2a
     db2:	86 95       	lsr	r24
     db4:	89 0f       	add	r24, r25
     db6:	fe 01       	movw	r30, r28
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	29 9f       	mul	r18, r25
     dbc:	e0 0d       	add	r30, r0
     dbe:	f1 1d       	adc	r31, r1
     dc0:	11 24       	eor	r1, r1
     dc2:	86 a7       	std	Z+46, r24	; 0x2e
			obst->all_objects_array[obst->all_object_index][ALL_X] = bot->x + obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * cos(obst->all_objects_array[obst->all_object_index][ALL_POSITION]); // Assign X coordinate of object in respect to the bot
     dc4:	f7 01       	movw	r30, r14
     dc6:	80 81       	ld	r24, Z
     dc8:	8f 70       	andi	r24, 0x0F	; 15
     dca:	c8 2e       	mov	r12, r24
     dcc:	d1 2c       	mov	r13, r1
     dce:	80 81       	ld	r24, Z
     dd0:	8f 70       	andi	r24, 0x0F	; 15
     dd2:	fe 01       	movw	r30, r28
     dd4:	27 e0       	ldi	r18, 0x07	; 7
     dd6:	82 9f       	mul	r24, r18
     dd8:	e0 0d       	add	r30, r0
     dda:	f1 1d       	adc	r31, r1
     ddc:	11 24       	eor	r1, r1
     dde:	74 a4       	ldd	r7, Z+44	; 0x2c
     de0:	f7 01       	movw	r30, r14
     de2:	80 81       	ld	r24, Z
     de4:	8f 70       	andi	r24, 0x0F	; 15
     de6:	fe 01       	movw	r30, r28
     de8:	27 e0       	ldi	r18, 0x07	; 7
     dea:	82 9f       	mul	r24, r18
     dec:	e0 0d       	add	r30, r0
     dee:	f1 1d       	adc	r31, r1
     df0:	11 24       	eor	r1, r1
     df2:	66 a5       	ldd	r22, Z+46	; 0x2e
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	86 d6       	rcall	.+3340   	; 0x1b08 <__floatunsisf>
     dfc:	e9 d5       	rcall	.+3026   	; 0x19d0 <cos>
     dfe:	4b 01       	movw	r8, r22
     e00:	5c 01       	movw	r10, r24
     e02:	67 2d       	mov	r22, r7
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	80 d6       	rcall	.+3328   	; 0x1b0c <__floatsisf>
     e0c:	a5 01       	movw	r20, r10
     e0e:	94 01       	movw	r18, r8
     e10:	f2 d7       	rcall	.+4068   	; 0x1df6 <__mulsf3>
     e12:	f8 01       	movw	r30, r16
     e14:	20 81       	ld	r18, Z
     e16:	31 81       	ldd	r19, Z+1	; 0x01
     e18:	42 81       	ldd	r20, Z+2	; 0x02
     e1a:	53 81       	ldd	r21, Z+3	; 0x03
     e1c:	49 d5       	rcall	.+2706   	; 0x18b0 <__addsf3>
     e1e:	48 d6       	rcall	.+3216   	; 0x1ab0 <__fixunssfsi>
     e20:	f6 01       	movw	r30, r12
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	ec 19       	sub	r30, r12
     e30:	fd 09       	sbc	r31, r13
     e32:	ec 0f       	add	r30, r28
     e34:	fd 1f       	adc	r31, r29
     e36:	67 a7       	std	Z+47, r22	; 0x2f
			obst->all_objects_array[obst->all_object_index][ALL_Y] = bot->y + obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * sin(obst->all_objects_array[obst->all_object_index][ALL_POSITION]); // Assign Y coordinate of object in respect to the bot
     e38:	f7 01       	movw	r30, r14
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 70       	andi	r24, 0x0F	; 15
     e3e:	c8 2e       	mov	r12, r24
     e40:	d1 2c       	mov	r13, r1
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	fe 01       	movw	r30, r28
     e48:	27 e0       	ldi	r18, 0x07	; 7
     e4a:	82 9f       	mul	r24, r18
     e4c:	e0 0d       	add	r30, r0
     e4e:	f1 1d       	adc	r31, r1
     e50:	11 24       	eor	r1, r1
     e52:	74 a4       	ldd	r7, Z+44	; 0x2c
     e54:	f7 01       	movw	r30, r14
     e56:	80 81       	ld	r24, Z
     e58:	8f 70       	andi	r24, 0x0F	; 15
     e5a:	fe 01       	movw	r30, r28
     e5c:	27 e0       	ldi	r18, 0x07	; 7
     e5e:	82 9f       	mul	r24, r18
     e60:	e0 0d       	add	r30, r0
     e62:	f1 1d       	adc	r31, r1
     e64:	11 24       	eor	r1, r1
     e66:	66 a5       	ldd	r22, Z+46	; 0x2e
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	4c d6       	rcall	.+3224   	; 0x1b08 <__floatunsisf>
     e70:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sin>
     e74:	4b 01       	movw	r8, r22
     e76:	5c 01       	movw	r10, r24
     e78:	67 2d       	mov	r22, r7
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	45 d6       	rcall	.+3210   	; 0x1b0c <__floatsisf>
     e82:	a5 01       	movw	r20, r10
     e84:	94 01       	movw	r18, r8
     e86:	b7 d7       	rcall	.+3950   	; 0x1df6 <__mulsf3>
     e88:	f8 01       	movw	r30, r16
     e8a:	24 81       	ldd	r18, Z+4	; 0x04
     e8c:	35 81       	ldd	r19, Z+5	; 0x05
     e8e:	46 81       	ldd	r20, Z+6	; 0x06
     e90:	57 81       	ldd	r21, Z+7	; 0x07
     e92:	0e d5       	rcall	.+2588   	; 0x18b0 <__addsf3>
     e94:	0d d6       	rcall	.+3098   	; 0x1ab0 <__fixunssfsi>
     e96:	f6 01       	movw	r30, r12
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	ec 19       	sub	r30, r12
     ea6:	fd 09       	sbc	r31, r13
     ea8:	ec 0f       	add	r30, r28
     eaa:	fd 1f       	adc	r31, r29
     eac:	60 ab       	std	Z+48, r22	; 0x30
			obst->all_object_index++; // Move to next index
     eae:	f7 01       	movw	r30, r14
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	98 2f       	mov	r25, r24
     eb6:	9f 70       	andi	r25, 0x0F	; 15
     eb8:	80 81       	ld	r24, Z
     eba:	80 7f       	andi	r24, 0xF0	; 240
     ebc:	89 2b       	or	r24, r25
     ebe:	80 83       	st	Z, r24
			obst->validation_level = 0; // Reset validation level
     ec0:	19 a6       	std	Y+41, r1	; 0x29
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <find_objs_IR+0x288>
		}
		else if (obst->object_detected == 1) { // Object is an anomaly. Reset last logged variables.
     ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec6:	80 ff       	sbrs	r24, 0
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <find_objs_IR+0x288>
			obst->validation_level = 0;
     eca:	19 a6       	std	Y+41, r1	; 0x29
			obst->start_angle_IR = 0;
     ecc:	1a 86       	std	Y+10, r1	; 0x0a
			obst->start_dist_SONAR = 0;
     ece:	1d 8a       	std	Y+21, r1	; 0x15
			obst->object_detected = 0;
     ed0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	8c 87       	std	Y+12, r24	; 0x0c
			obst->total_dist_IR = 0;
     ed6:	19 86       	std	Y+9, r1	; 0x09
     ed8:	18 86       	std	Y+8, r1	; 0x08
		}
	}
	obst->last_dist_IR = obst->cur_dist_IR; // Remember the last measured IR distance
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	9f 83       	std	Y+7, r25	; 0x07
     ee0:	8e 83       	std	Y+6, r24	; 0x06
	obst->last_dist_SONAR = obst->cur_dist_SONAR; // Remember last measured SONAR distance
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	af 85       	ldd	r26, Y+15	; 0x0f
     ee8:	b8 89       	ldd	r27, Y+16	; 0x10
     eea:	89 8b       	std	Y+17, r24	; 0x11
     eec:	9a 8b       	std	Y+18, r25	; 0x12
     eee:	ab 8b       	std	Y+19, r26	; 0x13
     ef0:	bc 8b       	std	Y+20, r27	; 0x14
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	08 95       	ret

00000f0e <find_smallest_obj>:
		} else if (obst->obst_array[i][OBST_POSITION] > 150 && obst->obst_array[i][OBST_POSITION] <= 180) {
			obst->obst_array[i][WEST] = 1;
		}
	}
}*/
void find_smallest_obj(obstacle* obst) {
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
	for (int i = 0; i < obst->all_object_index; i++)
     f1c:	fc 01       	movw	r30, r24
     f1e:	ed 56       	subi	r30, 0x6D	; 109
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	90 81       	ld	r25, Z
     f24:	9f 70       	andi	r25, 0x0F	; 15
     f26:	09 f4       	brne	.+2      	; 0xf2a <find_smallest_obj+0x1c>
     f28:	50 c0       	rjmp	.+160    	; 0xfca <find_smallest_obj+0xbc>
     f2a:	00 e0       	ldi	r16, 0x00	; 0
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	7f 01       	movw	r14, r30
	if (obst->all_objects_array[i][ALL_LINEAR_WIDTH] < obst->smallest_obj_angular_size) {
     f30:	f8 01       	movw	r30, r16
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e0 1b       	sub	r30, r16
     f40:	f1 0b       	sbc	r31, r17
     f42:	ec 0f       	add	r30, r28
     f44:	fd 1f       	adc	r31, r29
     f46:	23 a5       	ldd	r18, Z+43	; 0x2b
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	8f 73       	andi	r24, 0x3F	; 63
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	84 f5       	brge	.+96     	; 0xfb6 <find_smallest_obj+0xa8>
		obst->smallest_obj_angular_size = obst->all_objects_array[i][ALL_ANGULAR_WIDTH];
     f56:	f8 01       	movw	r30, r16
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	e0 1b       	sub	r30, r16
     f66:	f1 0b       	sbc	r31, r17
     f68:	ec 0f       	add	r30, r28
     f6a:	fd 1f       	adc	r31, r29
     f6c:	82 a5       	ldd	r24, Z+42	; 0x2a
     f6e:	98 2f       	mov	r25, r24
     f70:	9f 73       	andi	r25, 0x3F	; 63
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	80 7c       	andi	r24, 0xC0	; 192
     f76:	89 2b       	or	r24, r25
     f78:	8f 8b       	std	Y+23, r24	; 0x17
		obst->smallest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
     f7a:	83 a5       	ldd	r24, Z+43	; 0x2b
     f7c:	98 2f       	mov	r25, r24
     f7e:	9f 71       	andi	r25, 0x1F	; 31
     f80:	82 95       	swap	r24
     f82:	88 0f       	add	r24, r24
     f84:	88 0f       	add	r24, r24
     f86:	80 7c       	andi	r24, 0xC0	; 192
     f88:	2f 89       	ldd	r18, Y+23	; 0x17
     f8a:	2f 73       	andi	r18, 0x3F	; 63
     f8c:	82 2b       	or	r24, r18
     f8e:	8f 8b       	std	Y+23, r24	; 0x17
     f90:	96 95       	lsr	r25
     f92:	96 95       	lsr	r25
     f94:	88 8d       	ldd	r24, Y+24	; 0x18
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	89 2b       	or	r24, r25
     f9a:	88 8f       	std	Y+24, r24	; 0x18
		obst->smallest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
     f9c:	84 a5       	ldd	r24, Z+44	; 0x2c
     f9e:	89 8f       	std	Y+25, r24	; 0x19
		obst->smallest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
     fa0:	85 a5       	ldd	r24, Z+45	; 0x2d
     fa2:	8a 8f       	std	Y+26, r24	; 0x1a
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
     fa4:	66 a5       	ldd	r22, Z+46	; 0x2e
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	ad d5       	rcall	.+2906   	; 0x1b08 <__floatunsisf>
     fae:	6b 8f       	std	Y+27, r22	; 0x1b
     fb0:	7c 8f       	std	Y+28, r23	; 0x1c
     fb2:	8d 8f       	std	Y+29, r24	; 0x1d
     fb4:	9e 8f       	std	Y+30, r25	; 0x1e
			obst->obst_array[i][WEST] = 1;
		}
	}
}*/
void find_smallest_obj(obstacle* obst) {
	for (int i = 0; i < obst->all_object_index; i++)
     fb6:	0f 5f       	subi	r16, 0xFF	; 255
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	f7 01       	movw	r30, r14
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 70       	andi	r24, 0x0F	; 15
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	08 17       	cp	r16, r24
     fc4:	19 07       	cpc	r17, r25
     fc6:	0c f4       	brge	.+2      	; 0xfca <find_smallest_obj+0xbc>
     fc8:	b3 cf       	rjmp	.-154    	; 0xf30 <find_smallest_obj+0x22>
		obst->smallest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
		obst->smallest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
		obst->smallest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <find_closest_obj>:

void find_closest_obj(obstacle* obst) {
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
	for (int i = 0; i < obst->all_object_index; i++)
     fe6:	fc 01       	movw	r30, r24
     fe8:	ed 56       	subi	r30, 0x6D	; 109
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	90 81       	ld	r25, Z
     fee:	9f 70       	andi	r25, 0x0F	; 15
     ff0:	09 f4       	brne	.+2      	; 0xff4 <find_closest_obj+0x1c>
     ff2:	65 c0       	rjmp	.+202    	; 0x10be <find_closest_obj+0xe6>
     ff4:	00 e0       	ldi	r16, 0x00	; 0
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	7f 01       	movw	r14, r30
	if (obst->all_objects_array[i][ALL_DISTANCE_SONAR] < obst->closest_obj_dist_SONAR || obst->all_objects_array[i][ALL_DISTANCE_IR] < obst->closest_obj_dist_IR) {
     ffa:	f8 01       	movw	r30, r16
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	e0 1b       	sub	r30, r16
    100a:	f1 0b       	sbc	r31, r17
    100c:	ec 0f       	add	r30, r28
    100e:	fd 1f       	adc	r31, r29
    1010:	84 a5       	ldd	r24, Z+44	; 0x2c
    1012:	29 a1       	ldd	r18, Y+33	; 0x21
    1014:	3a a1       	ldd	r19, Y+34	; 0x22
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	82 17       	cp	r24, r18
    101a:	93 07       	cpc	r25, r19
    101c:	94 f0       	brlt	.+36     	; 0x1042 <find_closest_obj+0x6a>
    101e:	f8 01       	movw	r30, r16
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	e0 1b       	sub	r30, r16
    102e:	f1 0b       	sbc	r31, r17
    1030:	ec 0f       	add	r30, r28
    1032:	fd 1f       	adc	r31, r29
    1034:	85 a5       	ldd	r24, Z+45	; 0x2d
    1036:	2b a1       	ldd	r18, Y+35	; 0x23
    1038:	3c a1       	ldd	r19, Y+36	; 0x24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	82 17       	cp	r24, r18
    103e:	93 07       	cpc	r25, r19
    1040:	a4 f5       	brge	.+104    	; 0x10aa <find_closest_obj+0xd2>
		obst->closest_obj_angular_size = obst->all_objects_array[i][ALL_ANGULAR_WIDTH];
    1042:	f8 01       	movw	r30, r16
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e0 1b       	sub	r30, r16
    1052:	f1 0b       	sbc	r31, r17
    1054:	ec 0f       	add	r30, r28
    1056:	fd 1f       	adc	r31, r29
    1058:	82 a5       	ldd	r24, Z+42	; 0x2a
    105a:	98 2f       	mov	r25, r24
    105c:	9f 73       	andi	r25, 0x3F	; 63
    105e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1060:	80 7c       	andi	r24, 0xC0	; 192
    1062:	89 2b       	or	r24, r25
    1064:	8f 8f       	std	Y+31, r24	; 0x1f
		obst->closest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
    1066:	83 a5       	ldd	r24, Z+43	; 0x2b
    1068:	98 2f       	mov	r25, r24
    106a:	9f 71       	andi	r25, 0x1F	; 31
    106c:	82 95       	swap	r24
    106e:	88 0f       	add	r24, r24
    1070:	88 0f       	add	r24, r24
    1072:	80 7c       	andi	r24, 0xC0	; 192
    1074:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1076:	2f 73       	andi	r18, 0x3F	; 63
    1078:	82 2b       	or	r24, r18
    107a:	8f 8f       	std	Y+31, r24	; 0x1f
    107c:	96 95       	lsr	r25
    107e:	96 95       	lsr	r25
    1080:	88 a1       	ldd	r24, Y+32	; 0x20
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 2b       	or	r24, r25
    1086:	88 a3       	std	Y+32, r24	; 0x20
		obst->closest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
    1088:	84 a5       	ldd	r24, Z+44	; 0x2c
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9a a3       	std	Y+34, r25	; 0x22
    108e:	89 a3       	std	Y+33, r24	; 0x21
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
    1090:	85 a5       	ldd	r24, Z+45	; 0x2d
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c a3       	std	Y+36, r25	; 0x24
    1096:	8b a3       	std	Y+35, r24	; 0x23
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
    1098:	66 a5       	ldd	r22, Z+46	; 0x2e
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	33 d5       	rcall	.+2662   	; 0x1b08 <__floatunsisf>
    10a2:	6d a3       	std	Y+37, r22	; 0x25
    10a4:	7e a3       	std	Y+38, r23	; 0x26
    10a6:	8f a3       	std	Y+39, r24	; 0x27
    10a8:	98 a7       	std	Y+40, r25	; 0x28
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}

void find_closest_obj(obstacle* obst) {
	for (int i = 0; i < obst->all_object_index; i++)
    10aa:	0f 5f       	subi	r16, 0xFF	; 255
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	f7 01       	movw	r30, r14
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 70       	andi	r24, 0x0F	; 15
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	08 17       	cp	r16, r24
    10b8:	19 07       	cpc	r17, r25
    10ba:	0c f4       	brge	.+2      	; 0x10be <find_closest_obj+0xe6>
    10bc:	9e cf       	rjmp	.-196    	; 0xffa <find_closest_obj+0x22>
		obst->closest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
		obst->closest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	08 95       	ret

000010cc <sweep>:
	obst->obst_index = 0; // Amount of goal posts found. There are 4 posts total so 3 bits will suffice.*/
	
	// Note: Object array does not need to be initialized
}

void sweep(obstacle* obst, robot* bot) {
    10cc:	8f 92       	push	r8
    10ce:	9f 92       	push	r9
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	e5 97       	sbiw	r28, 0x35	; 53
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	8c 01       	movw	r16, r24
    10f6:	4b 01       	movw	r8, r22
	/* Clear PuTTY view and initialize columns */
	send_message("\f");
    10f8:	87 e3       	ldi	r24, 0x37	; 55
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	ca d3       	rcall	.+1940   	; 0x1892 <send_message>
	send_message("Degrees       IR Distance (cm)    Sonar Distance (cm)\r\n");
    10fe:	89 e3       	ldi	r24, 0x39	; 57
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	c7 d3       	rcall	.+1934   	; 0x1892 <send_message>
    1104:	e1 2c       	mov	r14, r1
    1106:	f1 2c       	mov	r15, r1
		send_pulse();                                // Ping the SONAR sensor
		obst->cur_dist_IR = read_IR_distance();      // Get current IR distance measurement
		obst->cur_dist_SONAR = read_PING_distance(); // Get current SONAR distance measurement
		
		/* Prepare buffer for transmission */
		sprintf(buffer, "%-3d             %-4d                 %-3.4f\r\n", i, obst->cur_dist_IR, obst->cur_dist_SONAR);
    1108:	0f 2e       	mov	r0, r31
    110a:	f1 e7       	ldi	r31, 0x71	; 113
    110c:	af 2e       	mov	r10, r31
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	bf 2e       	mov	r11, r31
    1112:	f0 2d       	mov	r31, r0
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	6c 01       	movw	r12, r24
	/* Data to be Sent to Putty */
	char buffer[53];
	
	/* Perform 180 degree scan. Collect distance measurements every 1 degree. */
	for (char i = 0; i <= 180; i++) {
		send_pulse();                                // Ping the SONAR sensor
    111a:	cf d2       	rcall	.+1438   	; 0x16ba <send_pulse>
		obst->cur_dist_IR = read_IR_distance();      // Get current IR distance measurement
    111c:	a0 d2       	rcall	.+1344   	; 0x165e <read_IR_distance>
    111e:	f8 01       	movw	r30, r16
    1120:	95 83       	std	Z+5, r25	; 0x05
    1122:	84 83       	std	Z+4, r24	; 0x04
		obst->cur_dist_SONAR = read_PING_distance(); // Get current SONAR distance measurement
    1124:	20 d3       	rcall	.+1600   	; 0x1766 <read_PING_distance>
    1126:	f8 01       	movw	r30, r16
    1128:	65 87       	std	Z+13, r22	; 0x0d
    112a:	76 87       	std	Z+14, r23	; 0x0e
    112c:	87 87       	std	Z+15, r24	; 0x0f
    112e:	90 8b       	std	Z+16, r25	; 0x10
		
		/* Prepare buffer for transmission */
		sprintf(buffer, "%-3d             %-4d                 %-3.4f\r\n", i, obst->cur_dist_IR, obst->cur_dist_SONAR);
    1130:	85 85       	ldd	r24, Z+13	; 0x0d
    1132:	96 85       	ldd	r25, Z+14	; 0x0e
    1134:	a7 85       	ldd	r26, Z+15	; 0x0f
    1136:	b0 89       	ldd	r27, Z+16	; 0x10
    1138:	24 81       	ldd	r18, Z+4	; 0x04
    113a:	35 81       	ldd	r19, Z+5	; 0x05
    113c:	bf 93       	push	r27
    113e:	af 93       	push	r26
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	3f 93       	push	r19
    1146:	2f 93       	push	r18
    1148:	ff 92       	push	r15
    114a:	ef 92       	push	r14
    114c:	bf 92       	push	r11
    114e:	af 92       	push	r10
    1150:	df 92       	push	r13
    1152:	cf 92       	push	r12
    1154:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <sprintf>
		
		/* Send data to putty */
		send_message(buffer);
    1158:	c6 01       	movw	r24, r12
    115a:	9b d3       	rcall	.+1846   	; 0x1892 <send_message>
		
		/* Find Objects IR */
		find_objs_IR(obst, bot);
    115c:	b4 01       	movw	r22, r8
    115e:	c8 01       	movw	r24, r16
    1160:	78 dd       	rcall	.-1296   	; 0xc52 <find_objs_IR>
		
		obst->degrees++;            // Increment degree by 1
    1162:	f8 01       	movw	r30, r16
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	9d d3       	rcall	.+1850   	; 0x18b0 <__addsf3>
    1176:	f8 01       	movw	r30, r16
    1178:	60 83       	st	Z, r22
    117a:	71 83       	std	Z+1, r23	; 0x01
    117c:	82 83       	std	Z+2, r24	; 0x02
    117e:	93 83       	std	Z+3, r25	; 0x03
		move_servo(&obst->degrees); // Move servo into next position
    1180:	c8 01       	movw	r24, r16
    1182:	1a d3       	rcall	.+1588   	; 0x17b8 <move_servo>
		wait_ms(10);          // Wait for servo to position itself
    1184:	8a e0       	ldi	r24, 0x0A	; 10
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	2f d2       	rcall	.+1118   	; 0x15e8 <wait_ms>
    118a:	ff ef       	ldi	r31, 0xFF	; 255
    118c:	ef 1a       	sub	r14, r31
    118e:	ff 0a       	sbc	r15, r31
	
	/* Data to be Sent to Putty */
	char buffer[53];
	
	/* Perform 180 degree scan. Collect distance measurements every 1 degree. */
	for (char i = 0; i <= 180; i++) {
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	95 eb       	ldi	r25, 0xB5	; 181
    119c:	e9 16       	cp	r14, r25
    119e:	f1 04       	cpc	r15, r1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <__stack+0xa5>
    11a2:	bb cf       	rjmp	.-138    	; 0x111a <__stack+0x1b>
	
	/* Analyze Found Objects */
	//analyze_found_objects(obst);
	
	/* Find Smallest Object */
	find_smallest_obj(obst);
    11a4:	c8 01       	movw	r24, r16
    11a6:	b3 de       	rcall	.-666    	; 0xf0e <find_smallest_obj>
	
	/* Find Closest Object */
	find_closest_obj(obst);
    11a8:	c8 01       	movw	r24, r16
    11aa:	16 df       	rcall	.-468    	; 0xfd8 <find_closest_obj>
}
    11ac:	e5 96       	adiw	r28, 0x35	; 53
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	08 95       	ret

000011d2 <print_and_process_stats>:
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}

void print_and_process_stats(obstacle* obst) {
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	c4 5f       	subi	r28, 0xF4	; 244
    11ee:	d1 40       	sbci	r29, 0x01	; 1
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	fc 01       	movw	r30, r24
	char buffer[500];
	
	/* Prepare buffer for transmission */
	sprintf(buffer, "\r\n\nObjects found: %d\r\n\nClosest Object Statistics:\r\nObject position: %.1f degrees\r\nSONAR distance (cm): %d\r\nIR distance (cm): %d\r\nAngular width: %d\r\nLinear width (cm): %d\r\n\nSmallest Object Statistics:\r\nObject position: %.1f degrees\r\nSONAR distance (cm): %d\r\nIR distance (cm): %d\r\nAngular width: %d\r\nLinear width (cm): %d\r\n", obst->all_object_index, obst->closest_obj_position, obst->closest_obj_dist_SONAR, obst->closest_obj_dist_IR, obst->closest_obj_angular_size, obst->closest_obj_linear_size, obst->smallest_obj_position, obst->smallest_obj_dist_SONAR, obst->smallest_obj_dist_IR, obst->smallest_obj_angular_size, obst->smallest_obj_linear_size);
    11fc:	27 89       	ldd	r18, Z+23	; 0x17
    11fe:	82 2f       	mov	r24, r18
    1200:	82 95       	swap	r24
    1202:	86 95       	lsr	r24
    1204:	86 95       	lsr	r24
    1206:	83 70       	andi	r24, 0x03	; 3
    1208:	20 8d       	ldd	r18, Z+24	; 0x18
    120a:	27 70       	andi	r18, 0x07	; 7
    120c:	22 0f       	add	r18, r18
    120e:	22 0f       	add	r18, r18
    1210:	28 2b       	or	r18, r24
    1212:	37 89       	ldd	r19, Z+23	; 0x17
    1214:	3f 73       	andi	r19, 0x3F	; 63
    1216:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1218:	b1 8c       	ldd	r11, Z+25	; 0x19
    121a:	c3 8c       	ldd	r12, Z+27	; 0x1b
    121c:	d4 8c       	ldd	r13, Z+28	; 0x1c
    121e:	e5 8c       	ldd	r14, Z+29	; 0x1d
    1220:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1222:	97 8d       	ldd	r25, Z+31	; 0x1f
    1224:	89 2f       	mov	r24, r25
    1226:	82 95       	swap	r24
    1228:	86 95       	lsr	r24
    122a:	86 95       	lsr	r24
    122c:	83 70       	andi	r24, 0x03	; 3
    122e:	90 a1       	ldd	r25, Z+32	; 0x20
    1230:	97 70       	andi	r25, 0x07	; 7
    1232:	99 0f       	add	r25, r25
    1234:	99 0f       	add	r25, r25
    1236:	98 2b       	or	r25, r24
    1238:	87 8d       	ldd	r24, Z+31	; 0x1f
    123a:	8f 73       	andi	r24, 0x3F	; 63
    123c:	98 2e       	mov	r9, r24
    123e:	03 a1       	ldd	r16, Z+35	; 0x23
    1240:	14 a1       	ldd	r17, Z+36	; 0x24
    1242:	a1 a1       	ldd	r26, Z+33	; 0x21
    1244:	b2 a1       	ldd	r27, Z+34	; 0x22
    1246:	45 a1       	ldd	r20, Z+37	; 0x25
    1248:	56 a1       	ldd	r21, Z+38	; 0x26
    124a:	67 a1       	ldd	r22, Z+39	; 0x27
    124c:	70 a5       	ldd	r23, Z+40	; 0x28
    124e:	ed 56       	subi	r30, 0x6D	; 109
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	8f 70       	andi	r24, 0x0F	; 15
    1256:	1f 92       	push	r1
    1258:	2f 93       	push	r18
    125a:	1f 92       	push	r1
    125c:	3f 93       	push	r19
    125e:	1f 92       	push	r1
    1260:	af 92       	push	r10
    1262:	1f 92       	push	r1
    1264:	bf 92       	push	r11
    1266:	ff 92       	push	r15
    1268:	ef 92       	push	r14
    126a:	df 92       	push	r13
    126c:	cf 92       	push	r12
    126e:	1f 92       	push	r1
    1270:	9f 93       	push	r25
    1272:	1f 92       	push	r1
    1274:	9f 92       	push	r9
    1276:	1f 93       	push	r17
    1278:	0f 93       	push	r16
    127a:	bf 93       	push	r27
    127c:	af 93       	push	r26
    127e:	7f 93       	push	r23
    1280:	6f 93       	push	r22
    1282:	5f 93       	push	r21
    1284:	4f 93       	push	r20
    1286:	1f 92       	push	r1
    1288:	8f 93       	push	r24
    128a:	80 ea       	ldi	r24, 0xA0	; 160
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	8e 01       	movw	r16, r28
    1294:	0f 5f       	subi	r16, 0xFF	; 255
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	1f 93       	push	r17
    129a:	0f 93       	push	r16
    129c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <sprintf>
	send_message(buffer);
    12a0:	c8 01       	movw	r24, r16
    12a2:	f7 d2       	rcall	.+1518   	; 0x1892 <send_message>
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cc 50       	subi	r28, 0x0C	; 12
    12b0:	de 4f       	sbci	r29, 0xFE	; 254
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	08 95       	ret

000012d4 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
    12d4:	64 e3       	ldi	r22, 0x34	; 52
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <calloc>
    12e0:	08 95       	ret

000012e2 <oi_byte_tx>:
    12e2:	eb e9       	ldi	r30, 0x9B	; 155
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	90 81       	ld	r25, Z
    12e8:	95 ff       	sbrs	r25, 5
    12ea:	fd cf       	rjmp	.-6      	; 0x12e6 <oi_byte_tx+0x4>
    12ec:	80 93 9c 00 	sts	0x009C, r24
    12f0:	08 95       	ret

000012f2 <oi_set_leds>:
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	08 2f       	mov	r16, r24
    12fc:	c6 2f       	mov	r28, r22
    12fe:	14 2f       	mov	r17, r20
    1300:	d2 2f       	mov	r29, r18
    1302:	8b e8       	ldi	r24, 0x8B	; 139
    1304:	ee df       	rcall	.-36     	; 0x12e2 <oi_byte_tx>
    1306:	88 e0       	ldi	r24, 0x08	; 8
    1308:	c8 9f       	mul	r28, r24
    130a:	f0 01       	movw	r30, r0
    130c:	11 24       	eor	r1, r1
    130e:	cc 23       	and	r28, r28
    1310:	29 f0       	breq	.+10     	; 0x131c <oi_set_leds+0x2a>
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	01 11       	cpse	r16, r1
    1316:	01 c0       	rjmp	.+2      	; 0x131a <oi_set_leds+0x28>
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	e9 2f       	mov	r30, r25
    131c:	8e 2f       	mov	r24, r30
    131e:	e1 df       	rcall	.-62     	; 0x12e2 <oi_byte_tx>
    1320:	81 2f       	mov	r24, r17
    1322:	df df       	rcall	.-66     	; 0x12e2 <oi_byte_tx>
    1324:	8d 2f       	mov	r24, r29
    1326:	dd df       	rcall	.-70     	; 0x12e2 <oi_byte_tx>
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <oi_set_wheels>:
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	18 2f       	mov	r17, r24
    133c:	09 2f       	mov	r16, r25
    133e:	c6 2f       	mov	r28, r22
    1340:	d7 2f       	mov	r29, r23
    1342:	81 e9       	ldi	r24, 0x91	; 145
    1344:	ce df       	rcall	.-100    	; 0x12e2 <oi_byte_tx>
    1346:	80 2f       	mov	r24, r16
    1348:	cc df       	rcall	.-104    	; 0x12e2 <oi_byte_tx>
    134a:	81 2f       	mov	r24, r17
    134c:	ca df       	rcall	.-108    	; 0x12e2 <oi_byte_tx>
    134e:	8d 2f       	mov	r24, r29
    1350:	c8 df       	rcall	.-112    	; 0x12e2 <oi_byte_tx>
    1352:	8c 2f       	mov	r24, r28
    1354:	c6 df       	rcall	.-116    	; 0x12e2 <oi_byte_tx>
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <oi_load_song>:
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	c8 2f       	mov	r28, r24
    1376:	7b 01       	movw	r14, r22
    1378:	6a 01       	movw	r12, r20
    137a:	a2 2e       	mov	r10, r18
    137c:	b3 2e       	mov	r11, r19
    137e:	8c e8       	ldi	r24, 0x8C	; 140
    1380:	b0 df       	rcall	.-160    	; 0x12e2 <oi_byte_tx>
    1382:	8c 2f       	mov	r24, r28
    1384:	ae df       	rcall	.-164    	; 0x12e2 <oi_byte_tx>
    1386:	8e 2d       	mov	r24, r14
    1388:	ac df       	rcall	.-168    	; 0x12e2 <oi_byte_tx>
    138a:	1e 14       	cp	r1, r14
    138c:	1f 04       	cpc	r1, r15
    138e:	74 f4       	brge	.+28     	; 0x13ac <oi_load_song+0x4c>
    1390:	e6 01       	movw	r28, r12
    1392:	0a 2d       	mov	r16, r10
    1394:	1b 2d       	mov	r17, r11
    1396:	ec 0c       	add	r14, r12
    1398:	fd 1c       	adc	r15, r13
    139a:	89 91       	ld	r24, Y+
    139c:	a2 df       	rcall	.-188    	; 0x12e2 <oi_byte_tx>
    139e:	f8 01       	movw	r30, r16
    13a0:	81 91       	ld	r24, Z+
    13a2:	8f 01       	movw	r16, r30
    13a4:	9e df       	rcall	.-196    	; 0x12e2 <oi_byte_tx>
    13a6:	ce 15       	cp	r28, r14
    13a8:	df 05       	cpc	r29, r15
    13aa:	b9 f7       	brne	.-18     	; 0x139a <oi_load_song+0x3a>
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	bf 90       	pop	r11
    13be:	af 90       	pop	r10
    13c0:	08 95       	ret

000013c2 <oi_play_song>:
    13c2:	cf 93       	push	r28
    13c4:	c8 2f       	mov	r28, r24
    13c6:	8d e8       	ldi	r24, 0x8D	; 141
    13c8:	8c df       	rcall	.-232    	; 0x12e2 <oi_byte_tx>
    13ca:	8c 2f       	mov	r24, r28
    13cc:	8a df       	rcall	.-236    	; 0x12e2 <oi_byte_tx>
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
    13d2:	eb e9       	ldi	r30, 0x9B	; 155
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	88 23       	and	r24, r24
    13da:	ec f7       	brge	.-6      	; 0x13d6 <oi_byte_rx+0x4>

	return UDR1;
    13dc:	80 91 9c 00 	lds	r24, 0x009C
}
    13e0:	08 95       	ret

000013e2 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    13f0:	80 91 9b 00 	lds	r24, 0x009B
    13f4:	88 23       	and	r24, r24
    13f6:	44 f4       	brge	.+16     	; 0x1408 <oi_update+0x26>
		i = UDR1;
    13f8:	ac e9       	ldi	r26, 0x9C	; 156
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    13fc:	eb e9       	ldi	r30, 0x9B	; 155
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
    1400:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1402:	80 81       	ld	r24, Z
    1404:	88 23       	and	r24, r24
    1406:	e4 f3       	brlt	.-8      	; 0x1400 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    1408:	8e e8       	ldi	r24, 0x8E	; 142
    140a:	6b df       	rcall	.-298    	; 0x12e2 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
    140c:	86 e0       	ldi	r24, 0x06	; 6
    140e:	69 df       	rcall	.-302    	; 0x12e2 <oi_byte_tx>
    1410:	e7 01       	movw	r28, r14
    1412:	87 01       	movw	r16, r14
    1414:	0c 5c       	subi	r16, 0xCC	; 204
    1416:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    1418:	dc df       	rcall	.-72     	; 0x13d2 <oi_byte_rx>
    141a:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    141c:	c0 17       	cp	r28, r16
    141e:	d1 07       	cpc	r29, r17
    1420:	d9 f7       	brne	.-10     	; 0x1418 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1422:	f7 01       	movw	r30, r14
    1424:	84 85       	ldd	r24, Z+12	; 0x0c
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	98 2f       	mov	r25, r24
    142a:	88 27       	eor	r24, r24
    142c:	25 85       	ldd	r18, Z+13	; 0x0d
    142e:	82 0f       	add	r24, r18
    1430:	91 1d       	adc	r25, r1
    1432:	95 87       	std	Z+13, r25	; 0x0d
    1434:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1436:	86 85       	ldd	r24, Z+14	; 0x0e
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	98 2f       	mov	r25, r24
    143c:	88 27       	eor	r24, r24
    143e:	27 85       	ldd	r18, Z+15	; 0x0f
    1440:	82 0f       	add	r24, r18
    1442:	91 1d       	adc	r25, r1
    1444:	97 87       	std	Z+15, r25	; 0x0f
    1446:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    1448:	81 89       	ldd	r24, Z+17	; 0x11
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	98 2f       	mov	r25, r24
    144e:	88 27       	eor	r24, r24
    1450:	22 89       	ldd	r18, Z+18	; 0x12
    1452:	82 0f       	add	r24, r18
    1454:	91 1d       	adc	r25, r1
    1456:	92 8b       	std	Z+18, r25	; 0x12
    1458:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    145a:	83 89       	ldd	r24, Z+19	; 0x13
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	98 2f       	mov	r25, r24
    1460:	88 27       	eor	r24, r24
    1462:	24 89       	ldd	r18, Z+20	; 0x14
    1464:	82 0f       	add	r24, r18
    1466:	91 1d       	adc	r25, r1
    1468:	94 8b       	std	Z+20, r25	; 0x14
    146a:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    146c:	86 89       	ldd	r24, Z+22	; 0x16
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	98 2f       	mov	r25, r24
    1472:	88 27       	eor	r24, r24
    1474:	27 89       	ldd	r18, Z+23	; 0x17
    1476:	82 0f       	add	r24, r18
    1478:	91 1d       	adc	r25, r1
    147a:	97 8b       	std	Z+23, r25	; 0x17
    147c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    147e:	80 8d       	ldd	r24, Z+24	; 0x18
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	98 2f       	mov	r25, r24
    1484:	88 27       	eor	r24, r24
    1486:	21 8d       	ldd	r18, Z+25	; 0x19
    1488:	82 0f       	add	r24, r18
    148a:	91 1d       	adc	r25, r1
    148c:	91 8f       	std	Z+25, r25	; 0x19
    148e:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    1490:	82 8d       	ldd	r24, Z+26	; 0x1a
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	98 2f       	mov	r25, r24
    1496:	88 27       	eor	r24, r24
    1498:	23 8d       	ldd	r18, Z+27	; 0x1b
    149a:	82 0f       	add	r24, r18
    149c:	91 1d       	adc	r25, r1
    149e:	93 8f       	std	Z+27, r25	; 0x1b
    14a0:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    14a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	98 2f       	mov	r25, r24
    14a8:	88 27       	eor	r24, r24
    14aa:	25 8d       	ldd	r18, Z+29	; 0x1d
    14ac:	82 0f       	add	r24, r18
    14ae:	91 1d       	adc	r25, r1
    14b0:	95 8f       	std	Z+29, r25	; 0x1d
    14b2:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
    14b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	98 2f       	mov	r25, r24
    14ba:	88 27       	eor	r24, r24
    14bc:	27 8d       	ldd	r18, Z+31	; 0x1f
    14be:	82 0f       	add	r24, r18
    14c0:	91 1d       	adc	r25, r1
    14c2:	97 8f       	std	Z+31, r25	; 0x1f
    14c4:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    14c6:	80 a1       	ldd	r24, Z+32	; 0x20
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	98 2f       	mov	r25, r24
    14cc:	88 27       	eor	r24, r24
    14ce:	21 a1       	ldd	r18, Z+33	; 0x21
    14d0:	82 0f       	add	r24, r18
    14d2:	91 1d       	adc	r25, r1
    14d4:	91 a3       	std	Z+33, r25	; 0x21
    14d6:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    14d8:	82 a1       	ldd	r24, Z+34	; 0x22
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	23 a1       	ldd	r18, Z+35	; 0x23
    14e2:	82 0f       	add	r24, r18
    14e4:	91 1d       	adc	r25, r1
    14e6:	93 a3       	std	Z+35, r25	; 0x23
    14e8:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    14ea:	82 a5       	ldd	r24, Z+42	; 0x2a
    14ec:	48 2f       	mov	r20, r24
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	21 a5       	ldd	r18, Z+41	; 0x29
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	32 2f       	mov	r19, r18
    14f6:	22 27       	eor	r18, r18
    14f8:	24 0f       	add	r18, r20
    14fa:	35 1f       	adc	r19, r21
    14fc:	36 a3       	std	Z+38, r19	; 0x26
    14fe:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    1500:	90 a9       	ldd	r25, Z+48	; 0x30
    1502:	89 2f       	mov	r24, r25
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	98 2f       	mov	r25, r24
    1508:	88 27       	eor	r24, r24
    150a:	84 0f       	add	r24, r20
    150c:	95 1f       	adc	r25, r21
    150e:	95 a7       	std	Z+45, r25	; 0x2d
    1510:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    1512:	82 a9       	ldd	r24, Z+50	; 0x32
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	98 2f       	mov	r25, r24
    1518:	88 27       	eor	r24, r24
    151a:	23 a9       	ldd	r18, Z+51	; 0x33
    151c:	82 0f       	add	r24, r18
    151e:	91 1d       	adc	r25, r1
    1520:	97 a7       	std	Z+47, r25	; 0x2f
    1522:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    1524:	84 a9       	ldd	r24, Z+52	; 0x34
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	98 2f       	mov	r25, r24
    152a:	88 27       	eor	r24, r24
    152c:	25 a9       	ldd	r18, Z+53	; 0x35
    152e:	82 0f       	add	r24, r18
    1530:	91 1d       	adc	r25, r1
    1532:	91 ab       	std	Z+49, r25	; 0x31
    1534:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    1536:	86 a9       	ldd	r24, Z+54	; 0x36
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 2f       	mov	r25, r24
    153c:	88 27       	eor	r24, r24
    153e:	27 a9       	ldd	r18, Z+55	; 0x37
    1540:	82 0f       	add	r24, r18
    1542:	91 1d       	adc	r25, r1
    1544:	93 ab       	std	Z+51, r25	; 0x33
    1546:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    1548:	83 e2       	ldi	r24, 0x23	; 35
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	4d d0       	rcall	.+154    	; 0x15e8 <wait_ms>
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	08 95       	ret

0000155c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	8c 01       	movw	r16, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1566:	c9 e9       	ldi	r28, 0x99	; 153
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	80 e1       	ldi	r24, 0x10	; 16
    156c:	88 83       	st	Y, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    156e:	88 e1       	ldi	r24, 0x18	; 24
    1570:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    1574:	86 e0       	ldi	r24, 0x06	; 6
    1576:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	b2 de       	rcall	.-668    	; 0x12e2 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    157e:	81 e8       	ldi	r24, 0x81	; 129
    1580:	b0 de       	rcall	.-672    	; 0x12e2 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    1582:	88 e0       	ldi	r24, 0x08	; 8
    1584:	ae de       	rcall	.-676    	; 0x12e2 <oi_byte_tx>
	wait_ms(100);
    1586:	84 e6       	ldi	r24, 0x64	; 100
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2e d0       	rcall	.+92     	; 0x15e8 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    158c:	81 e2       	ldi	r24, 0x21	; 33
    158e:	88 83       	st	Y, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    1590:	84 e8       	ldi	r24, 0x84	; 132
    1592:	a7 de       	rcall	.-690    	; 0x12e2 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	47 e0       	ldi	r20, 0x07	; 7
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	aa de       	rcall	.-684    	; 0x12f2 <oi_set_leds>
	
	oi_update(self);
    159e:	c8 01       	movw	r24, r16
    15a0:	20 df       	rcall	.-448    	; 0x13e2 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    15a2:	c8 01       	movw	r24, r16
    15a4:	1e df       	rcall	.-452    	; 0x13e2 <oi_update>
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	08 95       	ret

000015b0 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    15b0:	10 92 e9 02 	sts	0x02E9, r1
    15b4:	10 92 e8 02 	sts	0x02E8, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    15b8:	81 11       	cpse	r24, r1
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    15bc:	8b e0       	ldi	r24, 0x0B	; 11
    15be:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    15c0:	87 b7       	in	r24, 0x37	; 55
    15c2:	80 68       	ori	r24, 0x80	; 128
    15c4:	87 bf       	out	0x37, r24	; 55
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    15cc:	89 e0       	ldi	r24, 0x09	; 9
    15ce:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    15d0:	87 b7       	in	r24, 0x37	; 55
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    15d6:	78 94       	sei
    15d8:	08 95       	ret

000015da <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    15da:	87 b7       	in	r24, 0x37	; 55
    15dc:	8f 77       	andi	r24, 0x7F	; 127
    15de:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    15e0:	85 b5       	in	r24, 0x25	; 37
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	85 bd       	out	0x25, r24	; 37
    15e6:	08 95       	ret

000015e8 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    15ee:	8a ef       	ldi	r24, 0xFA	; 250
    15f0:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    15f2:	10 92 e9 02 	sts	0x02E9, r1
    15f6:	10 92 e8 02 	sts	0x02E8, r1
	timer2_start(0);
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	d9 df       	rcall	.-78     	; 0x15b0 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    15fe:	20 91 e8 02 	lds	r18, 0x02E8
    1602:	30 91 e9 02 	lds	r19, 0x02E9
    1606:	2c 17       	cp	r18, r28
    1608:	3d 07       	cpc	r19, r29
    160a:	c8 f3       	brcs	.-14     	; 0x15fe <wait_ms+0x16>

	timer2_stop();
    160c:	e6 df       	rcall	.-52     	; 0x15da <timer2_stop>
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	8f 93       	push	r24
    1620:	9f 93       	push	r25
	timer2_tick++;
    1622:	80 91 e8 02 	lds	r24, 0x02E8
    1626:	90 91 e9 02 	lds	r25, 0x02E9
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	90 93 e9 02 	sts	0x02E9, r25
    1630:	80 93 e8 02 	sts	0x02E8, r24
}
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <ADC_init>:
/* IR Program                                                           */
/************************************************************************/
void ADC_init()
{
	// REFS=11, ADLAR= 0, MUX don't care
	ADMUX |= (3<<REFS0) | (2<<MUX0); //(REFS1) | _BV(REFS0);
    1642:	87 b1       	in	r24, 0x07	; 7
    1644:	82 6c       	ori	r24, 0xC2	; 194
    1646:	87 b9       	out	0x07, r24	; 7
	
	// ADEN=1, ADFR=0, ADIE=0, ADPS=111, others don't care.
	//See page 246 of user guide
	ADCSRA |= (1<<ADEN) | (7<<ADPS0);
    1648:	86 b1       	in	r24, 0x06	; 6
    164a:	87 68       	ori	r24, 0x87	; 135
    164c:	86 b9       	out	0x06, r24	; 6
    164e:	08 95       	ret

00001650 <read_ADC>:
}

unsigned int read_ADC()
{
	ADMUX |= (PF2 & 0x1F);
    1650:	39 9a       	sbi	0x07, 1	; 7
	//Sets ADSC bit of ADCSRA, enabling ADC
	ADCSRA |= (1<<ADSC);
    1652:	36 9a       	sbi	0x06, 6	; 6
	//Waits for conversion to be done.
	while(ADCSRA & (1<<ADFR)){}
    1654:	35 99       	sbic	0x06, 5	; 6
    1656:	fe cf       	rjmp	.-4      	; 0x1654 <read_ADC+0x4>
	//Sets conversion to temp var.
	return ADC;
    1658:	84 b1       	in	r24, 0x04	; 4
    165a:	95 b1       	in	r25, 0x05	; 5
}
    165c:	08 95       	ret

0000165e <read_IR_distance>:

int read_IR_distance() {
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	c5 e0       	ldi	r28, 0x05	; 5
    1668:	d0 e0       	ldi	r29, 0x00	; 0
	int sum = 0;
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++)
	sum += read_ADC();
    166e:	f0 df       	rcall	.-32     	; 0x1650 <read_ADC>
    1670:	08 0f       	add	r16, r24
    1672:	19 1f       	adc	r17, r25
    1674:	21 97       	sbiw	r28, 0x01	; 1
	return ADC;
}

int read_IR_distance() {
	int sum = 0;
	for (int i = 0; i < 5; i++)
    1676:	d9 f7       	brne	.-10     	; 0x166e <read_IR_distance+0x10>
	sum += read_ADC();
	
	int quantVal = sum/5;
    1678:	c8 01       	movw	r24, r16
    167a:	65 e0       	ldi	r22, 0x05	; 5
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	0e 94 94 14 	call	0x2928	; 0x2928 <__divmodhi4>
	
	return (pow(quantVal,-1.171) * 31427);
    1682:	07 2e       	mov	r0, r23
    1684:	00 0c       	add	r0, r0
    1686:	88 0b       	sbc	r24, r24
    1688:	99 0b       	sbc	r25, r25
    168a:	40 d2       	rcall	.+1152   	; 0x1b0c <__floatsisf>
    168c:	24 e5       	ldi	r18, 0x54	; 84
    168e:	33 ee       	ldi	r19, 0xE3	; 227
    1690:	45 e9       	ldi	r20, 0x95	; 149
    1692:	5f eb       	ldi	r21, 0xBF	; 191
    1694:	13 d4       	rcall	.+2086   	; 0x1ebc <pow>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	36 e8       	ldi	r19, 0x86	; 134
    169a:	45 ef       	ldi	r20, 0xF5	; 245
    169c:	56 e4       	ldi	r21, 0x46	; 70
    169e:	ab d3       	rcall	.+1878   	; 0x1df6 <__mulsf3>
    16a0:	02 d2       	rcall	.+1028   	; 0x1aa6 <__fixsfsi>
}
    16a2:	cb 01       	movw	r24, r22
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <ping_timer_init>:
volatile unsigned fall = 0;
volatile unsigned signal = 0;

void ping_timer_init()
{
	TCCR1A = 0x00;		// WGM1[1:0]=00
    16ae:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b11000011; // Noise canceller ON, falling edge is trigger, prescaler of 64
    16b0:	83 ec       	ldi	r24, 0xC3	; 195
    16b2:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1 << TICIE1; // Enable TICIE1
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	87 bf       	out	0x37, r24	; 55
    16b8:	08 95       	ret

000016ba <send_pulse>:
}

void send_pulse()
{
	TIMSK &= ~0b00100100;
    16ba:	87 b7       	in	r24, 0x37	; 55
    16bc:	8b 7d       	andi	r24, 0xDB	; 219
    16be:	87 bf       	out	0x37, r24	; 55
	DDRD |= 0x10;
    16c0:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
    16c2:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	8f df       	rcall	.-226    	; 0x15e8 <wait_ms>
	PORTD &= 0xEF;
    16ca:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF;
    16cc:	8c 98       	cbi	0x11, 4	; 17
	
	TIFR |= (1 << ICF1); // Clear flag
    16ce:	86 b7       	in	r24, 0x36	; 54
    16d0:	80 62       	ori	r24, 0x20	; 32
    16d2:	86 bf       	out	0x36, r24	; 54
	
	TIMSK |= 0b00100000;
    16d4:	87 b7       	in	r24, 0x37	; 55
    16d6:	80 62       	ori	r24, 0x20	; 32
    16d8:	87 bf       	out	0x37, r24	; 55
    16da:	08 95       	ret

000016dc <__vector_11>:
}

/* Input Capture Event for Timer1 */
ISR(TIMER1_CAPT_vect)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
	if (rise == 0)
    16ee:	80 91 e6 02 	lds	r24, 0x02E6
    16f2:	90 91 e7 02 	lds	r25, 0x02E7
    16f6:	89 2b       	or	r24, r25
    16f8:	39 f4       	brne	.+14     	; 0x1708 <__vector_11+0x2c>
	{
		rise = ICR1;
    16fa:	86 b5       	in	r24, 0x26	; 38
    16fc:	97 b5       	in	r25, 0x27	; 39
    16fe:	90 93 e7 02 	sts	0x02E7, r25
    1702:	80 93 e6 02 	sts	0x02E6, r24
    1706:	22 c0       	rjmp	.+68     	; 0x174c <__vector_11+0x70>
		
	}
	else if (fall == 0)
    1708:	80 91 e4 02 	lds	r24, 0x02E4
    170c:	90 91 e5 02 	lds	r25, 0x02E5
    1710:	89 2b       	or	r24, r25
    1712:	e1 f4       	brne	.+56     	; 0x174c <__vector_11+0x70>
	{
		fall = ICR1;
    1714:	86 b5       	in	r24, 0x26	; 38
    1716:	97 b5       	in	r25, 0x27	; 39
    1718:	90 93 e5 02 	sts	0x02E5, r25
    171c:	80 93 e4 02 	sts	0x02E4, r24
		signal = fall - rise;
    1720:	80 91 e4 02 	lds	r24, 0x02E4
    1724:	90 91 e5 02 	lds	r25, 0x02E5
    1728:	20 91 e6 02 	lds	r18, 0x02E6
    172c:	30 91 e7 02 	lds	r19, 0x02E7
    1730:	82 1b       	sub	r24, r18
    1732:	93 0b       	sbc	r25, r19
    1734:	90 93 e3 02 	sts	0x02E3, r25
    1738:	80 93 e2 02 	sts	0x02E2, r24
		
		rise = 0;
    173c:	10 92 e7 02 	sts	0x02E7, r1
    1740:	10 92 e6 02 	sts	0x02E6, r1
		fall = 0;
    1744:	10 92 e5 02 	sts	0x02E5, r1
    1748:	10 92 e4 02 	sts	0x02E4, r1
	}
	
	// Rising or falling?
	TCCR1B ^= 0b01000000;
    174c:	9e b5       	in	r25, 0x2e	; 46
    174e:	80 e4       	ldi	r24, 0x40	; 64
    1750:	89 27       	eor	r24, r25
    1752:	8e bd       	out	0x2e, r24	; 46
}
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <read_PING_distance>:

float read_PING_distance() {
	return ((signal/(16000000.0/64.0))*(34300.0/2.0)); // (delta/(Frequency/pre-scaler))*(speed of sound/2)
    1766:	60 91 e2 02 	lds	r22, 0x02E2
    176a:	70 91 e3 02 	lds	r23, 0x02E3
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	ca d1       	rcall	.+916    	; 0x1b08 <__floatunsisf>
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	34 e2       	ldi	r19, 0x24	; 36
    1778:	44 e7       	ldi	r20, 0x74	; 116
    177a:	58 e4       	ldi	r21, 0x48	; 72
    177c:	2c d1       	rcall	.+600    	; 0x19d6 <__divsf3>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3c ef       	ldi	r19, 0xFC	; 252
    1782:	45 e8       	ldi	r20, 0x85	; 133
    1784:	56 e4       	ldi	r21, 0x46	; 70
    1786:	37 c3       	rjmp	.+1646   	; 0x1df6 <__mulsf3>
}
    1788:	08 95       	ret

0000178a <servo_timer_init>:
#define ZERO ((16000000/(8 * 1000)) * 1) * .5075         // 1 ms pulse - clockwise far end; ((16000000/(8 * 1000)) * 1ms) * .5075 (0.4 for Robot 3) calibration
#define NINTY ((16000000/(8 * 1000)) * 1.5) * .9397      // 1.5 ms pulse - center position; ((16000000/(8 * 1000)) * 1.5ms) * .9397 (0.816666 for Robot 3) calibration
#define ONE_EIGHTY ((16000000/(8 * 1000)) * 2) * 1.1362  // 2 ms pulse - counterclockwise far end; ((16000000/(8 * 1000)) * 2ms) * 1.1362 (1.0375 for Robot 3) calibration

void servo_timer_init() {
	TCCR3A = 0b00100011; //set COM and WGM
    178a:	83 e2       	ldi	r24, 0x23	; 35
    178c:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //set WGM and CS
    1790:	8a e1       	ldi	r24, 0x1A	; 26
    1792:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP;
    1796:	88 ef       	ldi	r24, 0xF8	; 248
    1798:	97 ea       	ldi	r25, 0xA7	; 167
    179a:	90 93 87 00 	sts	0x0087, r25
    179e:	80 93 86 00 	sts	0x0086, r24
	
	DDRE |= _BV(4); // Set PE4 as output
    17a2:	14 9a       	sbi	0x02, 4	; 2
	
	OCR3B = NINTY; // Initialize servo to center
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	9b e0       	ldi	r25, 0x0B	; 11
    17a8:	90 93 85 00 	sts	0x0085, r25
    17ac:	80 93 84 00 	sts	0x0084, r24
	wait_ms(500); // Wait for Servo to get into position
    17b0:	84 ef       	ldi	r24, 0xF4	; 244
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	19 cf       	rjmp	.-462    	; 0x15e8 <wait_ms>
    17b6:	08 95       	ret

000017b8 <move_servo>:
}

void move_servo(volatile float* degrees)
{
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	ec 01       	movw	r28, r24
	if (*degrees <= 180 && *degrees >= 0) // Prevent servo from going out of range
    17be:	68 81       	ld	r22, Y
    17c0:	79 81       	ldd	r23, Y+1	; 0x01
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	9b 81       	ldd	r25, Y+3	; 0x03
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	44 e3       	ldi	r20, 0x34	; 52
    17cc:	53 e4       	ldi	r21, 0x43	; 67
    17ce:	fc d0       	rcall	.+504    	; 0x19c8 <__cmpsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	3c f1       	brlt	.+78     	; 0x1822 <move_servo+0x6a>
    17d4:	68 81       	ld	r22, Y
    17d6:	79 81       	ldd	r23, Y+1	; 0x01
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	9b 81       	ldd	r25, Y+3	; 0x03
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	fe d2       	rcall	.+1532   	; 0x1de0 <__gesf2>
    17e4:	88 23       	and	r24, r24
    17e6:	ec f0       	brlt	.+58     	; 0x1822 <move_servo+0x6a>
	OCR3B = (ZERO + (*degrees/180) * (ONE_EIGHTY - ZERO)) - 1; // Convert values to degrees and store as pulse width
    17e8:	68 81       	ld	r22, Y
    17ea:	79 81       	ldd	r23, Y+1	; 0x01
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	9b 81       	ldd	r25, Y+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	44 e3       	ldi	r20, 0x34	; 52
    17f6:	53 e4       	ldi	r21, 0x43	; 67
    17f8:	ee d0       	rcall	.+476    	; 0x19d6 <__divsf3>
    17fa:	2c ec       	ldi	r18, 0xCC	; 204
    17fc:	3c e9       	ldi	r19, 0x9C	; 156
    17fe:	4c e5       	ldi	r20, 0x5C	; 92
    1800:	55 e4       	ldi	r21, 0x45	; 69
    1802:	f9 d2       	rcall	.+1522   	; 0x1df6 <__mulsf3>
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 ec       	ldi	r19, 0xC0	; 192
    1808:	4d e7       	ldi	r20, 0x7D	; 125
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	51 d0       	rcall	.+162    	; 0x18b0 <__addsf3>
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	4b d0       	rcall	.+150    	; 0x18ae <__subsf3>
    1818:	4b d1       	rcall	.+662    	; 0x1ab0 <__fixunssfsi>
    181a:	70 93 85 00 	sts	0x0085, r23
    181e:	60 93 84 00 	sts	0x0084, r22
	
	// Prevent angle from going out of bounds
	if (*degrees > 180)
    1822:	68 81       	ld	r22, Y
    1824:	79 81       	ldd	r23, Y+1	; 0x01
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	44 e3       	ldi	r20, 0x34	; 52
    1830:	53 e4       	ldi	r21, 0x43	; 67
    1832:	d6 d2       	rcall	.+1452   	; 0x1de0 <__gesf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f4       	brge	.+18     	; 0x184a <move_servo+0x92>
	*degrees = 180;
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a4 e3       	ldi	r26, 0x34	; 52
    183e:	b3 e4       	ldi	r27, 0x43	; 67
    1840:	88 83       	st	Y, r24
    1842:	99 83       	std	Y+1, r25	; 0x01
    1844:	aa 83       	std	Y+2, r26	; 0x02
    1846:	bb 83       	std	Y+3, r27	; 0x03
    1848:	0e c0       	rjmp	.+28     	; 0x1866 <move_servo+0xae>
	else if (*degrees < 0)
    184a:	68 81       	ld	r22, Y
    184c:	79 81       	ldd	r23, Y+1	; 0x01
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	a9 01       	movw	r20, r18
    1858:	b7 d0       	rcall	.+366    	; 0x19c8 <__cmpsf2>
    185a:	88 23       	and	r24, r24
    185c:	24 f4       	brge	.+8      	; 0x1866 <move_servo+0xae>
	*degrees = 0;
    185e:	18 82       	st	Y, r1
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	1a 82       	std	Y+2, r1	; 0x02
    1864:	1b 82       	std	Y+3, r1	; 0x03
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <USART_Init>:
/* See page 362 of User Guide for register summary                      */
/************************************************************************/
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate. Put the upper part of the baud number here (bits 8 to 11) */
	UBRR0H = (unsigned char) (ubrr >> 8);
    186c:	90 93 90 00 	sts	0x0090, r25
	
	/*Put the remaining part of the baud number here*/
	UBRR0L = (unsigned char) ubrr;
    1870:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1 << U2X0); /* Steps Double Speed Asynchronous mode of communication */
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN); /* Enable receiver and transmitter */
    1876:	88 e1       	ldi	r24, 0x18	; 24
    1878:	8a b9       	out	0x0a, r24	; 10

	UCSR0C = (1 << USBS0) | (3 << UCSZ00); /* Set frame format: 8data, 2stop bit */
    187a:	8e e0       	ldi	r24, 0x0E	; 14
    187c:	80 93 95 00 	sts	0x0095, r24
    1880:	08 95       	ret

00001882 <USART_Transmit>:
/* Enabled by USART_Init                                                */
/************************************************************************/
void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0))) ;
    1882:	5d 9b       	sbis	0x0b, 5	; 11
    1884:	fe cf       	rjmp	.-4      	; 0x1882 <USART_Transmit>
	UDR0 = data; /* Put data into buffer, sends the data */
    1886:	8c b9       	out	0x0c, r24	; 12
    1888:	08 95       	ret

0000188a <USART_Receive>:
/* Enabled by USART_Init                                                */
/************************************************************************/
unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0))) ;
    188a:	5f 9b       	sbis	0x0b, 7	; 11
    188c:	fe cf       	rjmp	.-4      	; 0x188a <USART_Receive>
	
	return UDR0; /* Get and return received data from buffer */
    188e:	8c b1       	in	r24, 0x0c	; 12
}
    1890:	08 95       	ret

00001892 <send_message>:
/************************************************************************/
/* Calls USART_Transmit for each character in the array                 */
/************************************************************************/
void send_message(char *message)
{
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
	for (int i = 0; message[i] != '\0'; i++)
    1898:	88 81       	ld	r24, Y
    189a:	88 23       	and	r24, r24
    189c:	29 f0       	breq	.+10     	; 0x18a8 <send_message+0x16>
    189e:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(message[i]);
    18a0:	f0 df       	rcall	.-32     	; 0x1882 <USART_Transmit>
/************************************************************************/
/* Calls USART_Transmit for each character in the array                 */
/************************************************************************/
void send_message(char *message)
{
	for (int i = 0; message[i] != '\0'; i++)
    18a2:	89 91       	ld	r24, Y+
    18a4:	81 11       	cpse	r24, r1
    18a6:	fc cf       	rjmp	.-8      	; 0x18a0 <send_message+0xe>
		USART_Transmit(message[i]);
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <__subsf3>:
    18ae:	50 58       	subi	r21, 0x80	; 128

000018b0 <__addsf3>:
    18b0:	bb 27       	eor	r27, r27
    18b2:	aa 27       	eor	r26, r26
    18b4:	0e d0       	rcall	.+28     	; 0x18d2 <__addsf3x>
    18b6:	49 c2       	rjmp	.+1170   	; 0x1d4a <__fp_round>
    18b8:	12 d2       	rcall	.+1060   	; 0x1cde <__fp_pscA>
    18ba:	30 f0       	brcs	.+12     	; 0x18c8 <__addsf3+0x18>
    18bc:	17 d2       	rcall	.+1070   	; 0x1cec <__fp_pscB>
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <__addsf3+0x18>
    18c0:	31 f4       	brne	.+12     	; 0x18ce <__addsf3+0x1e>
    18c2:	9f 3f       	cpi	r25, 0xFF	; 255
    18c4:	11 f4       	brne	.+4      	; 0x18ca <__addsf3+0x1a>
    18c6:	1e f4       	brtc	.+6      	; 0x18ce <__addsf3+0x1e>
    18c8:	e2 c1       	rjmp	.+964    	; 0x1c8e <__fp_nan>
    18ca:	0e f4       	brtc	.+2      	; 0x18ce <__addsf3+0x1e>
    18cc:	e0 95       	com	r30
    18ce:	e7 fb       	bst	r30, 7
    18d0:	ca c1       	rjmp	.+916    	; 0x1c66 <__fp_inf>

000018d2 <__addsf3x>:
    18d2:	e9 2f       	mov	r30, r25
    18d4:	5c d2       	rcall	.+1208   	; 0x1d8e <__fp_split3>
    18d6:	80 f3       	brcs	.-32     	; 0x18b8 <__addsf3+0x8>
    18d8:	ba 17       	cp	r27, r26
    18da:	62 07       	cpc	r22, r18
    18dc:	73 07       	cpc	r23, r19
    18de:	84 07       	cpc	r24, r20
    18e0:	95 07       	cpc	r25, r21
    18e2:	18 f0       	brcs	.+6      	; 0x18ea <__addsf3x+0x18>
    18e4:	71 f4       	brne	.+28     	; 0x1902 <__addsf3x+0x30>
    18e6:	9e f5       	brtc	.+102    	; 0x194e <__addsf3x+0x7c>
    18e8:	74 c2       	rjmp	.+1256   	; 0x1dd2 <__fp_zero>
    18ea:	0e f4       	brtc	.+2      	; 0x18ee <__addsf3x+0x1c>
    18ec:	e0 95       	com	r30
    18ee:	0b 2e       	mov	r0, r27
    18f0:	ba 2f       	mov	r27, r26
    18f2:	a0 2d       	mov	r26, r0
    18f4:	0b 01       	movw	r0, r22
    18f6:	b9 01       	movw	r22, r18
    18f8:	90 01       	movw	r18, r0
    18fa:	0c 01       	movw	r0, r24
    18fc:	ca 01       	movw	r24, r20
    18fe:	a0 01       	movw	r20, r0
    1900:	11 24       	eor	r1, r1
    1902:	ff 27       	eor	r31, r31
    1904:	59 1b       	sub	r21, r25
    1906:	99 f0       	breq	.+38     	; 0x192e <__addsf3x+0x5c>
    1908:	59 3f       	cpi	r21, 0xF9	; 249
    190a:	50 f4       	brcc	.+20     	; 0x1920 <__addsf3x+0x4e>
    190c:	50 3e       	cpi	r21, 0xE0	; 224
    190e:	68 f1       	brcs	.+90     	; 0x196a <__addsf3x+0x98>
    1910:	1a 16       	cp	r1, r26
    1912:	f0 40       	sbci	r31, 0x00	; 0
    1914:	a2 2f       	mov	r26, r18
    1916:	23 2f       	mov	r18, r19
    1918:	34 2f       	mov	r19, r20
    191a:	44 27       	eor	r20, r20
    191c:	58 5f       	subi	r21, 0xF8	; 248
    191e:	f3 cf       	rjmp	.-26     	; 0x1906 <__addsf3x+0x34>
    1920:	46 95       	lsr	r20
    1922:	37 95       	ror	r19
    1924:	27 95       	ror	r18
    1926:	a7 95       	ror	r26
    1928:	f0 40       	sbci	r31, 0x00	; 0
    192a:	53 95       	inc	r21
    192c:	c9 f7       	brne	.-14     	; 0x1920 <__addsf3x+0x4e>
    192e:	7e f4       	brtc	.+30     	; 0x194e <__addsf3x+0x7c>
    1930:	1f 16       	cp	r1, r31
    1932:	ba 0b       	sbc	r27, r26
    1934:	62 0b       	sbc	r22, r18
    1936:	73 0b       	sbc	r23, r19
    1938:	84 0b       	sbc	r24, r20
    193a:	ba f0       	brmi	.+46     	; 0x196a <__addsf3x+0x98>
    193c:	91 50       	subi	r25, 0x01	; 1
    193e:	a1 f0       	breq	.+40     	; 0x1968 <__addsf3x+0x96>
    1940:	ff 0f       	add	r31, r31
    1942:	bb 1f       	adc	r27, r27
    1944:	66 1f       	adc	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	c2 f7       	brpl	.-16     	; 0x193c <__addsf3x+0x6a>
    194c:	0e c0       	rjmp	.+28     	; 0x196a <__addsf3x+0x98>
    194e:	ba 0f       	add	r27, r26
    1950:	62 1f       	adc	r22, r18
    1952:	73 1f       	adc	r23, r19
    1954:	84 1f       	adc	r24, r20
    1956:	48 f4       	brcc	.+18     	; 0x196a <__addsf3x+0x98>
    1958:	87 95       	ror	r24
    195a:	77 95       	ror	r23
    195c:	67 95       	ror	r22
    195e:	b7 95       	ror	r27
    1960:	f7 95       	ror	r31
    1962:	9e 3f       	cpi	r25, 0xFE	; 254
    1964:	08 f0       	brcs	.+2      	; 0x1968 <__addsf3x+0x96>
    1966:	b3 cf       	rjmp	.-154    	; 0x18ce <__addsf3+0x1e>
    1968:	93 95       	inc	r25
    196a:	88 0f       	add	r24, r24
    196c:	08 f0       	brcs	.+2      	; 0x1970 <__addsf3x+0x9e>
    196e:	99 27       	eor	r25, r25
    1970:	ee 0f       	add	r30, r30
    1972:	97 95       	ror	r25
    1974:	87 95       	ror	r24
    1976:	08 95       	ret

00001978 <atan>:
    1978:	df 93       	push	r29
    197a:	dd 27       	eor	r29, r29
    197c:	b9 2f       	mov	r27, r25
    197e:	bf 77       	andi	r27, 0x7F	; 127
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	16 16       	cp	r1, r22
    1986:	17 06       	cpc	r1, r23
    1988:	48 07       	cpc	r20, r24
    198a:	5b 07       	cpc	r21, r27
    198c:	10 f4       	brcc	.+4      	; 0x1992 <atan+0x1a>
    198e:	d9 2f       	mov	r29, r25
    1990:	2b d2       	rcall	.+1110   	; 0x1de8 <inverse>
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	7f 93       	push	r23
    1998:	6f 93       	push	r22
    199a:	24 d3       	rcall	.+1608   	; 0x1fe4 <square>
    199c:	ec e8       	ldi	r30, 0x8C	; 140
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	79 d1       	rcall	.+754    	; 0x1c94 <__fp_powser>
    19a2:	d3 d1       	rcall	.+934    	; 0x1d4a <__fp_round>
    19a4:	2f 91       	pop	r18
    19a6:	3f 91       	pop	r19
    19a8:	4f 91       	pop	r20
    19aa:	5f 91       	pop	r21
    19ac:	30 d2       	rcall	.+1120   	; 0x1e0e <__mulsf3x>
    19ae:	dd 23       	and	r29, r29
    19b0:	49 f0       	breq	.+18     	; 0x19c4 <atan+0x4c>
    19b2:	90 58       	subi	r25, 0x80	; 128
    19b4:	a2 ea       	ldi	r26, 0xA2	; 162
    19b6:	2a ed       	ldi	r18, 0xDA	; 218
    19b8:	3f e0       	ldi	r19, 0x0F	; 15
    19ba:	49 ec       	ldi	r20, 0xC9	; 201
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	d0 78       	andi	r29, 0x80	; 128
    19c0:	5d 27       	eor	r21, r29
    19c2:	87 df       	rcall	.-242    	; 0x18d2 <__addsf3x>
    19c4:	df 91       	pop	r29
    19c6:	c1 c1       	rjmp	.+898    	; 0x1d4a <__fp_round>

000019c8 <__cmpsf2>:
    19c8:	2a d1       	rcall	.+596    	; 0x1c1e <__fp_cmp>
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <__cmpsf2+0x6>
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	08 95       	ret

000019d0 <cos>:
    19d0:	95 d1       	rcall	.+810    	; 0x1cfc <__fp_rempio2>
    19d2:	e3 95       	inc	r30
    19d4:	cb c1       	rjmp	.+918    	; 0x1d6c <__fp_sinus>

000019d6 <__divsf3>:
    19d6:	0c d0       	rcall	.+24     	; 0x19f0 <__divsf3x>
    19d8:	b8 c1       	rjmp	.+880    	; 0x1d4a <__fp_round>
    19da:	88 d1       	rcall	.+784    	; 0x1cec <__fp_pscB>
    19dc:	40 f0       	brcs	.+16     	; 0x19ee <__divsf3+0x18>
    19de:	7f d1       	rcall	.+766    	; 0x1cde <__fp_pscA>
    19e0:	30 f0       	brcs	.+12     	; 0x19ee <__divsf3+0x18>
    19e2:	21 f4       	brne	.+8      	; 0x19ec <__divsf3+0x16>
    19e4:	5f 3f       	cpi	r21, 0xFF	; 255
    19e6:	19 f0       	breq	.+6      	; 0x19ee <__divsf3+0x18>
    19e8:	3e c1       	rjmp	.+636    	; 0x1c66 <__fp_inf>
    19ea:	51 11       	cpse	r21, r1
    19ec:	f3 c1       	rjmp	.+998    	; 0x1dd4 <__fp_szero>
    19ee:	4f c1       	rjmp	.+670    	; 0x1c8e <__fp_nan>

000019f0 <__divsf3x>:
    19f0:	ce d1       	rcall	.+924    	; 0x1d8e <__fp_split3>
    19f2:	98 f3       	brcs	.-26     	; 0x19da <__divsf3+0x4>

000019f4 <__divsf3_pse>:
    19f4:	99 23       	and	r25, r25
    19f6:	c9 f3       	breq	.-14     	; 0x19ea <__divsf3+0x14>
    19f8:	55 23       	and	r21, r21
    19fa:	b1 f3       	breq	.-20     	; 0x19e8 <__divsf3+0x12>
    19fc:	95 1b       	sub	r25, r21
    19fe:	55 0b       	sbc	r21, r21
    1a00:	bb 27       	eor	r27, r27
    1a02:	aa 27       	eor	r26, r26
    1a04:	62 17       	cp	r22, r18
    1a06:	73 07       	cpc	r23, r19
    1a08:	84 07       	cpc	r24, r20
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <__divsf3_pse+0x26>
    1a0c:	9f 5f       	subi	r25, 0xFF	; 255
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	44 1f       	adc	r20, r20
    1a16:	aa 1f       	adc	r26, r26
    1a18:	a9 f3       	breq	.-22     	; 0x1a04 <__divsf3_pse+0x10>
    1a1a:	33 d0       	rcall	.+102    	; 0x1a82 <__divsf3_pse+0x8e>
    1a1c:	0e 2e       	mov	r0, r30
    1a1e:	3a f0       	brmi	.+14     	; 0x1a2e <__divsf3_pse+0x3a>
    1a20:	e0 e8       	ldi	r30, 0x80	; 128
    1a22:	30 d0       	rcall	.+96     	; 0x1a84 <__divsf3_pse+0x90>
    1a24:	91 50       	subi	r25, 0x01	; 1
    1a26:	50 40       	sbci	r21, 0x00	; 0
    1a28:	e6 95       	lsr	r30
    1a2a:	00 1c       	adc	r0, r0
    1a2c:	ca f7       	brpl	.-14     	; 0x1a20 <__divsf3_pse+0x2c>
    1a2e:	29 d0       	rcall	.+82     	; 0x1a82 <__divsf3_pse+0x8e>
    1a30:	fe 2f       	mov	r31, r30
    1a32:	27 d0       	rcall	.+78     	; 0x1a82 <__divsf3_pse+0x8e>
    1a34:	66 0f       	add	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	88 1f       	adc	r24, r24
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	26 17       	cp	r18, r22
    1a3e:	37 07       	cpc	r19, r23
    1a40:	48 07       	cpc	r20, r24
    1a42:	ab 07       	cpc	r26, r27
    1a44:	b0 e8       	ldi	r27, 0x80	; 128
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <__divsf3_pse+0x56>
    1a48:	bb 0b       	sbc	r27, r27
    1a4a:	80 2d       	mov	r24, r0
    1a4c:	bf 01       	movw	r22, r30
    1a4e:	ff 27       	eor	r31, r31
    1a50:	93 58       	subi	r25, 0x83	; 131
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	2a f0       	brmi	.+10     	; 0x1a60 <__divsf3_pse+0x6c>
    1a56:	9e 3f       	cpi	r25, 0xFE	; 254
    1a58:	51 05       	cpc	r21, r1
    1a5a:	68 f0       	brcs	.+26     	; 0x1a76 <__divsf3_pse+0x82>
    1a5c:	04 c1       	rjmp	.+520    	; 0x1c66 <__fp_inf>
    1a5e:	ba c1       	rjmp	.+884    	; 0x1dd4 <__fp_szero>
    1a60:	5f 3f       	cpi	r21, 0xFF	; 255
    1a62:	ec f3       	brlt	.-6      	; 0x1a5e <__divsf3_pse+0x6a>
    1a64:	98 3e       	cpi	r25, 0xE8	; 232
    1a66:	dc f3       	brlt	.-10     	; 0x1a5e <__divsf3_pse+0x6a>
    1a68:	86 95       	lsr	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	b7 95       	ror	r27
    1a70:	f7 95       	ror	r31
    1a72:	9f 5f       	subi	r25, 0xFF	; 255
    1a74:	c9 f7       	brne	.-14     	; 0x1a68 <__divsf3_pse+0x74>
    1a76:	88 0f       	add	r24, r24
    1a78:	91 1d       	adc	r25, r1
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	97 f9       	bld	r25, 7
    1a80:	08 95       	ret
    1a82:	e1 e0       	ldi	r30, 0x01	; 1
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	62 17       	cp	r22, r18
    1a8e:	73 07       	cpc	r23, r19
    1a90:	84 07       	cpc	r24, r20
    1a92:	ba 07       	cpc	r27, r26
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <__divsf3_pse+0xaa>
    1a96:	62 1b       	sub	r22, r18
    1a98:	73 0b       	sbc	r23, r19
    1a9a:	84 0b       	sbc	r24, r20
    1a9c:	ba 0b       	sbc	r27, r26
    1a9e:	ee 1f       	adc	r30, r30
    1aa0:	88 f7       	brcc	.-30     	; 0x1a84 <__divsf3_pse+0x90>
    1aa2:	e0 95       	com	r30
    1aa4:	08 95       	ret

00001aa6 <__fixsfsi>:
    1aa6:	04 d0       	rcall	.+8      	; 0x1ab0 <__fixunssfsi>
    1aa8:	68 94       	set
    1aaa:	b1 11       	cpse	r27, r1
    1aac:	93 c1       	rjmp	.+806    	; 0x1dd4 <__fp_szero>
    1aae:	08 95       	ret

00001ab0 <__fixunssfsi>:
    1ab0:	76 d1       	rcall	.+748    	; 0x1d9e <__fp_splitA>
    1ab2:	88 f0       	brcs	.+34     	; 0x1ad6 <__fixunssfsi+0x26>
    1ab4:	9f 57       	subi	r25, 0x7F	; 127
    1ab6:	90 f0       	brcs	.+36     	; 0x1adc <__fixunssfsi+0x2c>
    1ab8:	b9 2f       	mov	r27, r25
    1aba:	99 27       	eor	r25, r25
    1abc:	b7 51       	subi	r27, 0x17	; 23
    1abe:	a0 f0       	brcs	.+40     	; 0x1ae8 <__fixunssfsi+0x38>
    1ac0:	d1 f0       	breq	.+52     	; 0x1af6 <__fixunssfsi+0x46>
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	1a f0       	brmi	.+6      	; 0x1ad2 <__fixunssfsi+0x22>
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__fixunssfsi+0x12>
    1ad0:	12 c0       	rjmp	.+36     	; 0x1af6 <__fixunssfsi+0x46>
    1ad2:	b1 30       	cpi	r27, 0x01	; 1
    1ad4:	81 f0       	breq	.+32     	; 0x1af6 <__fixunssfsi+0x46>
    1ad6:	7d d1       	rcall	.+762    	; 0x1dd2 <__fp_zero>
    1ad8:	b1 e0       	ldi	r27, 0x01	; 1
    1ada:	08 95       	ret
    1adc:	7a c1       	rjmp	.+756    	; 0x1dd2 <__fp_zero>
    1ade:	67 2f       	mov	r22, r23
    1ae0:	78 2f       	mov	r23, r24
    1ae2:	88 27       	eor	r24, r24
    1ae4:	b8 5f       	subi	r27, 0xF8	; 248
    1ae6:	39 f0       	breq	.+14     	; 0x1af6 <__fixunssfsi+0x46>
    1ae8:	b9 3f       	cpi	r27, 0xF9	; 249
    1aea:	cc f3       	brlt	.-14     	; 0x1ade <__fixunssfsi+0x2e>
    1aec:	86 95       	lsr	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	b3 95       	inc	r27
    1af4:	d9 f7       	brne	.-10     	; 0x1aec <__fixunssfsi+0x3c>
    1af6:	3e f4       	brtc	.+14     	; 0x1b06 <__fixunssfsi+0x56>
    1af8:	90 95       	com	r25
    1afa:	80 95       	com	r24
    1afc:	70 95       	com	r23
    1afe:	61 95       	neg	r22
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	8f 4f       	sbci	r24, 0xFF	; 255
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	08 95       	ret

00001b08 <__floatunsisf>:
    1b08:	e8 94       	clt
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <__floatsisf+0x12>

00001b0c <__floatsisf>:
    1b0c:	97 fb       	bst	r25, 7
    1b0e:	3e f4       	brtc	.+14     	; 0x1b1e <__floatsisf+0x12>
    1b10:	90 95       	com	r25
    1b12:	80 95       	com	r24
    1b14:	70 95       	com	r23
    1b16:	61 95       	neg	r22
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	99 23       	and	r25, r25
    1b20:	a9 f0       	breq	.+42     	; 0x1b4c <__floatsisf+0x40>
    1b22:	f9 2f       	mov	r31, r25
    1b24:	96 e9       	ldi	r25, 0x96	; 150
    1b26:	bb 27       	eor	r27, r27
    1b28:	93 95       	inc	r25
    1b2a:	f6 95       	lsr	r31
    1b2c:	87 95       	ror	r24
    1b2e:	77 95       	ror	r23
    1b30:	67 95       	ror	r22
    1b32:	b7 95       	ror	r27
    1b34:	f1 11       	cpse	r31, r1
    1b36:	f8 cf       	rjmp	.-16     	; 0x1b28 <__floatsisf+0x1c>
    1b38:	fa f4       	brpl	.+62     	; 0x1b78 <__floatsisf+0x6c>
    1b3a:	bb 0f       	add	r27, r27
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__floatsisf+0x36>
    1b3e:	60 ff       	sbrs	r22, 0
    1b40:	1b c0       	rjmp	.+54     	; 0x1b78 <__floatsisf+0x6c>
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	16 c0       	rjmp	.+44     	; 0x1b78 <__floatsisf+0x6c>
    1b4c:	88 23       	and	r24, r24
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <__floatsisf+0x48>
    1b50:	96 e9       	ldi	r25, 0x96	; 150
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <__floatsisf+0x6a>
    1b54:	77 23       	and	r23, r23
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <__floatsisf+0x54>
    1b58:	9e e8       	ldi	r25, 0x8E	; 142
    1b5a:	87 2f       	mov	r24, r23
    1b5c:	76 2f       	mov	r23, r22
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <__floatsisf+0x5e>
    1b60:	66 23       	and	r22, r22
    1b62:	71 f0       	breq	.+28     	; 0x1b80 <__floatsisf+0x74>
    1b64:	96 e8       	ldi	r25, 0x86	; 134
    1b66:	86 2f       	mov	r24, r22
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	2a f0       	brmi	.+10     	; 0x1b78 <__floatsisf+0x6c>
    1b6e:	9a 95       	dec	r25
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	da f7       	brpl	.-10     	; 0x1b6e <__floatsisf+0x62>
    1b78:	88 0f       	add	r24, r24
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	97 f9       	bld	r25, 7
    1b80:	08 95       	ret
    1b82:	ad d0       	rcall	.+346    	; 0x1cde <__fp_pscA>
    1b84:	18 f0       	brcs	.+6      	; 0x1b8c <__floatsisf+0x80>
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <__floatsisf+0x80>
    1b88:	b1 d0       	rcall	.+354    	; 0x1cec <__fp_pscB>
    1b8a:	38 f4       	brcc	.+14     	; 0x1b9a <fmod+0xa>
    1b8c:	80 c0       	rjmp	.+256    	; 0x1c8e <__fp_nan>
    1b8e:	22 c1       	rjmp	.+580    	; 0x1dd4 <__fp_szero>

00001b90 <fmod>:
    1b90:	e9 2f       	mov	r30, r25
    1b92:	fd d0       	rcall	.+506    	; 0x1d8e <__fp_split3>
    1b94:	b0 f3       	brcs	.-20     	; 0x1b82 <__floatsisf+0x76>
    1b96:	55 23       	and	r21, r21
    1b98:	c9 f3       	breq	.-14     	; 0x1b8c <__floatsisf+0x80>
    1b9a:	e7 fb       	bst	r30, 7
    1b9c:	62 17       	cp	r22, r18
    1b9e:	73 07       	cpc	r23, r19
    1ba0:	84 07       	cpc	r24, r20
    1ba2:	95 07       	cpc	r25, r21
    1ba4:	a8 f1       	brcs	.+106    	; 0x1c10 <fmod+0x80>
    1ba6:	99 f3       	breq	.-26     	; 0x1b8e <__floatsisf+0x82>
    1ba8:	e9 2f       	mov	r30, r25
    1baa:	ff 27       	eor	r31, r31
    1bac:	88 23       	and	r24, r24
    1bae:	2a f0       	brmi	.+10     	; 0x1bba <fmod+0x2a>
    1bb0:	31 97       	sbiw	r30, 0x01	; 1
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	da f7       	brpl	.-10     	; 0x1bb0 <fmod+0x20>
    1bba:	95 2f       	mov	r25, r21
    1bbc:	55 27       	eor	r21, r21
    1bbe:	44 23       	and	r20, r20
    1bc0:	32 f0       	brmi	.+12     	; 0x1bce <fmod+0x3e>
    1bc2:	91 50       	subi	r25, 0x01	; 1
    1bc4:	50 40       	sbci	r21, 0x00	; 0
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	44 1f       	adc	r20, r20
    1bcc:	d2 f7       	brpl	.-12     	; 0x1bc2 <fmod+0x32>
    1bce:	bb 27       	eor	r27, r27
    1bd0:	e9 1b       	sub	r30, r25
    1bd2:	f5 0b       	sbc	r31, r21
    1bd4:	62 1b       	sub	r22, r18
    1bd6:	73 0b       	sbc	r23, r19
    1bd8:	84 0b       	sbc	r24, r20
    1bda:	b1 09       	sbc	r27, r1
    1bdc:	c1 f2       	breq	.-80     	; 0x1b8e <__floatsisf+0x82>
    1bde:	22 f4       	brpl	.+8      	; 0x1be8 <fmod+0x58>
    1be0:	62 0f       	add	r22, r18
    1be2:	73 1f       	adc	r23, r19
    1be4:	84 1f       	adc	r24, r20
    1be6:	b1 1d       	adc	r27, r1
    1be8:	31 97       	sbiw	r30, 0x01	; 1
    1bea:	2a f0       	brmi	.+10     	; 0x1bf6 <fmod+0x66>
    1bec:	66 0f       	add	r22, r22
    1bee:	77 1f       	adc	r23, r23
    1bf0:	88 1f       	adc	r24, r24
    1bf2:	bb 1f       	adc	r27, r27
    1bf4:	ef cf       	rjmp	.-34     	; 0x1bd4 <fmod+0x44>
    1bf6:	91 50       	subi	r25, 0x01	; 1
    1bf8:	50 40       	sbci	r21, 0x00	; 0
    1bfa:	5a f0       	brmi	.+22     	; 0x1c12 <fmod+0x82>
    1bfc:	41 f0       	breq	.+16     	; 0x1c0e <fmod+0x7e>
    1bfe:	88 23       	and	r24, r24
    1c00:	32 f0       	brmi	.+12     	; 0x1c0e <fmod+0x7e>
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	91 50       	subi	r25, 0x01	; 1
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	c1 f7       	brne	.-16     	; 0x1bfe <fmod+0x6e>
    1c0e:	93 95       	inc	r25
    1c10:	30 c0       	rjmp	.+96     	; 0x1c72 <__fp_mpack>
    1c12:	86 95       	lsr	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	9f 5f       	subi	r25, 0xFF	; 255
    1c1a:	d9 f7       	brne	.-10     	; 0x1c12 <fmod+0x82>
    1c1c:	f8 cf       	rjmp	.-16     	; 0x1c0e <fmod+0x7e>

00001c1e <__fp_cmp>:
    1c1e:	99 0f       	add	r25, r25
    1c20:	00 08       	sbc	r0, r0
    1c22:	55 0f       	add	r21, r21
    1c24:	aa 0b       	sbc	r26, r26
    1c26:	e0 e8       	ldi	r30, 0x80	; 128
    1c28:	fe ef       	ldi	r31, 0xFE	; 254
    1c2a:	16 16       	cp	r1, r22
    1c2c:	17 06       	cpc	r1, r23
    1c2e:	e8 07       	cpc	r30, r24
    1c30:	f9 07       	cpc	r31, r25
    1c32:	c0 f0       	brcs	.+48     	; 0x1c64 <__fp_cmp+0x46>
    1c34:	12 16       	cp	r1, r18
    1c36:	13 06       	cpc	r1, r19
    1c38:	e4 07       	cpc	r30, r20
    1c3a:	f5 07       	cpc	r31, r21
    1c3c:	98 f0       	brcs	.+38     	; 0x1c64 <__fp_cmp+0x46>
    1c3e:	62 1b       	sub	r22, r18
    1c40:	73 0b       	sbc	r23, r19
    1c42:	84 0b       	sbc	r24, r20
    1c44:	95 0b       	sbc	r25, r21
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <__fp_cmp+0x38>
    1c48:	0a 26       	eor	r0, r26
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <__fp_cmp+0x46>
    1c4c:	23 2b       	or	r18, r19
    1c4e:	24 2b       	or	r18, r20
    1c50:	25 2b       	or	r18, r21
    1c52:	21 f4       	brne	.+8      	; 0x1c5c <__fp_cmp+0x3e>
    1c54:	08 95       	ret
    1c56:	0a 26       	eor	r0, r26
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <__fp_cmp+0x3e>
    1c5a:	a1 40       	sbci	r26, 0x01	; 1
    1c5c:	a6 95       	lsr	r26
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	81 1d       	adc	r24, r1
    1c62:	81 1d       	adc	r24, r1
    1c64:	08 95       	ret

00001c66 <__fp_inf>:
    1c66:	97 f9       	bld	r25, 7
    1c68:	9f 67       	ori	r25, 0x7F	; 127
    1c6a:	80 e8       	ldi	r24, 0x80	; 128
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	08 95       	ret

00001c72 <__fp_mpack>:
    1c72:	9f 3f       	cpi	r25, 0xFF	; 255
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <__fp_mpack_finite+0xc>

00001c76 <__fp_mpack_finite>:
    1c76:	91 50       	subi	r25, 0x01	; 1
    1c78:	20 f4       	brcc	.+8      	; 0x1c82 <__fp_mpack_finite+0xc>
    1c7a:	87 95       	ror	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b7 95       	ror	r27
    1c82:	88 0f       	add	r24, r24
    1c84:	91 1d       	adc	r25, r1
    1c86:	96 95       	lsr	r25
    1c88:	87 95       	ror	r24
    1c8a:	97 f9       	bld	r25, 7
    1c8c:	08 95       	ret

00001c8e <__fp_nan>:
    1c8e:	9f ef       	ldi	r25, 0xFF	; 255
    1c90:	80 ec       	ldi	r24, 0xC0	; 192
    1c92:	08 95       	ret

00001c94 <__fp_powser>:
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	1f 93       	push	r17
    1c9a:	0f 93       	push	r16
    1c9c:	ff 92       	push	r15
    1c9e:	ef 92       	push	r14
    1ca0:	df 92       	push	r13
    1ca2:	7b 01       	movw	r14, r22
    1ca4:	8c 01       	movw	r16, r24
    1ca6:	68 94       	set
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <__fp_powser+0x20>
    1caa:	da 2e       	mov	r13, r26
    1cac:	ef 01       	movw	r28, r30
    1cae:	af d0       	rcall	.+350    	; 0x1e0e <__mulsf3x>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e8 94       	clt
    1cb4:	a5 91       	lpm	r26, Z+
    1cb6:	25 91       	lpm	r18, Z+
    1cb8:	35 91       	lpm	r19, Z+
    1cba:	45 91       	lpm	r20, Z+
    1cbc:	55 91       	lpm	r21, Z+
    1cbe:	ae f3       	brts	.-22     	; 0x1caa <__fp_powser+0x16>
    1cc0:	ef 01       	movw	r28, r30
    1cc2:	07 de       	rcall	.-1010   	; 0x18d2 <__addsf3x>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	97 01       	movw	r18, r14
    1cc8:	a8 01       	movw	r20, r16
    1cca:	da 94       	dec	r13
    1ccc:	79 f7       	brne	.-34     	; 0x1cac <__fp_powser+0x18>
    1cce:	df 90       	pop	r13
    1cd0:	ef 90       	pop	r14
    1cd2:	ff 90       	pop	r15
    1cd4:	0f 91       	pop	r16
    1cd6:	1f 91       	pop	r17
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <__fp_pscA>:
    1cde:	00 24       	eor	r0, r0
    1ce0:	0a 94       	dec	r0
    1ce2:	16 16       	cp	r1, r22
    1ce4:	17 06       	cpc	r1, r23
    1ce6:	18 06       	cpc	r1, r24
    1ce8:	09 06       	cpc	r0, r25
    1cea:	08 95       	ret

00001cec <__fp_pscB>:
    1cec:	00 24       	eor	r0, r0
    1cee:	0a 94       	dec	r0
    1cf0:	12 16       	cp	r1, r18
    1cf2:	13 06       	cpc	r1, r19
    1cf4:	14 06       	cpc	r1, r20
    1cf6:	05 06       	cpc	r0, r21
    1cf8:	08 95       	ret
    1cfa:	c9 cf       	rjmp	.-110    	; 0x1c8e <__fp_nan>

00001cfc <__fp_rempio2>:
    1cfc:	50 d0       	rcall	.+160    	; 0x1d9e <__fp_splitA>
    1cfe:	e8 f3       	brcs	.-6      	; 0x1cfa <__fp_pscB+0xe>
    1d00:	e8 94       	clt
    1d02:	e0 e0       	ldi	r30, 0x00	; 0
    1d04:	bb 27       	eor	r27, r27
    1d06:	9f 57       	subi	r25, 0x7F	; 127
    1d08:	f0 f0       	brcs	.+60     	; 0x1d46 <__fp_rempio2+0x4a>
    1d0a:	2a ed       	ldi	r18, 0xDA	; 218
    1d0c:	3f e0       	ldi	r19, 0x0F	; 15
    1d0e:	49 ec       	ldi	r20, 0xC9	; 201
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <__fp_rempio2+0x22>
    1d12:	ee 0f       	add	r30, r30
    1d14:	bb 0f       	add	r27, r27
    1d16:	66 1f       	adc	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__fp_rempio2+0x2c>
    1d1e:	b2 3a       	cpi	r27, 0xA2	; 162
    1d20:	62 07       	cpc	r22, r18
    1d22:	73 07       	cpc	r23, r19
    1d24:	84 07       	cpc	r24, r20
    1d26:	28 f0       	brcs	.+10     	; 0x1d32 <__fp_rempio2+0x36>
    1d28:	b2 5a       	subi	r27, 0xA2	; 162
    1d2a:	62 0b       	sbc	r22, r18
    1d2c:	73 0b       	sbc	r23, r19
    1d2e:	84 0b       	sbc	r24, r20
    1d30:	e3 95       	inc	r30
    1d32:	9a 95       	dec	r25
    1d34:	72 f7       	brpl	.-36     	; 0x1d12 <__fp_rempio2+0x16>
    1d36:	80 38       	cpi	r24, 0x80	; 128
    1d38:	30 f4       	brcc	.+12     	; 0x1d46 <__fp_rempio2+0x4a>
    1d3a:	9a 95       	dec	r25
    1d3c:	bb 0f       	add	r27, r27
    1d3e:	66 1f       	adc	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 1f       	adc	r24, r24
    1d44:	d2 f7       	brpl	.-12     	; 0x1d3a <__fp_rempio2+0x3e>
    1d46:	90 48       	sbci	r25, 0x80	; 128
    1d48:	96 cf       	rjmp	.-212    	; 0x1c76 <__fp_mpack_finite>

00001d4a <__fp_round>:
    1d4a:	09 2e       	mov	r0, r25
    1d4c:	03 94       	inc	r0
    1d4e:	00 0c       	add	r0, r0
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <__fp_round+0xc>
    1d52:	88 23       	and	r24, r24
    1d54:	52 f0       	brmi	.+20     	; 0x1d6a <__fp_round+0x20>
    1d56:	bb 0f       	add	r27, r27
    1d58:	40 f4       	brcc	.+16     	; 0x1d6a <__fp_round+0x20>
    1d5a:	bf 2b       	or	r27, r31
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <__fp_round+0x18>
    1d5e:	60 ff       	sbrs	r22, 0
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <__fp_round+0x20>
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	8f 4f       	sbci	r24, 0xFF	; 255
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	08 95       	ret

00001d6c <__fp_sinus>:
    1d6c:	ef 93       	push	r30
    1d6e:	e0 ff       	sbrs	r30, 0
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <__fp_sinus+0x12>
    1d72:	a2 ea       	ldi	r26, 0xA2	; 162
    1d74:	2a ed       	ldi	r18, 0xDA	; 218
    1d76:	3f e0       	ldi	r19, 0x0F	; 15
    1d78:	49 ec       	ldi	r20, 0xC9	; 201
    1d7a:	5f eb       	ldi	r21, 0xBF	; 191
    1d7c:	aa dd       	rcall	.-1196   	; 0x18d2 <__addsf3x>
    1d7e:	e5 df       	rcall	.-54     	; 0x1d4a <__fp_round>
    1d80:	0f 90       	pop	r0
    1d82:	03 94       	inc	r0
    1d84:	01 fc       	sbrc	r0, 1
    1d86:	90 58       	subi	r25, 0x80	; 128
    1d88:	e9 eb       	ldi	r30, 0xB9	; 185
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	86 c1       	rjmp	.+780    	; 0x209a <__fp_powsodd>

00001d8e <__fp_split3>:
    1d8e:	57 fd       	sbrc	r21, 7
    1d90:	90 58       	subi	r25, 0x80	; 128
    1d92:	44 0f       	add	r20, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	59 f0       	breq	.+22     	; 0x1dae <__fp_splitA+0x10>
    1d98:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9a:	71 f0       	breq	.+28     	; 0x1db8 <__fp_splitA+0x1a>
    1d9c:	47 95       	ror	r20

00001d9e <__fp_splitA>:
    1d9e:	88 0f       	add	r24, r24
    1da0:	97 fb       	bst	r25, 7
    1da2:	99 1f       	adc	r25, r25
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <__fp_splitA+0x20>
    1da6:	9f 3f       	cpi	r25, 0xFF	; 255
    1da8:	79 f0       	breq	.+30     	; 0x1dc8 <__fp_splitA+0x2a>
    1daa:	87 95       	ror	r24
    1dac:	08 95       	ret
    1dae:	12 16       	cp	r1, r18
    1db0:	13 06       	cpc	r1, r19
    1db2:	14 06       	cpc	r1, r20
    1db4:	55 1f       	adc	r21, r21
    1db6:	f2 cf       	rjmp	.-28     	; 0x1d9c <__fp_split3+0xe>
    1db8:	46 95       	lsr	r20
    1dba:	f1 df       	rcall	.-30     	; 0x1d9e <__fp_splitA>
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <__fp_splitA+0x30>
    1dbe:	16 16       	cp	r1, r22
    1dc0:	17 06       	cpc	r1, r23
    1dc2:	18 06       	cpc	r1, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	f1 cf       	rjmp	.-30     	; 0x1daa <__fp_splitA+0xc>
    1dc8:	86 95       	lsr	r24
    1dca:	71 05       	cpc	r23, r1
    1dcc:	61 05       	cpc	r22, r1
    1dce:	08 94       	sec
    1dd0:	08 95       	ret

00001dd2 <__fp_zero>:
    1dd2:	e8 94       	clt

00001dd4 <__fp_szero>:
    1dd4:	bb 27       	eor	r27, r27
    1dd6:	66 27       	eor	r22, r22
    1dd8:	77 27       	eor	r23, r23
    1dda:	cb 01       	movw	r24, r22
    1ddc:	97 f9       	bld	r25, 7
    1dde:	08 95       	ret

00001de0 <__gesf2>:
    1de0:	1e df       	rcall	.-452    	; 0x1c1e <__fp_cmp>
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <__gesf2+0x6>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <inverse>:
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	9f e3       	ldi	r25, 0x3F	; 63
    1df4:	f0 cd       	rjmp	.-1056   	; 0x19d6 <__divsf3>

00001df6 <__mulsf3>:
    1df6:	0b d0       	rcall	.+22     	; 0x1e0e <__mulsf3x>
    1df8:	a8 cf       	rjmp	.-176    	; 0x1d4a <__fp_round>
    1dfa:	71 df       	rcall	.-286    	; 0x1cde <__fp_pscA>
    1dfc:	28 f0       	brcs	.+10     	; 0x1e08 <__mulsf3+0x12>
    1dfe:	76 df       	rcall	.-276    	; 0x1cec <__fp_pscB>
    1e00:	18 f0       	brcs	.+6      	; 0x1e08 <__mulsf3+0x12>
    1e02:	95 23       	and	r25, r21
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <__mulsf3+0x12>
    1e06:	2f cf       	rjmp	.-418    	; 0x1c66 <__fp_inf>
    1e08:	42 cf       	rjmp	.-380    	; 0x1c8e <__fp_nan>
    1e0a:	11 24       	eor	r1, r1
    1e0c:	e3 cf       	rjmp	.-58     	; 0x1dd4 <__fp_szero>

00001e0e <__mulsf3x>:
    1e0e:	bf df       	rcall	.-130    	; 0x1d8e <__fp_split3>
    1e10:	a0 f3       	brcs	.-24     	; 0x1dfa <__mulsf3+0x4>

00001e12 <__mulsf3_pse>:
    1e12:	95 9f       	mul	r25, r21
    1e14:	d1 f3       	breq	.-12     	; 0x1e0a <__mulsf3+0x14>
    1e16:	95 0f       	add	r25, r21
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	62 9f       	mul	r22, r18
    1e1e:	f0 01       	movw	r30, r0
    1e20:	72 9f       	mul	r23, r18
    1e22:	bb 27       	eor	r27, r27
    1e24:	f0 0d       	add	r31, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	63 9f       	mul	r22, r19
    1e2a:	aa 27       	eor	r26, r26
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	b1 1d       	adc	r27, r1
    1e30:	aa 1f       	adc	r26, r26
    1e32:	64 9f       	mul	r22, r20
    1e34:	66 27       	eor	r22, r22
    1e36:	b0 0d       	add	r27, r0
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	22 27       	eor	r18, r18
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	62 1f       	adc	r22, r18
    1e46:	73 9f       	mul	r23, r19
    1e48:	b0 0d       	add	r27, r0
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	62 1f       	adc	r22, r18
    1e4e:	83 9f       	mul	r24, r19
    1e50:	a0 0d       	add	r26, r0
    1e52:	61 1d       	adc	r22, r1
    1e54:	22 1f       	adc	r18, r18
    1e56:	74 9f       	mul	r23, r20
    1e58:	33 27       	eor	r19, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	23 1f       	adc	r18, r19
    1e60:	84 9f       	mul	r24, r20
    1e62:	60 0d       	add	r22, r0
    1e64:	21 1d       	adc	r18, r1
    1e66:	82 2f       	mov	r24, r18
    1e68:	76 2f       	mov	r23, r22
    1e6a:	6a 2f       	mov	r22, r26
    1e6c:	11 24       	eor	r1, r1
    1e6e:	9f 57       	subi	r25, 0x7F	; 127
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	8a f0       	brmi	.+34     	; 0x1e96 <__mulsf3_pse+0x84>
    1e74:	e1 f0       	breq	.+56     	; 0x1eae <__mulsf3_pse+0x9c>
    1e76:	88 23       	and	r24, r24
    1e78:	4a f0       	brmi	.+18     	; 0x1e8c <__mulsf3_pse+0x7a>
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	66 1f       	adc	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	50 40       	sbci	r21, 0x00	; 0
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <__mulsf3_pse+0x64>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	70 f0       	brcs	.+28     	; 0x1eae <__mulsf3_pse+0x9c>
    1e92:	e9 ce       	rjmp	.-558    	; 0x1c66 <__fp_inf>
    1e94:	9f cf       	rjmp	.-194    	; 0x1dd4 <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	ec f3       	brlt	.-6      	; 0x1e94 <__mulsf3_pse+0x82>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	dc f3       	brlt	.-10     	; 0x1e94 <__mulsf3_pse+0x82>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	e7 95       	ror	r30
    1eaa:	9f 5f       	subi	r25, 0xFF	; 255
    1eac:	c1 f7       	brne	.-16     	; 0x1e9e <__mulsf3_pse+0x8c>
    1eae:	fe 2b       	or	r31, r30
    1eb0:	88 0f       	add	r24, r24
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	96 95       	lsr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	97 f9       	bld	r25, 7
    1eba:	08 95       	ret

00001ebc <pow>:
    1ebc:	fa 01       	movw	r30, r20
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	30 96       	adiw	r30, 0x00	; 0
    1ec4:	21 05       	cpc	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	99 f1       	breq	.+102    	; 0x1f30 <pow+0x74>
    1eca:	61 15       	cp	r22, r1
    1ecc:	71 05       	cpc	r23, r1
    1ece:	61 f4       	brne	.+24     	; 0x1ee8 <pow+0x2c>
    1ed0:	80 38       	cpi	r24, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	9b 07       	cpc	r25, r27
    1ed6:	49 f1       	breq	.+82     	; 0x1f2a <pow+0x6e>
    1ed8:	68 94       	set
    1eda:	90 38       	cpi	r25, 0x80	; 128
    1edc:	81 05       	cpc	r24, r1
    1ede:	61 f0       	breq	.+24     	; 0x1ef8 <pow+0x3c>
    1ee0:	80 38       	cpi	r24, 0x80	; 128
    1ee2:	bf ef       	ldi	r27, 0xFF	; 255
    1ee4:	9b 07       	cpc	r25, r27
    1ee6:	41 f0       	breq	.+16     	; 0x1ef8 <pow+0x3c>
    1ee8:	99 23       	and	r25, r25
    1eea:	42 f5       	brpl	.+80     	; 0x1f3c <pow+0x80>
    1eec:	ff 3f       	cpi	r31, 0xFF	; 255
    1eee:	e1 05       	cpc	r30, r1
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	21 05       	cpc	r18, r1
    1ef4:	11 f1       	breq	.+68     	; 0x1f3a <pow+0x7e>
    1ef6:	e8 94       	clt
    1ef8:	08 94       	sec
    1efa:	e7 95       	ror	r30
    1efc:	d9 01       	movw	r26, r18
    1efe:	aa 23       	and	r26, r26
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <pow+0x50>
    1f02:	ab 2f       	mov	r26, r27
    1f04:	be 2f       	mov	r27, r30
    1f06:	f8 5f       	subi	r31, 0xF8	; 248
    1f08:	d0 f3       	brcs	.-12     	; 0x1efe <pow+0x42>
    1f0a:	10 c0       	rjmp	.+32     	; 0x1f2c <pow+0x70>
    1f0c:	ff 5f       	subi	r31, 0xFF	; 255
    1f0e:	70 f4       	brcc	.+28     	; 0x1f2c <pow+0x70>
    1f10:	a6 95       	lsr	r26
    1f12:	e0 f7       	brcc	.-8      	; 0x1f0c <pow+0x50>
    1f14:	f7 39       	cpi	r31, 0x97	; 151
    1f16:	50 f0       	brcs	.+20     	; 0x1f2c <pow+0x70>
    1f18:	19 f0       	breq	.+6      	; 0x1f20 <pow+0x64>
    1f1a:	ff 3a       	cpi	r31, 0xAF	; 175
    1f1c:	38 f4       	brcc	.+14     	; 0x1f2c <pow+0x70>
    1f1e:	9f 77       	andi	r25, 0x7F	; 127
    1f20:	9f 93       	push	r25
    1f22:	0c d0       	rcall	.+24     	; 0x1f3c <pow+0x80>
    1f24:	0f 90       	pop	r0
    1f26:	07 fc       	sbrc	r0, 7
    1f28:	90 58       	subi	r25, 0x80	; 128
    1f2a:	08 95       	ret
    1f2c:	3e f0       	brts	.+14     	; 0x1f3c <pow+0x80>
    1f2e:	af ce       	rjmp	.-674    	; 0x1c8e <__fp_nan>
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	80 e8       	ldi	r24, 0x80	; 128
    1f36:	9f e3       	ldi	r25, 0x3F	; 63
    1f38:	08 95       	ret
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	9f 77       	andi	r25, 0x7F	; 127
    1f3e:	5f 93       	push	r21
    1f40:	4f 93       	push	r20
    1f42:	3f 93       	push	r19
    1f44:	2f 93       	push	r18
    1f46:	f5 d0       	rcall	.+490    	; 0x2132 <log>
    1f48:	2f 91       	pop	r18
    1f4a:	3f 91       	pop	r19
    1f4c:	4f 91       	pop	r20
    1f4e:	5f 91       	pop	r21
    1f50:	52 df       	rcall	.-348    	; 0x1df6 <__mulsf3>
    1f52:	70 c0       	rjmp	.+224    	; 0x2034 <exp>

00001f54 <sin>:
    1f54:	9f 93       	push	r25
    1f56:	d2 de       	rcall	.-604    	; 0x1cfc <__fp_rempio2>
    1f58:	0f 90       	pop	r0
    1f5a:	07 fc       	sbrc	r0, 7
    1f5c:	ee 5f       	subi	r30, 0xFE	; 254
    1f5e:	06 cf       	rjmp	.-500    	; 0x1d6c <__fp_sinus>
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <sin+0x12>
    1f62:	0e f4       	brtc	.+2      	; 0x1f66 <sin+0x12>
    1f64:	94 ce       	rjmp	.-728    	; 0x1c8e <__fp_nan>
    1f66:	85 ce       	rjmp	.-758    	; 0x1c72 <__fp_mpack>

00001f68 <sqrt>:
    1f68:	1a df       	rcall	.-460    	; 0x1d9e <__fp_splitA>
    1f6a:	d0 f3       	brcs	.-12     	; 0x1f60 <sin+0xc>
    1f6c:	99 23       	and	r25, r25
    1f6e:	d9 f3       	breq	.-10     	; 0x1f66 <sin+0x12>
    1f70:	ce f3       	brts	.-14     	; 0x1f64 <sin+0x10>
    1f72:	9f 57       	subi	r25, 0x7F	; 127
    1f74:	55 0b       	sbc	r21, r21
    1f76:	87 ff       	sbrs	r24, 7
    1f78:	89 d0       	rcall	.+274    	; 0x208c <__fp_norm2>
    1f7a:	00 24       	eor	r0, r0
    1f7c:	a0 e6       	ldi	r26, 0x60	; 96
    1f7e:	40 ea       	ldi	r20, 0xA0	; 160
    1f80:	90 01       	movw	r18, r0
    1f82:	80 58       	subi	r24, 0x80	; 128
    1f84:	56 95       	lsr	r21
    1f86:	97 95       	ror	r25
    1f88:	28 f4       	brcc	.+10     	; 0x1f94 <sqrt+0x2c>
    1f8a:	80 5c       	subi	r24, 0xC0	; 192
    1f8c:	66 0f       	add	r22, r22
    1f8e:	77 1f       	adc	r23, r23
    1f90:	88 1f       	adc	r24, r24
    1f92:	20 f0       	brcs	.+8      	; 0x1f9c <sqrt+0x34>
    1f94:	26 17       	cp	r18, r22
    1f96:	37 07       	cpc	r19, r23
    1f98:	48 07       	cpc	r20, r24
    1f9a:	30 f4       	brcc	.+12     	; 0x1fa8 <sqrt+0x40>
    1f9c:	62 1b       	sub	r22, r18
    1f9e:	73 0b       	sbc	r23, r19
    1fa0:	84 0b       	sbc	r24, r20
    1fa2:	20 29       	or	r18, r0
    1fa4:	31 29       	or	r19, r1
    1fa6:	4a 2b       	or	r20, r26
    1fa8:	a6 95       	lsr	r26
    1faa:	17 94       	ror	r1
    1fac:	07 94       	ror	r0
    1fae:	20 25       	eor	r18, r0
    1fb0:	31 25       	eor	r19, r1
    1fb2:	4a 27       	eor	r20, r26
    1fb4:	58 f7       	brcc	.-42     	; 0x1f8c <sqrt+0x24>
    1fb6:	66 0f       	add	r22, r22
    1fb8:	77 1f       	adc	r23, r23
    1fba:	88 1f       	adc	r24, r24
    1fbc:	20 f0       	brcs	.+8      	; 0x1fc6 <sqrt+0x5e>
    1fbe:	26 17       	cp	r18, r22
    1fc0:	37 07       	cpc	r19, r23
    1fc2:	48 07       	cpc	r20, r24
    1fc4:	30 f4       	brcc	.+12     	; 0x1fd2 <sqrt+0x6a>
    1fc6:	62 0b       	sbc	r22, r18
    1fc8:	73 0b       	sbc	r23, r19
    1fca:	84 0b       	sbc	r24, r20
    1fcc:	20 0d       	add	r18, r0
    1fce:	31 1d       	adc	r19, r1
    1fd0:	41 1d       	adc	r20, r1
    1fd2:	a0 95       	com	r26
    1fd4:	81 f7       	brne	.-32     	; 0x1fb6 <sqrt+0x4e>
    1fd6:	b9 01       	movw	r22, r18
    1fd8:	84 2f       	mov	r24, r20
    1fda:	91 58       	subi	r25, 0x81	; 129
    1fdc:	88 0f       	add	r24, r24
    1fde:	96 95       	lsr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	08 95       	ret

00001fe4 <square>:
    1fe4:	9b 01       	movw	r18, r22
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	06 cf       	rjmp	.-500    	; 0x1df6 <__mulsf3>

00001fea <tan>:
    1fea:	df 93       	push	r29
    1fec:	d9 2f       	mov	r29, r25
    1fee:	86 de       	rcall	.-756    	; 0x1cfc <__fp_rempio2>
    1ff0:	e6 95       	lsr	r30
    1ff2:	d7 95       	ror	r29
    1ff4:	2a ed       	ldi	r18, 0xDA	; 218
    1ff6:	3f e0       	ldi	r19, 0x0F	; 15
    1ff8:	49 e4       	ldi	r20, 0x49	; 73
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	b3 3a       	cpi	r27, 0xA3	; 163
    1ffe:	62 07       	cpc	r22, r18
    2000:	73 07       	cpc	r23, r19
    2002:	84 07       	cpc	r24, r20
    2004:	95 07       	cpc	r25, r21
    2006:	d7 95       	ror	r29
    2008:	2a f0       	brmi	.+10     	; 0x2014 <tan+0x2a>
    200a:	a2 ea       	ldi	r26, 0xA2	; 162
    200c:	49 ec       	ldi	r20, 0xC9	; 201
    200e:	90 68       	ori	r25, 0x80	; 128
    2010:	60 dc       	rcall	.-1856   	; 0x18d2 <__addsf3x>
    2012:	9b de       	rcall	.-714    	; 0x1d4a <__fp_round>
    2014:	e7 ed       	ldi	r30, 0xD7	; 215
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	40 d0       	rcall	.+128    	; 0x209a <__fp_powsodd>
    201a:	dd 0f       	add	r29, r29
    201c:	0b f0       	brvs	.+2      	; 0x2020 <tan+0x36>
    201e:	e4 de       	rcall	.-568    	; 0x1de8 <inverse>
    2020:	dd 0f       	add	r29, r29
    2022:	0b f4       	brvc	.+2      	; 0x2026 <tan+0x3c>
    2024:	90 58       	subi	r25, 0x80	; 128
    2026:	df 91       	pop	r29
    2028:	08 95       	ret
    202a:	19 f4       	brne	.+6      	; 0x2032 <tan+0x48>
    202c:	0e f0       	brts	.+2      	; 0x2030 <tan+0x46>
    202e:	1b ce       	rjmp	.-970    	; 0x1c66 <__fp_inf>
    2030:	d0 ce       	rjmp	.-608    	; 0x1dd2 <__fp_zero>
    2032:	2d ce       	rjmp	.-934    	; 0x1c8e <__fp_nan>

00002034 <exp>:
    2034:	b4 de       	rcall	.-664    	; 0x1d9e <__fp_splitA>
    2036:	c8 f3       	brcs	.-14     	; 0x202a <tan+0x40>
    2038:	96 38       	cpi	r25, 0x86	; 134
    203a:	c0 f7       	brcc	.-16     	; 0x202c <tan+0x42>
    203c:	07 f8       	bld	r0, 7
    203e:	0f 92       	push	r0
    2040:	e8 94       	clt
    2042:	2b e3       	ldi	r18, 0x3B	; 59
    2044:	3a ea       	ldi	r19, 0xAA	; 170
    2046:	48 eb       	ldi	r20, 0xB8	; 184
    2048:	5f e7       	ldi	r21, 0x7F	; 127
    204a:	e3 de       	rcall	.-570    	; 0x1e12 <__mulsf3_pse>
    204c:	0f 92       	push	r0
    204e:	0f 92       	push	r0
    2050:	0f 92       	push	r0
    2052:	4d b7       	in	r20, 0x3d	; 61
    2054:	5e b7       	in	r21, 0x3e	; 62
    2056:	0f 92       	push	r0
    2058:	ac d0       	rcall	.+344    	; 0x21b2 <modf>
    205a:	ea ef       	ldi	r30, 0xFA	; 250
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	1a de       	rcall	.-972    	; 0x1c94 <__fp_powser>
    2060:	4f 91       	pop	r20
    2062:	5f 91       	pop	r21
    2064:	ef 91       	pop	r30
    2066:	ff 91       	pop	r31
    2068:	e5 95       	asr	r30
    206a:	ee 1f       	adc	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	49 f0       	breq	.+18     	; 0x2082 <exp+0x4e>
    2070:	fe 57       	subi	r31, 0x7E	; 126
    2072:	e0 68       	ori	r30, 0x80	; 128
    2074:	44 27       	eor	r20, r20
    2076:	ee 0f       	add	r30, r30
    2078:	44 1f       	adc	r20, r20
    207a:	fa 95       	dec	r31
    207c:	e1 f7       	brne	.-8      	; 0x2076 <exp+0x42>
    207e:	41 95       	neg	r20
    2080:	55 0b       	sbc	r21, r21
    2082:	1e d0       	rcall	.+60     	; 0x20c0 <ldexp>
    2084:	0f 90       	pop	r0
    2086:	07 fe       	sbrs	r0, 7
    2088:	af ce       	rjmp	.-674    	; 0x1de8 <inverse>
    208a:	08 95       	ret

0000208c <__fp_norm2>:
    208c:	91 50       	subi	r25, 0x01	; 1
    208e:	50 40       	sbci	r21, 0x00	; 0
    2090:	66 0f       	add	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	d2 f7       	brpl	.-12     	; 0x208c <__fp_norm2>
    2098:	08 95       	ret

0000209a <__fp_powsodd>:
    209a:	9f 93       	push	r25
    209c:	8f 93       	push	r24
    209e:	7f 93       	push	r23
    20a0:	6f 93       	push	r22
    20a2:	ff 93       	push	r31
    20a4:	ef 93       	push	r30
    20a6:	9b 01       	movw	r18, r22
    20a8:	ac 01       	movw	r20, r24
    20aa:	a5 de       	rcall	.-694    	; 0x1df6 <__mulsf3>
    20ac:	ef 91       	pop	r30
    20ae:	ff 91       	pop	r31
    20b0:	f1 dd       	rcall	.-1054   	; 0x1c94 <__fp_powser>
    20b2:	2f 91       	pop	r18
    20b4:	3f 91       	pop	r19
    20b6:	4f 91       	pop	r20
    20b8:	5f 91       	pop	r21
    20ba:	9d ce       	rjmp	.-710    	; 0x1df6 <__mulsf3>
    20bc:	d4 cd       	rjmp	.-1112   	; 0x1c66 <__fp_inf>
    20be:	d9 cd       	rjmp	.-1102   	; 0x1c72 <__fp_mpack>

000020c0 <ldexp>:
    20c0:	6e de       	rcall	.-804    	; 0x1d9e <__fp_splitA>
    20c2:	e8 f3       	brcs	.-6      	; 0x20be <__fp_powsodd+0x24>
    20c4:	99 23       	and	r25, r25
    20c6:	d9 f3       	breq	.-10     	; 0x20be <__fp_powsodd+0x24>
    20c8:	94 0f       	add	r25, r20
    20ca:	51 1d       	adc	r21, r1
    20cc:	bb f3       	brvs	.-18     	; 0x20bc <__fp_powsodd+0x22>
    20ce:	91 50       	subi	r25, 0x01	; 1
    20d0:	50 40       	sbci	r21, 0x00	; 0
    20d2:	94 f0       	brlt	.+36     	; 0x20f8 <ldexp+0x38>
    20d4:	59 f0       	breq	.+22     	; 0x20ec <ldexp+0x2c>
    20d6:	88 23       	and	r24, r24
    20d8:	32 f0       	brmi	.+12     	; 0x20e6 <ldexp+0x26>
    20da:	66 0f       	add	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	91 50       	subi	r25, 0x01	; 1
    20e2:	50 40       	sbci	r21, 0x00	; 0
    20e4:	c1 f7       	brne	.-16     	; 0x20d6 <ldexp+0x16>
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	51 05       	cpc	r21, r1
    20ea:	44 f7       	brge	.-48     	; 0x20bc <__fp_powsodd+0x22>
    20ec:	88 0f       	add	r24, r24
    20ee:	91 1d       	adc	r25, r1
    20f0:	96 95       	lsr	r25
    20f2:	87 95       	ror	r24
    20f4:	97 f9       	bld	r25, 7
    20f6:	08 95       	ret
    20f8:	5f 3f       	cpi	r21, 0xFF	; 255
    20fa:	ac f0       	brlt	.+42     	; 0x2126 <ldexp+0x66>
    20fc:	98 3e       	cpi	r25, 0xE8	; 232
    20fe:	9c f0       	brlt	.+38     	; 0x2126 <ldexp+0x66>
    2100:	bb 27       	eor	r27, r27
    2102:	86 95       	lsr	r24
    2104:	77 95       	ror	r23
    2106:	67 95       	ror	r22
    2108:	b7 95       	ror	r27
    210a:	08 f4       	brcc	.+2      	; 0x210e <ldexp+0x4e>
    210c:	b1 60       	ori	r27, 0x01	; 1
    210e:	93 95       	inc	r25
    2110:	c1 f7       	brne	.-16     	; 0x2102 <ldexp+0x42>
    2112:	bb 0f       	add	r27, r27
    2114:	58 f7       	brcc	.-42     	; 0x20ec <ldexp+0x2c>
    2116:	11 f4       	brne	.+4      	; 0x211c <ldexp+0x5c>
    2118:	60 ff       	sbrs	r22, 0
    211a:	e8 cf       	rjmp	.-48     	; 0x20ec <ldexp+0x2c>
    211c:	6f 5f       	subi	r22, 0xFF	; 255
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	8f 4f       	sbci	r24, 0xFF	; 255
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	e3 cf       	rjmp	.-58     	; 0x20ec <ldexp+0x2c>
    2126:	56 ce       	rjmp	.-852    	; 0x1dd4 <__fp_szero>
    2128:	0e f0       	brts	.+2      	; 0x212c <ldexp+0x6c>
    212a:	a3 cd       	rjmp	.-1210   	; 0x1c72 <__fp_mpack>
    212c:	b0 cd       	rjmp	.-1184   	; 0x1c8e <__fp_nan>
    212e:	68 94       	set
    2130:	9a cd       	rjmp	.-1228   	; 0x1c66 <__fp_inf>

00002132 <log>:
    2132:	35 de       	rcall	.-918    	; 0x1d9e <__fp_splitA>
    2134:	c8 f3       	brcs	.-14     	; 0x2128 <ldexp+0x68>
    2136:	99 23       	and	r25, r25
    2138:	d1 f3       	breq	.-12     	; 0x212e <ldexp+0x6e>
    213a:	c6 f3       	brts	.-16     	; 0x212c <ldexp+0x6c>
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	1f 93       	push	r17
    2142:	0f 93       	push	r16
    2144:	ff 92       	push	r15
    2146:	c9 2f       	mov	r28, r25
    2148:	dd 27       	eor	r29, r29
    214a:	88 23       	and	r24, r24
    214c:	2a f0       	brmi	.+10     	; 0x2158 <log+0x26>
    214e:	21 97       	sbiw	r28, 0x01	; 1
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	da f7       	brpl	.-10     	; 0x214e <log+0x1c>
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f eb       	ldi	r21, 0xBF	; 191
    2160:	9f e3       	ldi	r25, 0x3F	; 63
    2162:	88 39       	cpi	r24, 0x98	; 152
    2164:	20 f0       	brcs	.+8      	; 0x216e <log+0x3c>
    2166:	80 3e       	cpi	r24, 0xE0	; 224
    2168:	30 f0       	brcs	.+12     	; 0x2176 <log+0x44>
    216a:	21 96       	adiw	r28, 0x01	; 1
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	a0 db       	rcall	.-2240   	; 0x18b0 <__addsf3>
    2170:	e2 e2       	ldi	r30, 0x22	; 34
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	03 c0       	rjmp	.+6      	; 0x217c <log+0x4a>
    2176:	9c db       	rcall	.-2248   	; 0x18b0 <__addsf3>
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	8b dd       	rcall	.-1258   	; 0x1c94 <__fp_powser>
    217e:	8b 01       	movw	r16, r22
    2180:	be 01       	movw	r22, r28
    2182:	ec 01       	movw	r28, r24
    2184:	fb 2e       	mov	r15, r27
    2186:	6f 57       	subi	r22, 0x7F	; 127
    2188:	71 09       	sbc	r23, r1
    218a:	75 95       	asr	r23
    218c:	77 1f       	adc	r23, r23
    218e:	88 0b       	sbc	r24, r24
    2190:	99 0b       	sbc	r25, r25
    2192:	bc dc       	rcall	.-1672   	; 0x1b0c <__floatsisf>
    2194:	28 e1       	ldi	r18, 0x18	; 24
    2196:	32 e7       	ldi	r19, 0x72	; 114
    2198:	41 e3       	ldi	r20, 0x31	; 49
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	38 de       	rcall	.-912    	; 0x1e0e <__mulsf3x>
    219e:	af 2d       	mov	r26, r15
    21a0:	98 01       	movw	r18, r16
    21a2:	ae 01       	movw	r20, r28
    21a4:	ff 90       	pop	r15
    21a6:	0f 91       	pop	r16
    21a8:	1f 91       	pop	r17
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	91 db       	rcall	.-2270   	; 0x18d2 <__addsf3x>
    21b0:	cc cd       	rjmp	.-1128   	; 0x1d4a <__fp_round>

000021b2 <modf>:
    21b2:	fa 01       	movw	r30, r20
    21b4:	dc 01       	movw	r26, r24
    21b6:	aa 0f       	add	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	bf 57       	subi	r27, 0x7F	; 127
    21c0:	28 f4       	brcc	.+10     	; 0x21cc <modf+0x1a>
    21c2:	22 27       	eor	r18, r18
    21c4:	33 27       	eor	r19, r19
    21c6:	44 27       	eor	r20, r20
    21c8:	50 78       	andi	r21, 0x80	; 128
    21ca:	1f c0       	rjmp	.+62     	; 0x220a <modf+0x58>
    21cc:	b7 51       	subi	r27, 0x17	; 23
    21ce:	88 f4       	brcc	.+34     	; 0x21f2 <modf+0x40>
    21d0:	ab 2f       	mov	r26, r27
    21d2:	00 24       	eor	r0, r0
    21d4:	46 95       	lsr	r20
    21d6:	37 95       	ror	r19
    21d8:	27 95       	ror	r18
    21da:	01 1c       	adc	r0, r1
    21dc:	a3 95       	inc	r26
    21de:	d2 f3       	brmi	.-12     	; 0x21d4 <modf+0x22>
    21e0:	00 20       	and	r0, r0
    21e2:	69 f0       	breq	.+26     	; 0x21fe <modf+0x4c>
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	44 1f       	adc	r20, r20
    21ea:	b3 95       	inc	r27
    21ec:	da f3       	brmi	.-10     	; 0x21e4 <modf+0x32>
    21ee:	0d d0       	rcall	.+26     	; 0x220a <modf+0x58>
    21f0:	5e cb       	rjmp	.-2372   	; 0x18ae <__subsf3>
    21f2:	61 30       	cpi	r22, 0x01	; 1
    21f4:	71 05       	cpc	r23, r1
    21f6:	a0 e8       	ldi	r26, 0x80	; 128
    21f8:	8a 07       	cpc	r24, r26
    21fa:	b9 46       	sbci	r27, 0x69	; 105
    21fc:	30 f4       	brcc	.+12     	; 0x220a <modf+0x58>
    21fe:	9b 01       	movw	r18, r22
    2200:	ac 01       	movw	r20, r24
    2202:	66 27       	eor	r22, r22
    2204:	77 27       	eor	r23, r23
    2206:	88 27       	eor	r24, r24
    2208:	90 78       	andi	r25, 0x80	; 128
    220a:	30 96       	adiw	r30, 0x00	; 0
    220c:	21 f0       	breq	.+8      	; 0x2216 <modf+0x64>
    220e:	20 83       	st	Z, r18
    2210:	31 83       	std	Z+1, r19	; 0x01
    2212:	42 83       	std	Z+2, r20	; 0x02
    2214:	53 83       	std	Z+3, r21	; 0x03
    2216:	08 95       	ret

00002218 <vfprintf>:
    2218:	2f 92       	push	r2
    221a:	3f 92       	push	r3
    221c:	4f 92       	push	r4
    221e:	5f 92       	push	r5
    2220:	6f 92       	push	r6
    2222:	7f 92       	push	r7
    2224:	8f 92       	push	r8
    2226:	9f 92       	push	r9
    2228:	af 92       	push	r10
    222a:	bf 92       	push	r11
    222c:	cf 92       	push	r12
    222e:	df 92       	push	r13
    2230:	ef 92       	push	r14
    2232:	ff 92       	push	r15
    2234:	0f 93       	push	r16
    2236:	1f 93       	push	r17
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	63 97       	sbiw	r28, 0x13	; 19
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	6c 01       	movw	r12, r24
    224e:	4b 01       	movw	r8, r22
    2250:	2a 01       	movw	r4, r20
    2252:	fc 01       	movw	r30, r24
    2254:	17 82       	std	Z+7, r1	; 0x07
    2256:	16 82       	std	Z+6, r1	; 0x06
    2258:	83 81       	ldd	r24, Z+3	; 0x03
    225a:	81 ff       	sbrs	r24, 1
    225c:	29 c3       	rjmp	.+1618   	; 0x28b0 <vfprintf+0x698>
    225e:	ae 01       	movw	r20, r28
    2260:	4f 5f       	subi	r20, 0xFF	; 255
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	3a 01       	movw	r6, r20
    2266:	f6 01       	movw	r30, r12
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	f4 01       	movw	r30, r8
    226c:	93 fd       	sbrc	r25, 3
    226e:	85 91       	lpm	r24, Z+
    2270:	93 ff       	sbrs	r25, 3
    2272:	81 91       	ld	r24, Z+
    2274:	4f 01       	movw	r8, r30
    2276:	88 23       	and	r24, r24
    2278:	09 f4       	brne	.+2      	; 0x227c <vfprintf+0x64>
    227a:	16 c3       	rjmp	.+1580   	; 0x28a8 <vfprintf+0x690>
    227c:	85 32       	cpi	r24, 0x25	; 37
    227e:	39 f4       	brne	.+14     	; 0x228e <vfprintf+0x76>
    2280:	93 fd       	sbrc	r25, 3
    2282:	85 91       	lpm	r24, Z+
    2284:	93 ff       	sbrs	r25, 3
    2286:	81 91       	ld	r24, Z+
    2288:	4f 01       	movw	r8, r30
    228a:	85 32       	cpi	r24, 0x25	; 37
    228c:	31 f4       	brne	.+12     	; 0x229a <vfprintf+0x82>
    228e:	b6 01       	movw	r22, r12
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	ad d5       	rcall	.+2906   	; 0x2dee <fputc>
    2294:	52 01       	movw	r10, r4
    2296:	25 01       	movw	r4, r10
    2298:	e6 cf       	rjmp	.-52     	; 0x2266 <vfprintf+0x4e>
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	f1 2c       	mov	r15, r1
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	20 32       	cpi	r18, 0x20	; 32
    22a2:	a0 f4       	brcc	.+40     	; 0x22cc <vfprintf+0xb4>
    22a4:	8b 32       	cpi	r24, 0x2B	; 43
    22a6:	69 f0       	breq	.+26     	; 0x22c2 <vfprintf+0xaa>
    22a8:	30 f4       	brcc	.+12     	; 0x22b6 <vfprintf+0x9e>
    22aa:	80 32       	cpi	r24, 0x20	; 32
    22ac:	59 f0       	breq	.+22     	; 0x22c4 <vfprintf+0xac>
    22ae:	83 32       	cpi	r24, 0x23	; 35
    22b0:	69 f4       	brne	.+26     	; 0x22cc <vfprintf+0xb4>
    22b2:	20 61       	ori	r18, 0x10	; 16
    22b4:	2c c0       	rjmp	.+88     	; 0x230e <vfprintf+0xf6>
    22b6:	8d 32       	cpi	r24, 0x2D	; 45
    22b8:	39 f0       	breq	.+14     	; 0x22c8 <vfprintf+0xb0>
    22ba:	80 33       	cpi	r24, 0x30	; 48
    22bc:	39 f4       	brne	.+14     	; 0x22cc <vfprintf+0xb4>
    22be:	21 60       	ori	r18, 0x01	; 1
    22c0:	26 c0       	rjmp	.+76     	; 0x230e <vfprintf+0xf6>
    22c2:	22 60       	ori	r18, 0x02	; 2
    22c4:	24 60       	ori	r18, 0x04	; 4
    22c6:	23 c0       	rjmp	.+70     	; 0x230e <vfprintf+0xf6>
    22c8:	28 60       	ori	r18, 0x08	; 8
    22ca:	21 c0       	rjmp	.+66     	; 0x230e <vfprintf+0xf6>
    22cc:	27 fd       	sbrc	r18, 7
    22ce:	27 c0       	rjmp	.+78     	; 0x231e <vfprintf+0x106>
    22d0:	30 ed       	ldi	r19, 0xD0	; 208
    22d2:	38 0f       	add	r19, r24
    22d4:	3a 30       	cpi	r19, 0x0A	; 10
    22d6:	78 f4       	brcc	.+30     	; 0x22f6 <vfprintf+0xde>
    22d8:	26 ff       	sbrs	r18, 6
    22da:	06 c0       	rjmp	.+12     	; 0x22e8 <vfprintf+0xd0>
    22dc:	fa e0       	ldi	r31, 0x0A	; 10
    22de:	1f 9f       	mul	r17, r31
    22e0:	30 0d       	add	r19, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	13 2f       	mov	r17, r19
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <vfprintf+0xf6>
    22e8:	4a e0       	ldi	r20, 0x0A	; 10
    22ea:	f4 9e       	mul	r15, r20
    22ec:	30 0d       	add	r19, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	f3 2e       	mov	r15, r19
    22f2:	20 62       	ori	r18, 0x20	; 32
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <vfprintf+0xf6>
    22f6:	8e 32       	cpi	r24, 0x2E	; 46
    22f8:	21 f4       	brne	.+8      	; 0x2302 <vfprintf+0xea>
    22fa:	26 fd       	sbrc	r18, 6
    22fc:	d5 c2       	rjmp	.+1450   	; 0x28a8 <vfprintf+0x690>
    22fe:	20 64       	ori	r18, 0x40	; 64
    2300:	06 c0       	rjmp	.+12     	; 0x230e <vfprintf+0xf6>
    2302:	8c 36       	cpi	r24, 0x6C	; 108
    2304:	11 f4       	brne	.+4      	; 0x230a <vfprintf+0xf2>
    2306:	20 68       	ori	r18, 0x80	; 128
    2308:	02 c0       	rjmp	.+4      	; 0x230e <vfprintf+0xf6>
    230a:	88 36       	cpi	r24, 0x68	; 104
    230c:	41 f4       	brne	.+16     	; 0x231e <vfprintf+0x106>
    230e:	f4 01       	movw	r30, r8
    2310:	93 fd       	sbrc	r25, 3
    2312:	85 91       	lpm	r24, Z+
    2314:	93 ff       	sbrs	r25, 3
    2316:	81 91       	ld	r24, Z+
    2318:	4f 01       	movw	r8, r30
    231a:	81 11       	cpse	r24, r1
    231c:	c1 cf       	rjmp	.-126    	; 0x22a0 <vfprintf+0x88>
    231e:	9b eb       	ldi	r25, 0xBB	; 187
    2320:	98 0f       	add	r25, r24
    2322:	93 30       	cpi	r25, 0x03	; 3
    2324:	18 f4       	brcc	.+6      	; 0x232c <vfprintf+0x114>
    2326:	20 61       	ori	r18, 0x10	; 16
    2328:	80 5e       	subi	r24, 0xE0	; 224
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <vfprintf+0x120>
    232c:	9b e9       	ldi	r25, 0x9B	; 155
    232e:	98 0f       	add	r25, r24
    2330:	93 30       	cpi	r25, 0x03	; 3
    2332:	08 f0       	brcs	.+2      	; 0x2336 <vfprintf+0x11e>
    2334:	64 c1       	rjmp	.+712    	; 0x25fe <vfprintf+0x3e6>
    2336:	2f 7e       	andi	r18, 0xEF	; 239
    2338:	26 ff       	sbrs	r18, 6
    233a:	16 e0       	ldi	r17, 0x06	; 6
    233c:	2f 73       	andi	r18, 0x3F	; 63
    233e:	32 2e       	mov	r3, r18
    2340:	85 36       	cpi	r24, 0x65	; 101
    2342:	19 f4       	brne	.+6      	; 0x234a <vfprintf+0x132>
    2344:	20 64       	ori	r18, 0x40	; 64
    2346:	32 2e       	mov	r3, r18
    2348:	08 c0       	rjmp	.+16     	; 0x235a <vfprintf+0x142>
    234a:	86 36       	cpi	r24, 0x66	; 102
    234c:	21 f4       	brne	.+8      	; 0x2356 <vfprintf+0x13e>
    234e:	f2 2f       	mov	r31, r18
    2350:	f0 68       	ori	r31, 0x80	; 128
    2352:	3f 2e       	mov	r3, r31
    2354:	02 c0       	rjmp	.+4      	; 0x235a <vfprintf+0x142>
    2356:	11 11       	cpse	r17, r1
    2358:	11 50       	subi	r17, 0x01	; 1
    235a:	37 fe       	sbrs	r3, 7
    235c:	07 c0       	rjmp	.+14     	; 0x236c <vfprintf+0x154>
    235e:	1c 33       	cpi	r17, 0x3C	; 60
    2360:	50 f4       	brcc	.+20     	; 0x2376 <vfprintf+0x15e>
    2362:	ee 24       	eor	r14, r14
    2364:	e3 94       	inc	r14
    2366:	e1 0e       	add	r14, r17
    2368:	27 e0       	ldi	r18, 0x07	; 7
    236a:	0b c0       	rjmp	.+22     	; 0x2382 <vfprintf+0x16a>
    236c:	18 30       	cpi	r17, 0x08	; 8
    236e:	38 f0       	brcs	.+14     	; 0x237e <vfprintf+0x166>
    2370:	27 e0       	ldi	r18, 0x07	; 7
    2372:	17 e0       	ldi	r17, 0x07	; 7
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <vfprintf+0x168>
    2376:	27 e0       	ldi	r18, 0x07	; 7
    2378:	4c e3       	ldi	r20, 0x3C	; 60
    237a:	e4 2e       	mov	r14, r20
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <vfprintf+0x16a>
    237e:	21 2f       	mov	r18, r17
    2380:	e1 2c       	mov	r14, r1
    2382:	52 01       	movw	r10, r4
    2384:	44 e0       	ldi	r20, 0x04	; 4
    2386:	a4 0e       	add	r10, r20
    2388:	b1 1c       	adc	r11, r1
    238a:	f2 01       	movw	r30, r4
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	0e 2d       	mov	r16, r14
    2396:	a3 01       	movw	r20, r6
    2398:	35 d4       	rcall	.+2154   	; 0x2c04 <__ftoa_engine>
    239a:	2c 01       	movw	r4, r24
    239c:	09 81       	ldd	r16, Y+1	; 0x01
    239e:	00 ff       	sbrs	r16, 0
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <vfprintf+0x18e>
    23a2:	03 ff       	sbrs	r16, 3
    23a4:	07 c0       	rjmp	.+14     	; 0x23b4 <vfprintf+0x19c>
    23a6:	31 fc       	sbrc	r3, 1
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <vfprintf+0x1a2>
    23aa:	32 fe       	sbrs	r3, 2
    23ac:	09 c0       	rjmp	.+18     	; 0x23c0 <vfprintf+0x1a8>
    23ae:	30 e2       	ldi	r19, 0x20	; 32
    23b0:	23 2e       	mov	r2, r19
    23b2:	07 c0       	rjmp	.+14     	; 0x23c2 <vfprintf+0x1aa>
    23b4:	2d e2       	ldi	r18, 0x2D	; 45
    23b6:	22 2e       	mov	r2, r18
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <vfprintf+0x1aa>
    23ba:	9b e2       	ldi	r25, 0x2B	; 43
    23bc:	29 2e       	mov	r2, r25
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <vfprintf+0x1aa>
    23c0:	21 2c       	mov	r2, r1
    23c2:	80 2f       	mov	r24, r16
    23c4:	8c 70       	andi	r24, 0x0C	; 12
    23c6:	19 f0       	breq	.+6      	; 0x23ce <vfprintf+0x1b6>
    23c8:	21 10       	cpse	r2, r1
    23ca:	51 c2       	rjmp	.+1186   	; 0x286e <vfprintf+0x656>
    23cc:	8d c2       	rjmp	.+1306   	; 0x28e8 <vfprintf+0x6d0>
    23ce:	37 fe       	sbrs	r3, 7
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <vfprintf+0x1d8>
    23d2:	e4 0c       	add	r14, r4
    23d4:	04 ff       	sbrs	r16, 4
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <vfprintf+0x1c8>
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	81 33       	cpi	r24, 0x31	; 49
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <vfprintf+0x1c8>
    23de:	ea 94       	dec	r14
    23e0:	1e 14       	cp	r1, r14
    23e2:	74 f5       	brge	.+92     	; 0x2440 <vfprintf+0x228>
    23e4:	f8 e0       	ldi	r31, 0x08	; 8
    23e6:	fe 15       	cp	r31, r14
    23e8:	78 f5       	brcc	.+94     	; 0x2448 <vfprintf+0x230>
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	e8 2e       	mov	r14, r24
    23ee:	2c c0       	rjmp	.+88     	; 0x2448 <vfprintf+0x230>
    23f0:	36 fc       	sbrc	r3, 6
    23f2:	2a c0       	rjmp	.+84     	; 0x2448 <vfprintf+0x230>
    23f4:	81 2f       	mov	r24, r17
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	84 15       	cp	r24, r4
    23fa:	95 05       	cpc	r25, r5
    23fc:	9c f0       	brlt	.+38     	; 0x2424 <vfprintf+0x20c>
    23fe:	2c ef       	ldi	r18, 0xFC	; 252
    2400:	42 16       	cp	r4, r18
    2402:	2f ef       	ldi	r18, 0xFF	; 255
    2404:	52 06       	cpc	r5, r18
    2406:	74 f0       	brlt	.+28     	; 0x2424 <vfprintf+0x20c>
    2408:	43 2d       	mov	r20, r3
    240a:	40 68       	ori	r20, 0x80	; 128
    240c:	34 2e       	mov	r3, r20
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <vfprintf+0x20c>
    2410:	e2 e0       	ldi	r30, 0x02	; 2
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	ec 0f       	add	r30, r28
    2416:	fd 1f       	adc	r31, r29
    2418:	e1 0f       	add	r30, r17
    241a:	f1 1d       	adc	r31, r1
    241c:	80 81       	ld	r24, Z
    241e:	80 33       	cpi	r24, 0x30	; 48
    2420:	19 f4       	brne	.+6      	; 0x2428 <vfprintf+0x210>
    2422:	11 50       	subi	r17, 0x01	; 1
    2424:	11 11       	cpse	r17, r1
    2426:	f4 cf       	rjmp	.-24     	; 0x2410 <vfprintf+0x1f8>
    2428:	37 fe       	sbrs	r3, 7
    242a:	0e c0       	rjmp	.+28     	; 0x2448 <vfprintf+0x230>
    242c:	ee 24       	eor	r14, r14
    242e:	e3 94       	inc	r14
    2430:	e1 0e       	add	r14, r17
    2432:	81 2f       	mov	r24, r17
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	48 16       	cp	r4, r24
    2438:	59 06       	cpc	r5, r25
    243a:	2c f4       	brge	.+10     	; 0x2446 <vfprintf+0x22e>
    243c:	14 19       	sub	r17, r4
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <vfprintf+0x230>
    2440:	ee 24       	eor	r14, r14
    2442:	e3 94       	inc	r14
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <vfprintf+0x230>
    2446:	10 e0       	ldi	r17, 0x00	; 0
    2448:	37 fe       	sbrs	r3, 7
    244a:	06 c0       	rjmp	.+12     	; 0x2458 <vfprintf+0x240>
    244c:	14 14       	cp	r1, r4
    244e:	15 04       	cpc	r1, r5
    2450:	34 f4       	brge	.+12     	; 0x245e <vfprintf+0x246>
    2452:	c2 01       	movw	r24, r4
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <vfprintf+0x24a>
    2458:	85 e0       	ldi	r24, 0x05	; 5
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <vfprintf+0x24a>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	21 10       	cpse	r2, r1
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	11 23       	and	r17, r17
    2468:	31 f0       	breq	.+12     	; 0x2476 <vfprintf+0x25e>
    246a:	21 2f       	mov	r18, r17
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	2f 5f       	subi	r18, 0xFF	; 255
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	82 0f       	add	r24, r18
    2474:	93 1f       	adc	r25, r19
    2476:	2f 2d       	mov	r18, r15
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	82 17       	cp	r24, r18
    247c:	93 07       	cpc	r25, r19
    247e:	14 f4       	brge	.+4      	; 0x2484 <vfprintf+0x26c>
    2480:	f8 1a       	sub	r15, r24
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <vfprintf+0x26e>
    2484:	f1 2c       	mov	r15, r1
    2486:	83 2d       	mov	r24, r3
    2488:	89 70       	andi	r24, 0x09	; 9
    248a:	41 f4       	brne	.+16     	; 0x249c <vfprintf+0x284>
    248c:	ff 20       	and	r15, r15
    248e:	31 f0       	breq	.+12     	; 0x249c <vfprintf+0x284>
    2490:	b6 01       	movw	r22, r12
    2492:	80 e2       	ldi	r24, 0x20	; 32
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	ab d4       	rcall	.+2390   	; 0x2dee <fputc>
    2498:	fa 94       	dec	r15
    249a:	f8 cf       	rjmp	.-16     	; 0x248c <vfprintf+0x274>
    249c:	22 20       	and	r2, r2
    249e:	21 f0       	breq	.+8      	; 0x24a8 <vfprintf+0x290>
    24a0:	b6 01       	movw	r22, r12
    24a2:	82 2d       	mov	r24, r2
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a3 d4       	rcall	.+2374   	; 0x2dee <fputc>
    24a8:	33 fc       	sbrc	r3, 3
    24aa:	08 c0       	rjmp	.+16     	; 0x24bc <vfprintf+0x2a4>
    24ac:	ff 20       	and	r15, r15
    24ae:	31 f0       	breq	.+12     	; 0x24bc <vfprintf+0x2a4>
    24b0:	b6 01       	movw	r22, r12
    24b2:	80 e3       	ldi	r24, 0x30	; 48
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	9b d4       	rcall	.+2358   	; 0x2dee <fputc>
    24b8:	fa 94       	dec	r15
    24ba:	f8 cf       	rjmp	.-16     	; 0x24ac <vfprintf+0x294>
    24bc:	37 fe       	sbrs	r3, 7
    24be:	58 c0       	rjmp	.+176    	; 0x2570 <vfprintf+0x358>
    24c0:	94 2d       	mov	r25, r4
    24c2:	85 2d       	mov	r24, r5
    24c4:	57 fe       	sbrs	r5, 7
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <vfprintf+0x2b4>
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	29 2e       	mov	r2, r25
    24ce:	38 2e       	mov	r3, r24
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	a2 01       	movw	r20, r4
    24d6:	4e 19       	sub	r20, r14
    24d8:	51 09       	sbc	r21, r1
    24da:	5d 87       	std	Y+13, r21	; 0x0d
    24dc:	4c 87       	std	Y+12, r20	; 0x0c
    24de:	a2 01       	movw	r20, r4
    24e0:	42 19       	sub	r20, r2
    24e2:	53 09       	sbc	r21, r3
    24e4:	5f 87       	std	Y+15, r21	; 0x0f
    24e6:	4e 87       	std	Y+14, r20	; 0x0e
    24e8:	61 2f       	mov	r22, r17
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	44 27       	eor	r20, r20
    24ee:	55 27       	eor	r21, r21
    24f0:	46 1b       	sub	r20, r22
    24f2:	57 0b       	sbc	r21, r23
    24f4:	59 8b       	std	Y+17, r21	; 0x11
    24f6:	48 8b       	std	Y+16, r20	; 0x10
    24f8:	5f ef       	ldi	r21, 0xFF	; 255
    24fa:	25 16       	cp	r2, r21
    24fc:	35 06       	cpc	r3, r21
    24fe:	41 f4       	brne	.+16     	; 0x2510 <vfprintf+0x2f8>
    2500:	b6 01       	movw	r22, r12
    2502:	8e e2       	ldi	r24, 0x2E	; 46
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	2a 8b       	std	Y+18, r18	; 0x12
    2508:	3b 8b       	std	Y+19, r19	; 0x13
    250a:	71 d4       	rcall	.+2274   	; 0x2dee <fputc>
    250c:	3b 89       	ldd	r19, Y+19	; 0x13
    250e:	2a 89       	ldd	r18, Y+18	; 0x12
    2510:	42 14       	cp	r4, r2
    2512:	53 04       	cpc	r5, r3
    2514:	6c f0       	brlt	.+26     	; 0x2530 <vfprintf+0x318>
    2516:	4c 85       	ldd	r20, Y+12	; 0x0c
    2518:	5d 85       	ldd	r21, Y+13	; 0x0d
    251a:	42 15       	cp	r20, r2
    251c:	53 05       	cpc	r21, r3
    251e:	44 f4       	brge	.+16     	; 0x2530 <vfprintf+0x318>
    2520:	ee 85       	ldd	r30, Y+14	; 0x0e
    2522:	ff 85       	ldd	r31, Y+15	; 0x0f
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	e6 0d       	add	r30, r6
    252a:	f7 1d       	adc	r31, r7
    252c:	81 81       	ldd	r24, Z+1	; 0x01
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <vfprintf+0x31a>
    2530:	80 e3       	ldi	r24, 0x30	; 48
    2532:	51 e0       	ldi	r21, 0x01	; 1
    2534:	25 1a       	sub	r2, r21
    2536:	31 08       	sbc	r3, r1
    2538:	2f 5f       	subi	r18, 0xFF	; 255
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	48 89       	ldd	r20, Y+16	; 0x10
    253e:	59 89       	ldd	r21, Y+17	; 0x11
    2540:	24 16       	cp	r2, r20
    2542:	35 06       	cpc	r3, r21
    2544:	44 f0       	brlt	.+16     	; 0x2556 <vfprintf+0x33e>
    2546:	b6 01       	movw	r22, r12
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	2a 8b       	std	Y+18, r18	; 0x12
    254c:	3b 8b       	std	Y+19, r19	; 0x13
    254e:	4f d4       	rcall	.+2206   	; 0x2dee <fputc>
    2550:	2a 89       	ldd	r18, Y+18	; 0x12
    2552:	3b 89       	ldd	r19, Y+19	; 0x13
    2554:	d1 cf       	rjmp	.-94     	; 0x24f8 <vfprintf+0x2e0>
    2556:	24 14       	cp	r2, r4
    2558:	35 04       	cpc	r3, r5
    255a:	39 f4       	brne	.+14     	; 0x256a <vfprintf+0x352>
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	96 33       	cpi	r25, 0x36	; 54
    2560:	18 f4       	brcc	.+6      	; 0x2568 <vfprintf+0x350>
    2562:	95 33       	cpi	r25, 0x35	; 53
    2564:	11 f4       	brne	.+4      	; 0x256a <vfprintf+0x352>
    2566:	04 ff       	sbrs	r16, 4
    2568:	81 e3       	ldi	r24, 0x31	; 49
    256a:	b6 01       	movw	r22, r12
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	45 c0       	rjmp	.+138    	; 0x25fa <vfprintf+0x3e2>
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	81 33       	cpi	r24, 0x31	; 49
    2574:	09 f0       	breq	.+2      	; 0x2578 <vfprintf+0x360>
    2576:	0f 7e       	andi	r16, 0xEF	; 239
    2578:	b6 01       	movw	r22, r12
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	38 d4       	rcall	.+2160   	; 0x2dee <fputc>
    257e:	11 11       	cpse	r17, r1
    2580:	05 c0       	rjmp	.+10     	; 0x258c <vfprintf+0x374>
    2582:	34 fc       	sbrc	r3, 4
    2584:	16 c0       	rjmp	.+44     	; 0x25b2 <vfprintf+0x39a>
    2586:	85 e6       	ldi	r24, 0x65	; 101
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	15 c0       	rjmp	.+42     	; 0x25b6 <vfprintf+0x39e>
    258c:	b6 01       	movw	r22, r12
    258e:	8e e2       	ldi	r24, 0x2E	; 46
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	2d d4       	rcall	.+2138   	; 0x2dee <fputc>
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	ee 24       	eor	r14, r14
    2598:	e3 94       	inc	r14
    259a:	e8 0e       	add	r14, r24
    259c:	f3 01       	movw	r30, r6
    259e:	e8 0f       	add	r30, r24
    25a0:	f1 1d       	adc	r31, r1
    25a2:	80 81       	ld	r24, Z
    25a4:	b6 01       	movw	r22, r12
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	22 d4       	rcall	.+2116   	; 0x2dee <fputc>
    25aa:	11 50       	subi	r17, 0x01	; 1
    25ac:	8e 2d       	mov	r24, r14
    25ae:	99 f7       	brne	.-26     	; 0x2596 <vfprintf+0x37e>
    25b0:	e8 cf       	rjmp	.-48     	; 0x2582 <vfprintf+0x36a>
    25b2:	85 e4       	ldi	r24, 0x45	; 69
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	b6 01       	movw	r22, r12
    25b8:	1a d4       	rcall	.+2100   	; 0x2dee <fputc>
    25ba:	57 fc       	sbrc	r5, 7
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <vfprintf+0x3b0>
    25be:	41 14       	cp	r4, r1
    25c0:	51 04       	cpc	r5, r1
    25c2:	39 f4       	brne	.+14     	; 0x25d2 <vfprintf+0x3ba>
    25c4:	04 ff       	sbrs	r16, 4
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <vfprintf+0x3ba>
    25c8:	51 94       	neg	r5
    25ca:	41 94       	neg	r4
    25cc:	51 08       	sbc	r5, r1
    25ce:	8d e2       	ldi	r24, 0x2D	; 45
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <vfprintf+0x3bc>
    25d2:	8b e2       	ldi	r24, 0x2B	; 43
    25d4:	b6 01       	movw	r22, r12
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0a d4       	rcall	.+2068   	; 0x2dee <fputc>
    25da:	80 e3       	ldi	r24, 0x30	; 48
    25dc:	9a e0       	ldi	r25, 0x0A	; 10
    25de:	49 16       	cp	r4, r25
    25e0:	51 04       	cpc	r5, r1
    25e2:	2c f0       	brlt	.+10     	; 0x25ee <vfprintf+0x3d6>
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	5a e0       	ldi	r21, 0x0A	; 10
    25e8:	45 1a       	sub	r4, r21
    25ea:	51 08       	sbc	r5, r1
    25ec:	f7 cf       	rjmp	.-18     	; 0x25dc <vfprintf+0x3c4>
    25ee:	b6 01       	movw	r22, r12
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	fd d3       	rcall	.+2042   	; 0x2dee <fputc>
    25f4:	b6 01       	movw	r22, r12
    25f6:	c2 01       	movw	r24, r4
    25f8:	c0 96       	adiw	r24, 0x30	; 48
    25fa:	f9 d3       	rcall	.+2034   	; 0x2dee <fputc>
    25fc:	4c c1       	rjmp	.+664    	; 0x2896 <vfprintf+0x67e>
    25fe:	83 36       	cpi	r24, 0x63	; 99
    2600:	31 f0       	breq	.+12     	; 0x260e <vfprintf+0x3f6>
    2602:	83 37       	cpi	r24, 0x73	; 115
    2604:	79 f0       	breq	.+30     	; 0x2624 <vfprintf+0x40c>
    2606:	83 35       	cpi	r24, 0x53	; 83
    2608:	09 f0       	breq	.+2      	; 0x260c <vfprintf+0x3f4>
    260a:	54 c0       	rjmp	.+168    	; 0x26b4 <vfprintf+0x49c>
    260c:	20 c0       	rjmp	.+64     	; 0x264e <vfprintf+0x436>
    260e:	52 01       	movw	r10, r4
    2610:	e2 e0       	ldi	r30, 0x02	; 2
    2612:	ae 0e       	add	r10, r30
    2614:	b1 1c       	adc	r11, r1
    2616:	f2 01       	movw	r30, r4
    2618:	80 81       	ld	r24, Z
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	01 e0       	ldi	r16, 0x01	; 1
    261e:	10 e0       	ldi	r17, 0x00	; 0
    2620:	23 01       	movw	r4, r6
    2622:	13 c0       	rjmp	.+38     	; 0x264a <vfprintf+0x432>
    2624:	52 01       	movw	r10, r4
    2626:	f2 e0       	ldi	r31, 0x02	; 2
    2628:	af 0e       	add	r10, r31
    262a:	b1 1c       	adc	r11, r1
    262c:	f2 01       	movw	r30, r4
    262e:	40 80       	ld	r4, Z
    2630:	51 80       	ldd	r5, Z+1	; 0x01
    2632:	26 ff       	sbrs	r18, 6
    2634:	03 c0       	rjmp	.+6      	; 0x263c <vfprintf+0x424>
    2636:	61 2f       	mov	r22, r17
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <vfprintf+0x428>
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	7f ef       	ldi	r23, 0xFF	; 255
    2640:	c2 01       	movw	r24, r4
    2642:	2a 8b       	std	Y+18, r18	; 0x12
    2644:	c9 d3       	rcall	.+1938   	; 0x2dd8 <strnlen>
    2646:	8c 01       	movw	r16, r24
    2648:	2a 89       	ldd	r18, Y+18	; 0x12
    264a:	2f 77       	andi	r18, 0x7F	; 127
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <vfprintf+0x45e>
    264e:	52 01       	movw	r10, r4
    2650:	f2 e0       	ldi	r31, 0x02	; 2
    2652:	af 0e       	add	r10, r31
    2654:	b1 1c       	adc	r11, r1
    2656:	f2 01       	movw	r30, r4
    2658:	40 80       	ld	r4, Z
    265a:	51 80       	ldd	r5, Z+1	; 0x01
    265c:	26 ff       	sbrs	r18, 6
    265e:	03 c0       	rjmp	.+6      	; 0x2666 <vfprintf+0x44e>
    2660:	61 2f       	mov	r22, r17
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	02 c0       	rjmp	.+4      	; 0x266a <vfprintf+0x452>
    2666:	6f ef       	ldi	r22, 0xFF	; 255
    2668:	7f ef       	ldi	r23, 0xFF	; 255
    266a:	c2 01       	movw	r24, r4
    266c:	2a 8b       	std	Y+18, r18	; 0x12
    266e:	a2 d3       	rcall	.+1860   	; 0x2db4 <strnlen_P>
    2670:	8c 01       	movw	r16, r24
    2672:	2a 89       	ldd	r18, Y+18	; 0x12
    2674:	20 68       	ori	r18, 0x80	; 128
    2676:	32 2e       	mov	r3, r18
    2678:	23 fd       	sbrc	r18, 3
    267a:	18 c0       	rjmp	.+48     	; 0x26ac <vfprintf+0x494>
    267c:	8f 2d       	mov	r24, r15
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	08 17       	cp	r16, r24
    2682:	19 07       	cpc	r17, r25
    2684:	98 f4       	brcc	.+38     	; 0x26ac <vfprintf+0x494>
    2686:	b6 01       	movw	r22, r12
    2688:	80 e2       	ldi	r24, 0x20	; 32
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	b0 d3       	rcall	.+1888   	; 0x2dee <fputc>
    268e:	fa 94       	dec	r15
    2690:	f5 cf       	rjmp	.-22     	; 0x267c <vfprintf+0x464>
    2692:	f2 01       	movw	r30, r4
    2694:	37 fc       	sbrc	r3, 7
    2696:	85 91       	lpm	r24, Z+
    2698:	37 fe       	sbrs	r3, 7
    269a:	81 91       	ld	r24, Z+
    269c:	2f 01       	movw	r4, r30
    269e:	b6 01       	movw	r22, r12
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a5 d3       	rcall	.+1866   	; 0x2dee <fputc>
    26a4:	f1 10       	cpse	r15, r1
    26a6:	fa 94       	dec	r15
    26a8:	01 50       	subi	r16, 0x01	; 1
    26aa:	11 09       	sbc	r17, r1
    26ac:	01 15       	cp	r16, r1
    26ae:	11 05       	cpc	r17, r1
    26b0:	81 f7       	brne	.-32     	; 0x2692 <vfprintf+0x47a>
    26b2:	f1 c0       	rjmp	.+482    	; 0x2896 <vfprintf+0x67e>
    26b4:	84 36       	cpi	r24, 0x64	; 100
    26b6:	11 f0       	breq	.+4      	; 0x26bc <vfprintf+0x4a4>
    26b8:	89 36       	cpi	r24, 0x69	; 105
    26ba:	51 f5       	brne	.+84     	; 0x2710 <vfprintf+0x4f8>
    26bc:	52 01       	movw	r10, r4
    26be:	27 ff       	sbrs	r18, 7
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <vfprintf+0x4bc>
    26c2:	f4 e0       	ldi	r31, 0x04	; 4
    26c4:	af 0e       	add	r10, r31
    26c6:	b1 1c       	adc	r11, r1
    26c8:	f2 01       	movw	r30, r4
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	0a c0       	rjmp	.+20     	; 0x26e8 <vfprintf+0x4d0>
    26d4:	f2 e0       	ldi	r31, 0x02	; 2
    26d6:	af 0e       	add	r10, r31
    26d8:	b1 1c       	adc	r11, r1
    26da:	f2 01       	movw	r30, r4
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	07 2e       	mov	r0, r23
    26e2:	00 0c       	add	r0, r0
    26e4:	88 0b       	sbc	r24, r24
    26e6:	99 0b       	sbc	r25, r25
    26e8:	2f 76       	andi	r18, 0x6F	; 111
    26ea:	32 2e       	mov	r3, r18
    26ec:	97 ff       	sbrs	r25, 7
    26ee:	09 c0       	rjmp	.+18     	; 0x2702 <vfprintf+0x4ea>
    26f0:	90 95       	com	r25
    26f2:	80 95       	com	r24
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	8f 4f       	sbci	r24, 0xFF	; 255
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	20 68       	ori	r18, 0x80	; 128
    2700:	32 2e       	mov	r3, r18
    2702:	2a e0       	ldi	r18, 0x0A	; 10
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	a3 01       	movw	r20, r6
    2708:	d9 d3       	rcall	.+1970   	; 0x2ebc <__ultoa_invert>
    270a:	e8 2e       	mov	r14, r24
    270c:	e6 18       	sub	r14, r6
    270e:	3e c0       	rjmp	.+124    	; 0x278c <vfprintf+0x574>
    2710:	02 2f       	mov	r16, r18
    2712:	85 37       	cpi	r24, 0x75	; 117
    2714:	21 f4       	brne	.+8      	; 0x271e <vfprintf+0x506>
    2716:	0f 7e       	andi	r16, 0xEF	; 239
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	1d c0       	rjmp	.+58     	; 0x2758 <vfprintf+0x540>
    271e:	09 7f       	andi	r16, 0xF9	; 249
    2720:	8f 36       	cpi	r24, 0x6F	; 111
    2722:	91 f0       	breq	.+36     	; 0x2748 <vfprintf+0x530>
    2724:	18 f4       	brcc	.+6      	; 0x272c <vfprintf+0x514>
    2726:	88 35       	cpi	r24, 0x58	; 88
    2728:	59 f0       	breq	.+22     	; 0x2740 <vfprintf+0x528>
    272a:	be c0       	rjmp	.+380    	; 0x28a8 <vfprintf+0x690>
    272c:	80 37       	cpi	r24, 0x70	; 112
    272e:	19 f0       	breq	.+6      	; 0x2736 <vfprintf+0x51e>
    2730:	88 37       	cpi	r24, 0x78	; 120
    2732:	11 f0       	breq	.+4      	; 0x2738 <vfprintf+0x520>
    2734:	b9 c0       	rjmp	.+370    	; 0x28a8 <vfprintf+0x690>
    2736:	00 61       	ori	r16, 0x10	; 16
    2738:	04 ff       	sbrs	r16, 4
    273a:	09 c0       	rjmp	.+18     	; 0x274e <vfprintf+0x536>
    273c:	04 60       	ori	r16, 0x04	; 4
    273e:	07 c0       	rjmp	.+14     	; 0x274e <vfprintf+0x536>
    2740:	24 ff       	sbrs	r18, 4
    2742:	08 c0       	rjmp	.+16     	; 0x2754 <vfprintf+0x53c>
    2744:	06 60       	ori	r16, 0x06	; 6
    2746:	06 c0       	rjmp	.+12     	; 0x2754 <vfprintf+0x53c>
    2748:	28 e0       	ldi	r18, 0x08	; 8
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <vfprintf+0x540>
    274e:	20 e1       	ldi	r18, 0x10	; 16
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0x540>
    2754:	20 e1       	ldi	r18, 0x10	; 16
    2756:	32 e0       	ldi	r19, 0x02	; 2
    2758:	52 01       	movw	r10, r4
    275a:	07 ff       	sbrs	r16, 7
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <vfprintf+0x558>
    275e:	f4 e0       	ldi	r31, 0x04	; 4
    2760:	af 0e       	add	r10, r31
    2762:	b1 1c       	adc	r11, r1
    2764:	f2 01       	movw	r30, r4
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <vfprintf+0x568>
    2770:	f2 e0       	ldi	r31, 0x02	; 2
    2772:	af 0e       	add	r10, r31
    2774:	b1 1c       	adc	r11, r1
    2776:	f2 01       	movw	r30, r4
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a3 01       	movw	r20, r6
    2782:	9c d3       	rcall	.+1848   	; 0x2ebc <__ultoa_invert>
    2784:	e8 2e       	mov	r14, r24
    2786:	e6 18       	sub	r14, r6
    2788:	0f 77       	andi	r16, 0x7F	; 127
    278a:	30 2e       	mov	r3, r16
    278c:	36 fe       	sbrs	r3, 6
    278e:	0b c0       	rjmp	.+22     	; 0x27a6 <vfprintf+0x58e>
    2790:	33 2d       	mov	r19, r3
    2792:	3e 7f       	andi	r19, 0xFE	; 254
    2794:	e1 16       	cp	r14, r17
    2796:	50 f4       	brcc	.+20     	; 0x27ac <vfprintf+0x594>
    2798:	34 fe       	sbrs	r3, 4
    279a:	0a c0       	rjmp	.+20     	; 0x27b0 <vfprintf+0x598>
    279c:	32 fc       	sbrc	r3, 2
    279e:	08 c0       	rjmp	.+16     	; 0x27b0 <vfprintf+0x598>
    27a0:	33 2d       	mov	r19, r3
    27a2:	3e 7e       	andi	r19, 0xEE	; 238
    27a4:	05 c0       	rjmp	.+10     	; 0x27b0 <vfprintf+0x598>
    27a6:	0e 2d       	mov	r16, r14
    27a8:	33 2d       	mov	r19, r3
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <vfprintf+0x59a>
    27ac:	0e 2d       	mov	r16, r14
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <vfprintf+0x59a>
    27b0:	01 2f       	mov	r16, r17
    27b2:	34 ff       	sbrs	r19, 4
    27b4:	0c c0       	rjmp	.+24     	; 0x27ce <vfprintf+0x5b6>
    27b6:	fe 01       	movw	r30, r28
    27b8:	ee 0d       	add	r30, r14
    27ba:	f1 1d       	adc	r31, r1
    27bc:	80 81       	ld	r24, Z
    27be:	80 33       	cpi	r24, 0x30	; 48
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <vfprintf+0x5ae>
    27c2:	39 7e       	andi	r19, 0xE9	; 233
    27c4:	08 c0       	rjmp	.+16     	; 0x27d6 <vfprintf+0x5be>
    27c6:	32 ff       	sbrs	r19, 2
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <vfprintf+0x5bc>
    27ca:	0e 5f       	subi	r16, 0xFE	; 254
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <vfprintf+0x5be>
    27ce:	83 2f       	mov	r24, r19
    27d0:	86 78       	andi	r24, 0x86	; 134
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <vfprintf+0x5be>
    27d4:	0f 5f       	subi	r16, 0xFF	; 255
    27d6:	33 fd       	sbrc	r19, 3
    27d8:	12 c0       	rjmp	.+36     	; 0x27fe <vfprintf+0x5e6>
    27da:	30 ff       	sbrs	r19, 0
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <vfprintf+0x5d2>
    27de:	1e 2d       	mov	r17, r14
    27e0:	0f 15       	cp	r16, r15
    27e2:	18 f4       	brcc	.+6      	; 0x27ea <vfprintf+0x5d2>
    27e4:	1f 0d       	add	r17, r15
    27e6:	10 1b       	sub	r17, r16
    27e8:	0f 2d       	mov	r16, r15
    27ea:	0f 15       	cp	r16, r15
    27ec:	60 f4       	brcc	.+24     	; 0x2806 <vfprintf+0x5ee>
    27ee:	b6 01       	movw	r22, r12
    27f0:	80 e2       	ldi	r24, 0x20	; 32
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	3b 8b       	std	Y+19, r19	; 0x13
    27f6:	fb d2       	rcall	.+1526   	; 0x2dee <fputc>
    27f8:	0f 5f       	subi	r16, 0xFF	; 255
    27fa:	3b 89       	ldd	r19, Y+19	; 0x13
    27fc:	f6 cf       	rjmp	.-20     	; 0x27ea <vfprintf+0x5d2>
    27fe:	0f 15       	cp	r16, r15
    2800:	10 f4       	brcc	.+4      	; 0x2806 <vfprintf+0x5ee>
    2802:	f0 1a       	sub	r15, r16
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <vfprintf+0x5f0>
    2806:	f1 2c       	mov	r15, r1
    2808:	34 ff       	sbrs	r19, 4
    280a:	11 c0       	rjmp	.+34     	; 0x282e <vfprintf+0x616>
    280c:	b6 01       	movw	r22, r12
    280e:	80 e3       	ldi	r24, 0x30	; 48
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	3b 8b       	std	Y+19, r19	; 0x13
    2814:	ec d2       	rcall	.+1496   	; 0x2dee <fputc>
    2816:	3b 89       	ldd	r19, Y+19	; 0x13
    2818:	32 ff       	sbrs	r19, 2
    281a:	16 c0       	rjmp	.+44     	; 0x2848 <vfprintf+0x630>
    281c:	31 fd       	sbrc	r19, 1
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <vfprintf+0x60e>
    2820:	88 e7       	ldi	r24, 0x78	; 120
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	02 c0       	rjmp	.+4      	; 0x282a <vfprintf+0x612>
    2826:	88 e5       	ldi	r24, 0x58	; 88
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	b6 01       	movw	r22, r12
    282c:	0c c0       	rjmp	.+24     	; 0x2846 <vfprintf+0x62e>
    282e:	83 2f       	mov	r24, r19
    2830:	86 78       	andi	r24, 0x86	; 134
    2832:	51 f0       	breq	.+20     	; 0x2848 <vfprintf+0x630>
    2834:	31 ff       	sbrs	r19, 1
    2836:	02 c0       	rjmp	.+4      	; 0x283c <vfprintf+0x624>
    2838:	8b e2       	ldi	r24, 0x2B	; 43
    283a:	01 c0       	rjmp	.+2      	; 0x283e <vfprintf+0x626>
    283c:	80 e2       	ldi	r24, 0x20	; 32
    283e:	37 fd       	sbrc	r19, 7
    2840:	8d e2       	ldi	r24, 0x2D	; 45
    2842:	b6 01       	movw	r22, r12
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	d3 d2       	rcall	.+1446   	; 0x2dee <fputc>
    2848:	e1 16       	cp	r14, r17
    284a:	30 f4       	brcc	.+12     	; 0x2858 <vfprintf+0x640>
    284c:	b6 01       	movw	r22, r12
    284e:	80 e3       	ldi	r24, 0x30	; 48
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	cd d2       	rcall	.+1434   	; 0x2dee <fputc>
    2854:	11 50       	subi	r17, 0x01	; 1
    2856:	f8 cf       	rjmp	.-16     	; 0x2848 <vfprintf+0x630>
    2858:	ea 94       	dec	r14
    285a:	f3 01       	movw	r30, r6
    285c:	ee 0d       	add	r30, r14
    285e:	f1 1d       	adc	r31, r1
    2860:	80 81       	ld	r24, Z
    2862:	b6 01       	movw	r22, r12
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	c3 d2       	rcall	.+1414   	; 0x2dee <fputc>
    2868:	e1 10       	cpse	r14, r1
    286a:	f6 cf       	rjmp	.-20     	; 0x2858 <vfprintf+0x640>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <vfprintf+0x67e>
    286e:	f4 e0       	ldi	r31, 0x04	; 4
    2870:	ff 15       	cp	r31, r15
    2872:	48 f5       	brcc	.+82     	; 0x28c6 <vfprintf+0x6ae>
    2874:	84 e0       	ldi	r24, 0x04	; 4
    2876:	f8 1a       	sub	r15, r24
    2878:	33 fe       	sbrs	r3, 3
    287a:	1d c0       	rjmp	.+58     	; 0x28b6 <vfprintf+0x69e>
    287c:	21 10       	cpse	r2, r1
    287e:	24 c0       	rjmp	.+72     	; 0x28c8 <vfprintf+0x6b0>
    2880:	03 ff       	sbrs	r16, 3
    2882:	27 c0       	rjmp	.+78     	; 0x28d2 <vfprintf+0x6ba>
    2884:	0c e7       	ldi	r16, 0x7C	; 124
    2886:	11 e0       	ldi	r17, 0x01	; 1
    2888:	f3 2d       	mov	r31, r3
    288a:	f0 71       	andi	r31, 0x10	; 16
    288c:	3f 2e       	mov	r3, r31
    288e:	f8 01       	movw	r30, r16
    2890:	84 91       	lpm	r24, Z
    2892:	81 11       	cpse	r24, r1
    2894:	21 c0       	rjmp	.+66     	; 0x28d8 <vfprintf+0x6c0>
    2896:	ff 20       	and	r15, r15
    2898:	09 f4       	brne	.+2      	; 0x289c <vfprintf+0x684>
    289a:	fd cc       	rjmp	.-1542   	; 0x2296 <vfprintf+0x7e>
    289c:	b6 01       	movw	r22, r12
    289e:	80 e2       	ldi	r24, 0x20	; 32
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a5 d2       	rcall	.+1354   	; 0x2dee <fputc>
    28a4:	fa 94       	dec	r15
    28a6:	f7 cf       	rjmp	.-18     	; 0x2896 <vfprintf+0x67e>
    28a8:	f6 01       	movw	r30, r12
    28aa:	86 81       	ldd	r24, Z+6	; 0x06
    28ac:	97 81       	ldd	r25, Z+7	; 0x07
    28ae:	23 c0       	rjmp	.+70     	; 0x28f6 <vfprintf+0x6de>
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	9f ef       	ldi	r25, 0xFF	; 255
    28b4:	20 c0       	rjmp	.+64     	; 0x28f6 <vfprintf+0x6de>
    28b6:	b6 01       	movw	r22, r12
    28b8:	80 e2       	ldi	r24, 0x20	; 32
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	98 d2       	rcall	.+1328   	; 0x2dee <fputc>
    28be:	fa 94       	dec	r15
    28c0:	f1 10       	cpse	r15, r1
    28c2:	f9 cf       	rjmp	.-14     	; 0x28b6 <vfprintf+0x69e>
    28c4:	db cf       	rjmp	.-74     	; 0x287c <vfprintf+0x664>
    28c6:	f1 2c       	mov	r15, r1
    28c8:	b6 01       	movw	r22, r12
    28ca:	82 2d       	mov	r24, r2
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	8f d2       	rcall	.+1310   	; 0x2dee <fputc>
    28d0:	d7 cf       	rjmp	.-82     	; 0x2880 <vfprintf+0x668>
    28d2:	00 e8       	ldi	r16, 0x80	; 128
    28d4:	11 e0       	ldi	r17, 0x01	; 1
    28d6:	d8 cf       	rjmp	.-80     	; 0x2888 <vfprintf+0x670>
    28d8:	31 10       	cpse	r3, r1
    28da:	80 52       	subi	r24, 0x20	; 32
    28dc:	b6 01       	movw	r22, r12
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	86 d2       	rcall	.+1292   	; 0x2dee <fputc>
    28e2:	0f 5f       	subi	r16, 0xFF	; 255
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	d3 cf       	rjmp	.-90     	; 0x288e <vfprintf+0x676>
    28e8:	23 e0       	ldi	r18, 0x03	; 3
    28ea:	2f 15       	cp	r18, r15
    28ec:	10 f4       	brcc	.+4      	; 0x28f2 <vfprintf+0x6da>
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	c2 cf       	rjmp	.-124    	; 0x2876 <vfprintf+0x65e>
    28f2:	f1 2c       	mov	r15, r1
    28f4:	c5 cf       	rjmp	.-118    	; 0x2880 <vfprintf+0x668>
    28f6:	63 96       	adiw	r28, 0x13	; 19
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	df 90       	pop	r13
    2910:	cf 90       	pop	r12
    2912:	bf 90       	pop	r11
    2914:	af 90       	pop	r10
    2916:	9f 90       	pop	r9
    2918:	8f 90       	pop	r8
    291a:	7f 90       	pop	r7
    291c:	6f 90       	pop	r6
    291e:	5f 90       	pop	r5
    2920:	4f 90       	pop	r4
    2922:	3f 90       	pop	r3
    2924:	2f 90       	pop	r2
    2926:	08 95       	ret

00002928 <__divmodhi4>:
    2928:	97 fb       	bst	r25, 7
    292a:	07 2e       	mov	r0, r23
    292c:	16 f4       	brtc	.+4      	; 0x2932 <__divmodhi4+0xa>
    292e:	00 94       	com	r0
    2930:	06 d0       	rcall	.+12     	; 0x293e <__divmodhi4_neg1>
    2932:	77 fd       	sbrc	r23, 7
    2934:	08 d0       	rcall	.+16     	; 0x2946 <__divmodhi4_neg2>
    2936:	0b d0       	rcall	.+22     	; 0x294e <__udivmodhi4>
    2938:	07 fc       	sbrc	r0, 7
    293a:	05 d0       	rcall	.+10     	; 0x2946 <__divmodhi4_neg2>
    293c:	3e f4       	brtc	.+14     	; 0x294c <__divmodhi4_exit>

0000293e <__divmodhi4_neg1>:
    293e:	90 95       	com	r25
    2940:	81 95       	neg	r24
    2942:	9f 4f       	sbci	r25, 0xFF	; 255
    2944:	08 95       	ret

00002946 <__divmodhi4_neg2>:
    2946:	70 95       	com	r23
    2948:	61 95       	neg	r22
    294a:	7f 4f       	sbci	r23, 0xFF	; 255

0000294c <__divmodhi4_exit>:
    294c:	08 95       	ret

0000294e <__udivmodhi4>:
    294e:	aa 1b       	sub	r26, r26
    2950:	bb 1b       	sub	r27, r27
    2952:	51 e1       	ldi	r21, 0x11	; 17
    2954:	07 c0       	rjmp	.+14     	; 0x2964 <__udivmodhi4_ep>

00002956 <__udivmodhi4_loop>:
    2956:	aa 1f       	adc	r26, r26
    2958:	bb 1f       	adc	r27, r27
    295a:	a6 17       	cp	r26, r22
    295c:	b7 07       	cpc	r27, r23
    295e:	10 f0       	brcs	.+4      	; 0x2964 <__udivmodhi4_ep>
    2960:	a6 1b       	sub	r26, r22
    2962:	b7 0b       	sbc	r27, r23

00002964 <__udivmodhi4_ep>:
    2964:	88 1f       	adc	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	5a 95       	dec	r21
    296a:	a9 f7       	brne	.-22     	; 0x2956 <__udivmodhi4_loop>
    296c:	80 95       	com	r24
    296e:	90 95       	com	r25
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	08 95       	ret

00002976 <calloc>:
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	86 9f       	mul	r24, r22
    2980:	80 01       	movw	r16, r0
    2982:	87 9f       	mul	r24, r23
    2984:	10 0d       	add	r17, r0
    2986:	96 9f       	mul	r25, r22
    2988:	10 0d       	add	r17, r0
    298a:	11 24       	eor	r1, r1
    298c:	c8 01       	movw	r24, r16
    298e:	0d d0       	rcall	.+26     	; 0x29aa <malloc>
    2990:	ec 01       	movw	r28, r24
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	21 f0       	breq	.+8      	; 0x299e <calloc+0x28>
    2996:	a8 01       	movw	r20, r16
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	16 d2       	rcall	.+1068   	; 0x2dca <memset>
    299e:	ce 01       	movw	r24, r28
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <malloc>:
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	82 30       	cpi	r24, 0x02	; 2
    29b0:	91 05       	cpc	r25, r1
    29b2:	10 f4       	brcc	.+4      	; 0x29b8 <malloc+0xe>
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	e0 91 ec 02 	lds	r30, 0x02EC
    29bc:	f0 91 ed 02 	lds	r31, 0x02ED
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	c0 e0       	ldi	r28, 0x00	; 0
    29c6:	d0 e0       	ldi	r29, 0x00	; 0
    29c8:	30 97       	sbiw	r30, 0x00	; 0
    29ca:	11 f1       	breq	.+68     	; 0x2a10 <malloc+0x66>
    29cc:	40 81       	ld	r20, Z
    29ce:	51 81       	ldd	r21, Z+1	; 0x01
    29d0:	48 17       	cp	r20, r24
    29d2:	59 07       	cpc	r21, r25
    29d4:	c0 f0       	brcs	.+48     	; 0x2a06 <malloc+0x5c>
    29d6:	48 17       	cp	r20, r24
    29d8:	59 07       	cpc	r21, r25
    29da:	61 f4       	brne	.+24     	; 0x29f4 <malloc+0x4a>
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 97       	sbiw	r28, 0x00	; 0
    29e2:	19 f0       	breq	.+6      	; 0x29ea <malloc+0x40>
    29e4:	9b 83       	std	Y+3, r25	; 0x03
    29e6:	8a 83       	std	Y+2, r24	; 0x02
    29e8:	2b c0       	rjmp	.+86     	; 0x2a40 <malloc+0x96>
    29ea:	90 93 ed 02 	sts	0x02ED, r25
    29ee:	80 93 ec 02 	sts	0x02EC, r24
    29f2:	26 c0       	rjmp	.+76     	; 0x2a40 <malloc+0x96>
    29f4:	21 15       	cp	r18, r1
    29f6:	31 05       	cpc	r19, r1
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <malloc+0x56>
    29fa:	42 17       	cp	r20, r18
    29fc:	53 07       	cpc	r21, r19
    29fe:	18 f4       	brcc	.+6      	; 0x2a06 <malloc+0x5c>
    2a00:	9a 01       	movw	r18, r20
    2a02:	be 01       	movw	r22, r28
    2a04:	df 01       	movw	r26, r30
    2a06:	ef 01       	movw	r28, r30
    2a08:	02 80       	ldd	r0, Z+2	; 0x02
    2a0a:	f3 81       	ldd	r31, Z+3	; 0x03
    2a0c:	e0 2d       	mov	r30, r0
    2a0e:	dc cf       	rjmp	.-72     	; 0x29c8 <malloc+0x1e>
    2a10:	21 15       	cp	r18, r1
    2a12:	31 05       	cpc	r19, r1
    2a14:	09 f1       	breq	.+66     	; 0x2a58 <malloc+0xae>
    2a16:	28 1b       	sub	r18, r24
    2a18:	39 0b       	sbc	r19, r25
    2a1a:	24 30       	cpi	r18, 0x04	; 4
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	90 f4       	brcc	.+36     	; 0x2a44 <malloc+0x9a>
    2a20:	12 96       	adiw	r26, 0x02	; 2
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	13 97       	sbiw	r26, 0x03	; 3
    2a28:	61 15       	cp	r22, r1
    2a2a:	71 05       	cpc	r23, r1
    2a2c:	21 f0       	breq	.+8      	; 0x2a36 <malloc+0x8c>
    2a2e:	fb 01       	movw	r30, r22
    2a30:	93 83       	std	Z+3, r25	; 0x03
    2a32:	82 83       	std	Z+2, r24	; 0x02
    2a34:	04 c0       	rjmp	.+8      	; 0x2a3e <malloc+0x94>
    2a36:	90 93 ed 02 	sts	0x02ED, r25
    2a3a:	80 93 ec 02 	sts	0x02EC, r24
    2a3e:	fd 01       	movw	r30, r26
    2a40:	32 96       	adiw	r30, 0x02	; 2
    2a42:	44 c0       	rjmp	.+136    	; 0x2acc <malloc+0x122>
    2a44:	fd 01       	movw	r30, r26
    2a46:	e2 0f       	add	r30, r18
    2a48:	f3 1f       	adc	r31, r19
    2a4a:	81 93       	st	Z+, r24
    2a4c:	91 93       	st	Z+, r25
    2a4e:	22 50       	subi	r18, 0x02	; 2
    2a50:	31 09       	sbc	r19, r1
    2a52:	2d 93       	st	X+, r18
    2a54:	3c 93       	st	X, r19
    2a56:	3a c0       	rjmp	.+116    	; 0x2acc <malloc+0x122>
    2a58:	20 91 ea 02 	lds	r18, 0x02EA
    2a5c:	30 91 eb 02 	lds	r19, 0x02EB
    2a60:	23 2b       	or	r18, r19
    2a62:	41 f4       	brne	.+16     	; 0x2a74 <malloc+0xca>
    2a64:	20 91 02 01 	lds	r18, 0x0102
    2a68:	30 91 03 01 	lds	r19, 0x0103
    2a6c:	30 93 eb 02 	sts	0x02EB, r19
    2a70:	20 93 ea 02 	sts	0x02EA, r18
    2a74:	20 91 00 01 	lds	r18, 0x0100
    2a78:	30 91 01 01 	lds	r19, 0x0101
    2a7c:	21 15       	cp	r18, r1
    2a7e:	31 05       	cpc	r19, r1
    2a80:	41 f4       	brne	.+16     	; 0x2a92 <malloc+0xe8>
    2a82:	2d b7       	in	r18, 0x3d	; 61
    2a84:	3e b7       	in	r19, 0x3e	; 62
    2a86:	40 91 04 01 	lds	r20, 0x0104
    2a8a:	50 91 05 01 	lds	r21, 0x0105
    2a8e:	24 1b       	sub	r18, r20
    2a90:	35 0b       	sbc	r19, r21
    2a92:	e0 91 ea 02 	lds	r30, 0x02EA
    2a96:	f0 91 eb 02 	lds	r31, 0x02EB
    2a9a:	e2 17       	cp	r30, r18
    2a9c:	f3 07       	cpc	r31, r19
    2a9e:	a0 f4       	brcc	.+40     	; 0x2ac8 <malloc+0x11e>
    2aa0:	2e 1b       	sub	r18, r30
    2aa2:	3f 0b       	sbc	r19, r31
    2aa4:	28 17       	cp	r18, r24
    2aa6:	39 07       	cpc	r19, r25
    2aa8:	78 f0       	brcs	.+30     	; 0x2ac8 <malloc+0x11e>
    2aaa:	ac 01       	movw	r20, r24
    2aac:	4e 5f       	subi	r20, 0xFE	; 254
    2aae:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab0:	24 17       	cp	r18, r20
    2ab2:	35 07       	cpc	r19, r21
    2ab4:	48 f0       	brcs	.+18     	; 0x2ac8 <malloc+0x11e>
    2ab6:	4e 0f       	add	r20, r30
    2ab8:	5f 1f       	adc	r21, r31
    2aba:	50 93 eb 02 	sts	0x02EB, r21
    2abe:	40 93 ea 02 	sts	0x02EA, r20
    2ac2:	81 93       	st	Z+, r24
    2ac4:	91 93       	st	Z+, r25
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <malloc+0x122>
    2ac8:	e0 e0       	ldi	r30, 0x00	; 0
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	cf 01       	movw	r24, r30
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <free>:
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <free+0xe>
    2ae0:	8c c0       	rjmp	.+280    	; 0x2bfa <free+0x126>
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	32 97       	sbiw	r30, 0x02	; 2
    2ae6:	13 82       	std	Z+3, r1	; 0x03
    2ae8:	12 82       	std	Z+2, r1	; 0x02
    2aea:	00 91 ec 02 	lds	r16, 0x02EC
    2aee:	10 91 ed 02 	lds	r17, 0x02ED
    2af2:	01 15       	cp	r16, r1
    2af4:	11 05       	cpc	r17, r1
    2af6:	81 f4       	brne	.+32     	; 0x2b18 <free+0x44>
    2af8:	20 81       	ld	r18, Z
    2afa:	31 81       	ldd	r19, Z+1	; 0x01
    2afc:	82 0f       	add	r24, r18
    2afe:	93 1f       	adc	r25, r19
    2b00:	20 91 ea 02 	lds	r18, 0x02EA
    2b04:	30 91 eb 02 	lds	r19, 0x02EB
    2b08:	28 17       	cp	r18, r24
    2b0a:	39 07       	cpc	r19, r25
    2b0c:	79 f5       	brne	.+94     	; 0x2b6c <free+0x98>
    2b0e:	f0 93 eb 02 	sts	0x02EB, r31
    2b12:	e0 93 ea 02 	sts	0x02EA, r30
    2b16:	71 c0       	rjmp	.+226    	; 0x2bfa <free+0x126>
    2b18:	d8 01       	movw	r26, r16
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	ae 17       	cp	r26, r30
    2b20:	bf 07       	cpc	r27, r31
    2b22:	50 f4       	brcc	.+20     	; 0x2b38 <free+0x64>
    2b24:	12 96       	adiw	r26, 0x02	; 2
    2b26:	2d 91       	ld	r18, X+
    2b28:	3c 91       	ld	r19, X
    2b2a:	13 97       	sbiw	r26, 0x03	; 3
    2b2c:	ad 01       	movw	r20, r26
    2b2e:	21 15       	cp	r18, r1
    2b30:	31 05       	cpc	r19, r1
    2b32:	09 f1       	breq	.+66     	; 0x2b76 <free+0xa2>
    2b34:	d9 01       	movw	r26, r18
    2b36:	f3 cf       	rjmp	.-26     	; 0x2b1e <free+0x4a>
    2b38:	9d 01       	movw	r18, r26
    2b3a:	da 01       	movw	r26, r20
    2b3c:	33 83       	std	Z+3, r19	; 0x03
    2b3e:	22 83       	std	Z+2, r18	; 0x02
    2b40:	60 81       	ld	r22, Z
    2b42:	71 81       	ldd	r23, Z+1	; 0x01
    2b44:	86 0f       	add	r24, r22
    2b46:	97 1f       	adc	r25, r23
    2b48:	82 17       	cp	r24, r18
    2b4a:	93 07       	cpc	r25, r19
    2b4c:	69 f4       	brne	.+26     	; 0x2b68 <free+0x94>
    2b4e:	ec 01       	movw	r28, r24
    2b50:	28 81       	ld	r18, Y
    2b52:	39 81       	ldd	r19, Y+1	; 0x01
    2b54:	26 0f       	add	r18, r22
    2b56:	37 1f       	adc	r19, r23
    2b58:	2e 5f       	subi	r18, 0xFE	; 254
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	31 83       	std	Z+1, r19	; 0x01
    2b5e:	20 83       	st	Z, r18
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	9b 81       	ldd	r25, Y+3	; 0x03
    2b64:	93 83       	std	Z+3, r25	; 0x03
    2b66:	82 83       	std	Z+2, r24	; 0x02
    2b68:	45 2b       	or	r20, r21
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <free+0xa2>
    2b6c:	f0 93 ed 02 	sts	0x02ED, r31
    2b70:	e0 93 ec 02 	sts	0x02EC, r30
    2b74:	42 c0       	rjmp	.+132    	; 0x2bfa <free+0x126>
    2b76:	13 96       	adiw	r26, 0x03	; 3
    2b78:	fc 93       	st	X, r31
    2b7a:	ee 93       	st	-X, r30
    2b7c:	12 97       	sbiw	r26, 0x02	; 2
    2b7e:	ed 01       	movw	r28, r26
    2b80:	49 91       	ld	r20, Y+
    2b82:	59 91       	ld	r21, Y+
    2b84:	9e 01       	movw	r18, r28
    2b86:	24 0f       	add	r18, r20
    2b88:	35 1f       	adc	r19, r21
    2b8a:	e2 17       	cp	r30, r18
    2b8c:	f3 07       	cpc	r31, r19
    2b8e:	71 f4       	brne	.+28     	; 0x2bac <free+0xd8>
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	84 0f       	add	r24, r20
    2b96:	95 1f       	adc	r25, r21
    2b98:	02 96       	adiw	r24, 0x02	; 2
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	9c 93       	st	X, r25
    2b9e:	8e 93       	st	-X, r24
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	13 96       	adiw	r26, 0x03	; 3
    2ba6:	9c 93       	st	X, r25
    2ba8:	8e 93       	st	-X, r24
    2baa:	12 97       	sbiw	r26, 0x02	; 2
    2bac:	e0 e0       	ldi	r30, 0x00	; 0
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	d8 01       	movw	r26, r16
    2bb2:	12 96       	adiw	r26, 0x02	; 2
    2bb4:	8d 91       	ld	r24, X+
    2bb6:	9c 91       	ld	r25, X
    2bb8:	13 97       	sbiw	r26, 0x03	; 3
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <free+0xf0>
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	8c 01       	movw	r16, r24
    2bc2:	f6 cf       	rjmp	.-20     	; 0x2bb0 <free+0xdc>
    2bc4:	8d 91       	ld	r24, X+
    2bc6:	9c 91       	ld	r25, X
    2bc8:	98 01       	movw	r18, r16
    2bca:	2e 5f       	subi	r18, 0xFE	; 254
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	20 91 ea 02 	lds	r18, 0x02EA
    2bd6:	30 91 eb 02 	lds	r19, 0x02EB
    2bda:	28 17       	cp	r18, r24
    2bdc:	39 07       	cpc	r19, r25
    2bde:	69 f4       	brne	.+26     	; 0x2bfa <free+0x126>
    2be0:	30 97       	sbiw	r30, 0x00	; 0
    2be2:	29 f4       	brne	.+10     	; 0x2bee <free+0x11a>
    2be4:	10 92 ed 02 	sts	0x02ED, r1
    2be8:	10 92 ec 02 	sts	0x02EC, r1
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <free+0x11e>
    2bee:	13 82       	std	Z+3, r1	; 0x03
    2bf0:	12 82       	std	Z+2, r1	; 0x02
    2bf2:	10 93 eb 02 	sts	0x02EB, r17
    2bf6:	00 93 ea 02 	sts	0x02EA, r16
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	08 95       	ret

00002c04 <__ftoa_engine>:
    2c04:	28 30       	cpi	r18, 0x08	; 8
    2c06:	08 f0       	brcs	.+2      	; 0x2c0a <__ftoa_engine+0x6>
    2c08:	27 e0       	ldi	r18, 0x07	; 7
    2c0a:	33 27       	eor	r19, r19
    2c0c:	da 01       	movw	r26, r20
    2c0e:	99 0f       	add	r25, r25
    2c10:	31 1d       	adc	r19, r1
    2c12:	87 fd       	sbrc	r24, 7
    2c14:	91 60       	ori	r25, 0x01	; 1
    2c16:	00 96       	adiw	r24, 0x00	; 0
    2c18:	61 05       	cpc	r22, r1
    2c1a:	71 05       	cpc	r23, r1
    2c1c:	39 f4       	brne	.+14     	; 0x2c2c <__ftoa_engine+0x28>
    2c1e:	32 60       	ori	r19, 0x02	; 2
    2c20:	2e 5f       	subi	r18, 0xFE	; 254
    2c22:	3d 93       	st	X+, r19
    2c24:	30 e3       	ldi	r19, 0x30	; 48
    2c26:	2a 95       	dec	r18
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <__ftoa_engine+0x1e>
    2c2a:	08 95       	ret
    2c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c2e:	30 f0       	brcs	.+12     	; 0x2c3c <__ftoa_engine+0x38>
    2c30:	80 38       	cpi	r24, 0x80	; 128
    2c32:	71 05       	cpc	r23, r1
    2c34:	61 05       	cpc	r22, r1
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <__ftoa_engine+0x36>
    2c38:	3c 5f       	subi	r19, 0xFC	; 252
    2c3a:	3c 5f       	subi	r19, 0xFC	; 252
    2c3c:	3d 93       	st	X+, r19
    2c3e:	91 30       	cpi	r25, 0x01	; 1
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <__ftoa_engine+0x40>
    2c42:	80 68       	ori	r24, 0x80	; 128
    2c44:	91 1d       	adc	r25, r1
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	1f 93       	push	r17
    2c4c:	0f 93       	push	r16
    2c4e:	ff 92       	push	r15
    2c50:	ef 92       	push	r14
    2c52:	19 2f       	mov	r17, r25
    2c54:	98 7f       	andi	r25, 0xF8	; 248
    2c56:	96 95       	lsr	r25
    2c58:	e9 2f       	mov	r30, r25
    2c5a:	96 95       	lsr	r25
    2c5c:	96 95       	lsr	r25
    2c5e:	e9 0f       	add	r30, r25
    2c60:	ff 27       	eor	r31, r31
    2c62:	e2 52       	subi	r30, 0x22	; 34
    2c64:	fe 4f       	sbci	r31, 0xFE	; 254
    2c66:	99 27       	eor	r25, r25
    2c68:	33 27       	eor	r19, r19
    2c6a:	ee 24       	eor	r14, r14
    2c6c:	ff 24       	eor	r15, r15
    2c6e:	a7 01       	movw	r20, r14
    2c70:	e7 01       	movw	r28, r14
    2c72:	05 90       	lpm	r0, Z+
    2c74:	08 94       	sec
    2c76:	07 94       	ror	r0
    2c78:	28 f4       	brcc	.+10     	; 0x2c84 <__ftoa_engine+0x80>
    2c7a:	36 0f       	add	r19, r22
    2c7c:	e7 1e       	adc	r14, r23
    2c7e:	f8 1e       	adc	r15, r24
    2c80:	49 1f       	adc	r20, r25
    2c82:	51 1d       	adc	r21, r1
    2c84:	66 0f       	add	r22, r22
    2c86:	77 1f       	adc	r23, r23
    2c88:	88 1f       	adc	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	06 94       	lsr	r0
    2c8e:	a1 f7       	brne	.-24     	; 0x2c78 <__ftoa_engine+0x74>
    2c90:	05 90       	lpm	r0, Z+
    2c92:	07 94       	ror	r0
    2c94:	28 f4       	brcc	.+10     	; 0x2ca0 <__ftoa_engine+0x9c>
    2c96:	e7 0e       	add	r14, r23
    2c98:	f8 1e       	adc	r15, r24
    2c9a:	49 1f       	adc	r20, r25
    2c9c:	56 1f       	adc	r21, r22
    2c9e:	c1 1d       	adc	r28, r1
    2ca0:	77 0f       	add	r23, r23
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	66 1f       	adc	r22, r22
    2ca8:	06 94       	lsr	r0
    2caa:	a1 f7       	brne	.-24     	; 0x2c94 <__ftoa_engine+0x90>
    2cac:	05 90       	lpm	r0, Z+
    2cae:	07 94       	ror	r0
    2cb0:	28 f4       	brcc	.+10     	; 0x2cbc <__ftoa_engine+0xb8>
    2cb2:	f8 0e       	add	r15, r24
    2cb4:	49 1f       	adc	r20, r25
    2cb6:	56 1f       	adc	r21, r22
    2cb8:	c7 1f       	adc	r28, r23
    2cba:	d1 1d       	adc	r29, r1
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	66 1f       	adc	r22, r22
    2cc2:	77 1f       	adc	r23, r23
    2cc4:	06 94       	lsr	r0
    2cc6:	a1 f7       	brne	.-24     	; 0x2cb0 <__ftoa_engine+0xac>
    2cc8:	05 90       	lpm	r0, Z+
    2cca:	07 94       	ror	r0
    2ccc:	20 f4       	brcc	.+8      	; 0x2cd6 <__ftoa_engine+0xd2>
    2cce:	49 0f       	add	r20, r25
    2cd0:	56 1f       	adc	r21, r22
    2cd2:	c7 1f       	adc	r28, r23
    2cd4:	d8 1f       	adc	r29, r24
    2cd6:	99 0f       	add	r25, r25
    2cd8:	66 1f       	adc	r22, r22
    2cda:	77 1f       	adc	r23, r23
    2cdc:	88 1f       	adc	r24, r24
    2cde:	06 94       	lsr	r0
    2ce0:	a9 f7       	brne	.-22     	; 0x2ccc <__ftoa_engine+0xc8>
    2ce2:	84 91       	lpm	r24, Z
    2ce4:	10 95       	com	r17
    2ce6:	17 70       	andi	r17, 0x07	; 7
    2ce8:	41 f0       	breq	.+16     	; 0x2cfa <__ftoa_engine+0xf6>
    2cea:	d6 95       	lsr	r29
    2cec:	c7 95       	ror	r28
    2cee:	57 95       	ror	r21
    2cf0:	47 95       	ror	r20
    2cf2:	f7 94       	ror	r15
    2cf4:	e7 94       	ror	r14
    2cf6:	1a 95       	dec	r17
    2cf8:	c1 f7       	brne	.-16     	; 0x2cea <__ftoa_engine+0xe6>
    2cfa:	e4 e8       	ldi	r30, 0x84	; 132
    2cfc:	f1 e0       	ldi	r31, 0x01	; 1
    2cfe:	68 94       	set
    2d00:	15 90       	lpm	r1, Z+
    2d02:	15 91       	lpm	r17, Z+
    2d04:	35 91       	lpm	r19, Z+
    2d06:	65 91       	lpm	r22, Z+
    2d08:	95 91       	lpm	r25, Z+
    2d0a:	05 90       	lpm	r0, Z+
    2d0c:	7f e2       	ldi	r23, 0x2F	; 47
    2d0e:	73 95       	inc	r23
    2d10:	e1 18       	sub	r14, r1
    2d12:	f1 0a       	sbc	r15, r17
    2d14:	43 0b       	sbc	r20, r19
    2d16:	56 0b       	sbc	r21, r22
    2d18:	c9 0b       	sbc	r28, r25
    2d1a:	d0 09       	sbc	r29, r0
    2d1c:	c0 f7       	brcc	.-16     	; 0x2d0e <__ftoa_engine+0x10a>
    2d1e:	e1 0c       	add	r14, r1
    2d20:	f1 1e       	adc	r15, r17
    2d22:	43 1f       	adc	r20, r19
    2d24:	56 1f       	adc	r21, r22
    2d26:	c9 1f       	adc	r28, r25
    2d28:	d0 1d       	adc	r29, r0
    2d2a:	7e f4       	brtc	.+30     	; 0x2d4a <__ftoa_engine+0x146>
    2d2c:	70 33       	cpi	r23, 0x30	; 48
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <__ftoa_engine+0x130>
    2d30:	8a 95       	dec	r24
    2d32:	e6 cf       	rjmp	.-52     	; 0x2d00 <__ftoa_engine+0xfc>
    2d34:	e8 94       	clt
    2d36:	01 50       	subi	r16, 0x01	; 1
    2d38:	30 f0       	brcs	.+12     	; 0x2d46 <__ftoa_engine+0x142>
    2d3a:	08 0f       	add	r16, r24
    2d3c:	0a f4       	brpl	.+2      	; 0x2d40 <__ftoa_engine+0x13c>
    2d3e:	00 27       	eor	r16, r16
    2d40:	02 17       	cp	r16, r18
    2d42:	08 f4       	brcc	.+2      	; 0x2d46 <__ftoa_engine+0x142>
    2d44:	20 2f       	mov	r18, r16
    2d46:	23 95       	inc	r18
    2d48:	02 2f       	mov	r16, r18
    2d4a:	7a 33       	cpi	r23, 0x3A	; 58
    2d4c:	28 f0       	brcs	.+10     	; 0x2d58 <__ftoa_engine+0x154>
    2d4e:	79 e3       	ldi	r23, 0x39	; 57
    2d50:	7d 93       	st	X+, r23
    2d52:	2a 95       	dec	r18
    2d54:	e9 f7       	brne	.-6      	; 0x2d50 <__ftoa_engine+0x14c>
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <__ftoa_engine+0x174>
    2d58:	7d 93       	st	X+, r23
    2d5a:	2a 95       	dec	r18
    2d5c:	89 f6       	brne	.-94     	; 0x2d00 <__ftoa_engine+0xfc>
    2d5e:	06 94       	lsr	r0
    2d60:	97 95       	ror	r25
    2d62:	67 95       	ror	r22
    2d64:	37 95       	ror	r19
    2d66:	17 95       	ror	r17
    2d68:	17 94       	ror	r1
    2d6a:	e1 18       	sub	r14, r1
    2d6c:	f1 0a       	sbc	r15, r17
    2d6e:	43 0b       	sbc	r20, r19
    2d70:	56 0b       	sbc	r21, r22
    2d72:	c9 0b       	sbc	r28, r25
    2d74:	d0 09       	sbc	r29, r0
    2d76:	98 f0       	brcs	.+38     	; 0x2d9e <__ftoa_engine+0x19a>
    2d78:	23 95       	inc	r18
    2d7a:	7e 91       	ld	r23, -X
    2d7c:	73 95       	inc	r23
    2d7e:	7a 33       	cpi	r23, 0x3A	; 58
    2d80:	08 f0       	brcs	.+2      	; 0x2d84 <__ftoa_engine+0x180>
    2d82:	70 e3       	ldi	r23, 0x30	; 48
    2d84:	7c 93       	st	X, r23
    2d86:	20 13       	cpse	r18, r16
    2d88:	b8 f7       	brcc	.-18     	; 0x2d78 <__ftoa_engine+0x174>
    2d8a:	7e 91       	ld	r23, -X
    2d8c:	70 61       	ori	r23, 0x10	; 16
    2d8e:	7d 93       	st	X+, r23
    2d90:	30 f0       	brcs	.+12     	; 0x2d9e <__ftoa_engine+0x19a>
    2d92:	83 95       	inc	r24
    2d94:	71 e3       	ldi	r23, 0x31	; 49
    2d96:	7d 93       	st	X+, r23
    2d98:	70 e3       	ldi	r23, 0x30	; 48
    2d9a:	2a 95       	dec	r18
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <__ftoa_engine+0x192>
    2d9e:	11 24       	eor	r1, r1
    2da0:	ef 90       	pop	r14
    2da2:	ff 90       	pop	r15
    2da4:	0f 91       	pop	r16
    2da6:	1f 91       	pop	r17
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	99 27       	eor	r25, r25
    2dae:	87 fd       	sbrc	r24, 7
    2db0:	90 95       	com	r25
    2db2:	08 95       	ret

00002db4 <strnlen_P>:
    2db4:	fc 01       	movw	r30, r24
    2db6:	05 90       	lpm	r0, Z+
    2db8:	61 50       	subi	r22, 0x01	; 1
    2dba:	70 40       	sbci	r23, 0x00	; 0
    2dbc:	01 10       	cpse	r0, r1
    2dbe:	d8 f7       	brcc	.-10     	; 0x2db6 <strnlen_P+0x2>
    2dc0:	80 95       	com	r24
    2dc2:	90 95       	com	r25
    2dc4:	8e 0f       	add	r24, r30
    2dc6:	9f 1f       	adc	r25, r31
    2dc8:	08 95       	ret

00002dca <memset>:
    2dca:	dc 01       	movw	r26, r24
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <memset+0x6>
    2dce:	6d 93       	st	X+, r22
    2dd0:	41 50       	subi	r20, 0x01	; 1
    2dd2:	50 40       	sbci	r21, 0x00	; 0
    2dd4:	e0 f7       	brcc	.-8      	; 0x2dce <memset+0x4>
    2dd6:	08 95       	ret

00002dd8 <strnlen>:
    2dd8:	fc 01       	movw	r30, r24
    2dda:	61 50       	subi	r22, 0x01	; 1
    2ddc:	70 40       	sbci	r23, 0x00	; 0
    2dde:	01 90       	ld	r0, Z+
    2de0:	01 10       	cpse	r0, r1
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <strnlen+0x2>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	8e 0f       	add	r24, r30
    2dea:	9f 1f       	adc	r25, r31
    2dec:	08 95       	ret

00002dee <fputc>:
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	fb 01       	movw	r30, r22
    2df8:	23 81       	ldd	r18, Z+3	; 0x03
    2dfa:	21 fd       	sbrc	r18, 1
    2dfc:	03 c0       	rjmp	.+6      	; 0x2e04 <fputc+0x16>
    2dfe:	8f ef       	ldi	r24, 0xFF	; 255
    2e00:	9f ef       	ldi	r25, 0xFF	; 255
    2e02:	28 c0       	rjmp	.+80     	; 0x2e54 <fputc+0x66>
    2e04:	22 ff       	sbrs	r18, 2
    2e06:	16 c0       	rjmp	.+44     	; 0x2e34 <fputc+0x46>
    2e08:	46 81       	ldd	r20, Z+6	; 0x06
    2e0a:	57 81       	ldd	r21, Z+7	; 0x07
    2e0c:	24 81       	ldd	r18, Z+4	; 0x04
    2e0e:	35 81       	ldd	r19, Z+5	; 0x05
    2e10:	42 17       	cp	r20, r18
    2e12:	53 07       	cpc	r21, r19
    2e14:	44 f4       	brge	.+16     	; 0x2e26 <fputc+0x38>
    2e16:	a0 81       	ld	r26, Z
    2e18:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1a:	9d 01       	movw	r18, r26
    2e1c:	2f 5f       	subi	r18, 0xFF	; 255
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	31 83       	std	Z+1, r19	; 0x01
    2e22:	20 83       	st	Z, r18
    2e24:	8c 93       	st	X, r24
    2e26:	26 81       	ldd	r18, Z+6	; 0x06
    2e28:	37 81       	ldd	r19, Z+7	; 0x07
    2e2a:	2f 5f       	subi	r18, 0xFF	; 255
    2e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2e:	37 83       	std	Z+7, r19	; 0x07
    2e30:	26 83       	std	Z+6, r18	; 0x06
    2e32:	10 c0       	rjmp	.+32     	; 0x2e54 <fputc+0x66>
    2e34:	eb 01       	movw	r28, r22
    2e36:	09 2f       	mov	r16, r25
    2e38:	18 2f       	mov	r17, r24
    2e3a:	00 84       	ldd	r0, Z+8	; 0x08
    2e3c:	f1 85       	ldd	r31, Z+9	; 0x09
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	09 95       	icall
    2e42:	89 2b       	or	r24, r25
    2e44:	e1 f6       	brne	.-72     	; 0x2dfe <fputc+0x10>
    2e46:	8e 81       	ldd	r24, Y+6	; 0x06
    2e48:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	9f 83       	std	Y+7, r25	; 0x07
    2e4e:	8e 83       	std	Y+6, r24	; 0x06
    2e50:	81 2f       	mov	r24, r17
    2e52:	90 2f       	mov	r25, r16
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	08 95       	ret

00002e5e <sprintf>:
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	0d 89       	ldd	r16, Y+21	; 0x15
    2e78:	1e 89       	ldd	r17, Y+22	; 0x16
    2e7a:	86 e0       	ldi	r24, 0x06	; 6
    2e7c:	8c 83       	std	Y+4, r24	; 0x04
    2e7e:	1a 83       	std	Y+2, r17	; 0x02
    2e80:	09 83       	std	Y+1, r16	; 0x01
    2e82:	8f ef       	ldi	r24, 0xFF	; 255
    2e84:	9f e7       	ldi	r25, 0x7F	; 127
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	ae 01       	movw	r20, r28
    2e8c:	47 5e       	subi	r20, 0xE7	; 231
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	6f 89       	ldd	r22, Y+23	; 0x17
    2e92:	78 8d       	ldd	r23, Y+24	; 0x18
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	bf d9       	rcall	.-3202   	; 0x2218 <vfprintf>
    2e9a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e9c:	38 85       	ldd	r19, Y+8	; 0x08
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	10 82       	st	Z, r1
    2ea6:	2e 96       	adiw	r28, 0x0e	; 14
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	08 95       	ret

00002ebc <__ultoa_invert>:
    2ebc:	fa 01       	movw	r30, r20
    2ebe:	aa 27       	eor	r26, r26
    2ec0:	28 30       	cpi	r18, 0x08	; 8
    2ec2:	51 f1       	breq	.+84     	; 0x2f18 <__ultoa_invert+0x5c>
    2ec4:	20 31       	cpi	r18, 0x10	; 16
    2ec6:	81 f1       	breq	.+96     	; 0x2f28 <__ultoa_invert+0x6c>
    2ec8:	e8 94       	clt
    2eca:	6f 93       	push	r22
    2ecc:	6e 7f       	andi	r22, 0xFE	; 254
    2ece:	6e 5f       	subi	r22, 0xFE	; 254
    2ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed6:	af 4f       	sbci	r26, 0xFF	; 255
    2ed8:	b1 e0       	ldi	r27, 0x01	; 1
    2eda:	3e d0       	rcall	.+124    	; 0x2f58 <__ultoa_invert+0x9c>
    2edc:	b4 e0       	ldi	r27, 0x04	; 4
    2ede:	3c d0       	rcall	.+120    	; 0x2f58 <__ultoa_invert+0x9c>
    2ee0:	67 0f       	add	r22, r23
    2ee2:	78 1f       	adc	r23, r24
    2ee4:	89 1f       	adc	r24, r25
    2ee6:	9a 1f       	adc	r25, r26
    2ee8:	a1 1d       	adc	r26, r1
    2eea:	68 0f       	add	r22, r24
    2eec:	79 1f       	adc	r23, r25
    2eee:	8a 1f       	adc	r24, r26
    2ef0:	91 1d       	adc	r25, r1
    2ef2:	a1 1d       	adc	r26, r1
    2ef4:	6a 0f       	add	r22, r26
    2ef6:	71 1d       	adc	r23, r1
    2ef8:	81 1d       	adc	r24, r1
    2efa:	91 1d       	adc	r25, r1
    2efc:	a1 1d       	adc	r26, r1
    2efe:	20 d0       	rcall	.+64     	; 0x2f40 <__ultoa_invert+0x84>
    2f00:	09 f4       	brne	.+2      	; 0x2f04 <__ultoa_invert+0x48>
    2f02:	68 94       	set
    2f04:	3f 91       	pop	r19
    2f06:	2a e0       	ldi	r18, 0x0A	; 10
    2f08:	26 9f       	mul	r18, r22
    2f0a:	11 24       	eor	r1, r1
    2f0c:	30 19       	sub	r19, r0
    2f0e:	30 5d       	subi	r19, 0xD0	; 208
    2f10:	31 93       	st	Z+, r19
    2f12:	de f6       	brtc	.-74     	; 0x2eca <__ultoa_invert+0xe>
    2f14:	cf 01       	movw	r24, r30
    2f16:	08 95       	ret
    2f18:	46 2f       	mov	r20, r22
    2f1a:	47 70       	andi	r20, 0x07	; 7
    2f1c:	40 5d       	subi	r20, 0xD0	; 208
    2f1e:	41 93       	st	Z+, r20
    2f20:	b3 e0       	ldi	r27, 0x03	; 3
    2f22:	0f d0       	rcall	.+30     	; 0x2f42 <__ultoa_invert+0x86>
    2f24:	c9 f7       	brne	.-14     	; 0x2f18 <__ultoa_invert+0x5c>
    2f26:	f6 cf       	rjmp	.-20     	; 0x2f14 <__ultoa_invert+0x58>
    2f28:	46 2f       	mov	r20, r22
    2f2a:	4f 70       	andi	r20, 0x0F	; 15
    2f2c:	40 5d       	subi	r20, 0xD0	; 208
    2f2e:	4a 33       	cpi	r20, 0x3A	; 58
    2f30:	18 f0       	brcs	.+6      	; 0x2f38 <__ultoa_invert+0x7c>
    2f32:	49 5d       	subi	r20, 0xD9	; 217
    2f34:	31 fd       	sbrc	r19, 1
    2f36:	40 52       	subi	r20, 0x20	; 32
    2f38:	41 93       	st	Z+, r20
    2f3a:	02 d0       	rcall	.+4      	; 0x2f40 <__ultoa_invert+0x84>
    2f3c:	a9 f7       	brne	.-22     	; 0x2f28 <__ultoa_invert+0x6c>
    2f3e:	ea cf       	rjmp	.-44     	; 0x2f14 <__ultoa_invert+0x58>
    2f40:	b4 e0       	ldi	r27, 0x04	; 4
    2f42:	a6 95       	lsr	r26
    2f44:	97 95       	ror	r25
    2f46:	87 95       	ror	r24
    2f48:	77 95       	ror	r23
    2f4a:	67 95       	ror	r22
    2f4c:	ba 95       	dec	r27
    2f4e:	c9 f7       	brne	.-14     	; 0x2f42 <__ultoa_invert+0x86>
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	61 05       	cpc	r22, r1
    2f54:	71 05       	cpc	r23, r1
    2f56:	08 95       	ret
    2f58:	9b 01       	movw	r18, r22
    2f5a:	ac 01       	movw	r20, r24
    2f5c:	0a 2e       	mov	r0, r26
    2f5e:	06 94       	lsr	r0
    2f60:	57 95       	ror	r21
    2f62:	47 95       	ror	r20
    2f64:	37 95       	ror	r19
    2f66:	27 95       	ror	r18
    2f68:	ba 95       	dec	r27
    2f6a:	c9 f7       	brne	.-14     	; 0x2f5e <__ultoa_invert+0xa2>
    2f6c:	62 0f       	add	r22, r18
    2f6e:	73 1f       	adc	r23, r19
    2f70:	84 1f       	adc	r24, r20
    2f72:	95 1f       	adc	r25, r21
    2f74:	a0 1d       	adc	r26, r0
    2f76:	08 95       	ret

00002f78 <_exit>:
    2f78:	f8 94       	cli

00002f7a <__stop_program>:
    2f7a:	ff cf       	rjmp	.-2      	; 0x2f7a <__stop_program>
