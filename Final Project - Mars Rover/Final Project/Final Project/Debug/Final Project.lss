
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800100  00003102  00003196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002f8  008002f8  0000338e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c75  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094d  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d8  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  00007fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aca  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198c  00000000  00000000  00009222  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000abae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	5a c1       	rjmp	.+692    	; 0x2ba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c1       	rjmp	.+688    	; 0x2ba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c1       	rjmp	.+684    	; 0x2ba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c1       	rjmp	.+680    	; 0x2ba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c1       	rjmp	.+676    	; 0x2ba <__bad_interrupt>
      16:	00 00       	nop
      18:	50 c1       	rjmp	.+672    	; 0x2ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4e c1       	rjmp	.+668    	; 0x2ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c1       	rjmp	.+664    	; 0x2ba <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_9>
      28:	48 c1       	rjmp	.+656    	; 0x2ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_11>
      30:	44 c1       	rjmp	.+648    	; 0x2ba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c1       	rjmp	.+644    	; 0x2ba <__bad_interrupt>
      36:	00 00       	nop
      38:	40 c1       	rjmp	.+640    	; 0x2ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3e c1       	rjmp	.+636    	; 0x2ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	3c c1       	rjmp	.+632    	; 0x2ba <__bad_interrupt>
      42:	00 00       	nop
      44:	3a c1       	rjmp	.+628    	; 0x2ba <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c1       	rjmp	.+624    	; 0x2ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c1       	rjmp	.+620    	; 0x2ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	34 c1       	rjmp	.+616    	; 0x2ba <__bad_interrupt>
      52:	00 00       	nop
      54:	32 c1       	rjmp	.+612    	; 0x2ba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c1       	rjmp	.+608    	; 0x2ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c1       	rjmp	.+604    	; 0x2ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c1       	rjmp	.+600    	; 0x2ba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c1       	rjmp	.+596    	; 0x2ba <__bad_interrupt>
      66:	00 00       	nop
      68:	28 c1       	rjmp	.+592    	; 0x2ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	26 c1       	rjmp	.+588    	; 0x2ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c1       	rjmp	.+584    	; 0x2ba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c1       	rjmp	.+580    	; 0x2ba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c1       	rjmp	.+576    	; 0x2ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c1       	rjmp	.+572    	; 0x2ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c1       	rjmp	.+568    	; 0x2ba <__bad_interrupt>
      82:	00 00       	nop
      84:	1a c1       	rjmp	.+564    	; 0x2ba <__bad_interrupt>
      86:	00 00       	nop
      88:	18 c1       	rjmp	.+560    	; 0x2ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 06       	cpc	r3, r31
      d8:	64 ec       	ldi	r22, 0xC4	; 196
      da:	1b 3c       	cpi	r17, 0xCB	; 203
      dc:	04 bc       	out	0x24, r0	; 36
      de:	16 3e       	cpi	r17, 0xE6	; 230
      e0:	3b e5       	ldi	r19, 0x5B	; 91
      e2:	b9 3c       	cpi	r27, 0xC9	; 201
      e4:	c9 3c       	cpi	r28, 0xC9	; 201
      e6:	37 c2       	rjmp	.+1134   	; 0x556 <move+0x22>
      e8:	9e 5a       	subi	r25, 0xAE	; 174
      ea:	3d 66       	ori	r19, 0x6D	; 109
      ec:	04 98       	cbi	0x00, 4	; 0
      ee:	08 3e       	cpi	r16, 0xE8	; 232
      f0:	ea 69       	ori	r30, 0x9A	; 154
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	07 63       	ori	r16, 0x37	; 55
      fc:	42 36       	cpi	r20, 0x62	; 98
      fe:	b7 9b       	sbis	0x16, 7	; 22
     100:	d8 a7       	std	Y+40, r29	; 0x28
     102:	1a 39       	cpi	r17, 0x9A	; 154
     104:	68 56       	subi	r22, 0x68	; 104
     106:	18 ae       	std	Y+56, r1	; 0x38
     108:	ba ab       	std	Y+50, r27	; 0x32
     10a:	55 8c       	ldd	r5, Z+29	; 0x1d
     10c:	1d 3c       	cpi	r17, 0xCD	; 205
     10e:	b7 cc       	rjmp	.-1682   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
     110:	57 63       	ori	r21, 0x37	; 55
     112:	bd 6d       	ori	r27, 0xDD	; 221
     114:	ed fd       	.word	0xfded	; ????
     116:	75 3e       	cpi	r23, 0xE5	; 229
     118:	f6 17       	cp	r31, r22
     11a:	72 31       	cpi	r23, 0x12	; 18
     11c:	bf 00       	.word	0x00bf	; ????
     11e:	00 00       	nop
     120:	80 3f       	cpi	r24, 0xF0	; 240
     122:	08 00       	.word	0x0008	; ????
     124:	00 00       	nop
     126:	be 92       	st	-X, r11
     128:	24 49       	sbci	r18, 0x94	; 148
     12a:	12 3e       	cpi	r17, 0xE2	; 226
     12c:	ab aa       	std	Y+51, r10	; 0x33
     12e:	aa 2a       	or	r10, r26
     130:	be cd       	rjmp	.-1156   	; 0xfffffcae <__eeprom_end+0xff7efcae>
     132:	cc cc       	rjmp	.-1640   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     134:	4c 3e       	cpi	r20, 0xEC	; 236
     136:	00 00       	nop
     138:	00 80       	ld	r0, Z
     13a:	be ab       	std	Y+54, r27	; 0x36
     13c:	aa aa       	std	Y+50, r10	; 0x32
     13e:	aa 3e       	cpi	r26, 0xEA	; 234
     140:	00 00       	nop
     142:	00 00       	nop
     144:	bf 00       	.word	0x00bf	; ????
     146:	00 00       	nop
     148:	80 3f       	cpi	r24, 0xF0	; 240
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	00 08       	sbc	r0, r0
     150:	41 78       	andi	r20, 0x81	; 129
     152:	d3 bb       	out	0x13, r29	; 19
     154:	43 87       	std	Z+11, r20	; 0x0b
     156:	d1 13       	cpse	r29, r17
     158:	3d 19       	sub	r19, r13
     15a:	0e 3c       	cpi	r16, 0xCE	; 206
     15c:	c3 bd       	out	0x23, r28	; 35
     15e:	42 82       	std	Z+2, r4	; 0x02
     160:	ad 2b       	or	r26, r29
     162:	3e 68       	ori	r19, 0x8E	; 142
     164:	ec 82       	std	Y+4, r14	; 0x04
     166:	76 be       	out	0x36, r7	; 54
     168:	d9 8f       	std	Y+25, r29	; 0x19
     16a:	e1 a9       	ldd	r30, Z+49	; 0x31
     16c:	3e 4c       	sbci	r19, 0xCE	; 206
     16e:	80 ef       	ldi	r24, 0xF0	; 240
     170:	ff be       	out	0x3f, r15	; 63
     172:	01 c4       	rjmp	.+2050   	; 0x976 <initializations+0xce>
     174:	ff 7f       	andi	r31, 0xFF	; 255
     176:	3f 00       	.word	0x003f	; ????
     178:	00 00       	nop
	...

0000017c <__trampolines_end>:
     17c:	6e 61       	ori	r22, 0x1E	; 30
     17e:	6e 00       	.word	0x006e	; ????

00000180 <__c.2177>:
     180:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     190:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1a0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1b0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1c0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1d0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1e0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1f0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     200:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     210:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     220:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     230:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     240:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     250:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     260:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     270:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	d0 e1       	ldi	r29, 0x10	; 16
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61

0000028a <__do_copy_data>:
     28a:	12 e0       	ldi	r17, 0x02	; 2
     28c:	a0 e0       	ldi	r26, 0x00	; 0
     28e:	b1 e0       	ldi	r27, 0x01	; 1
     290:	e2 e0       	ldi	r30, 0x02	; 2
     292:	f1 e3       	ldi	r31, 0x31	; 49
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0b bf       	out	0x3b, r16	; 59
     298:	02 c0       	rjmp	.+4      	; 0x29e <__do_copy_data+0x14>
     29a:	07 90       	elpm	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	a8 3f       	cpi	r26, 0xF8	; 248
     2a0:	b1 07       	cpc	r27, r17
     2a2:	d9 f7       	brne	.-10     	; 0x29a <__do_copy_data+0x10>

000002a4 <__do_clear_bss>:
     2a4:	23 e0       	ldi	r18, 0x03	; 3
     2a6:	a8 ef       	ldi	r26, 0xF8	; 248
     2a8:	b2 e0       	ldi	r27, 0x02	; 2
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <.do_clear_bss_start>

000002ac <.do_clear_bss_loop>:
     2ac:	1d 92       	st	X+, r1

000002ae <.do_clear_bss_start>:
     2ae:	a4 30       	cpi	r26, 0x04	; 4
     2b0:	b2 07       	cpc	r27, r18
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <.do_clear_bss_loop>
     2b4:	65 d2       	rcall	.+1226   	; 0x780 <main>
     2b6:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <_exit>

000002ba <__bad_interrupt>:
     2ba:	a2 ce       	rjmp	.-700    	; 0x0 <__vectors>

000002bc <lcd_toggle_clear>:


/// Clears the LCD
void lcd_clear(void) {
	lcd_command(HD_LCD_CLEAR);
	wait_ms(1);
     2bc:	de 9a       	sbi	0x1b, 6	; 27
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
     2c4:	de 98       	cbi	0x1b, 6	; 27
     2c6:	8b b3       	in	r24, 0x1b	; 27
     2c8:	80 7f       	andi	r24, 0xF0	; 240
     2ca:	8b bb       	out	0x1b, r24	; 27
     2cc:	08 95       	ret

000002ce <lcd_command>:
     2ce:	cf 93       	push	r28
     2d0:	c8 2f       	mov	r28, r24
     2d2:	dc 98       	cbi	0x1b, 4	; 27
     2d4:	8b b3       	in	r24, 0x1b	; 27
     2d6:	9c 2f       	mov	r25, r28
     2d8:	92 95       	swap	r25
     2da:	9f 70       	andi	r25, 0x0F	; 15
     2dc:	89 2b       	or	r24, r25
     2de:	8b bb       	out	0x1b, r24	; 27
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	ec df       	rcall	.-40     	; 0x2bc <lcd_toggle_clear>
     2e4:	8b b3       	in	r24, 0x1b	; 27
     2e6:	cf 70       	andi	r28, 0x0F	; 15
     2e8:	c8 2b       	or	r28, r24
     2ea:	cb bb       	out	0x1b, r28	; 27
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	e6 df       	rcall	.-52     	; 0x2bc <lcd_toggle_clear>
     2f0:	dc 9a       	sbi	0x1b, 4	; 27
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	ea cf       	rjmp	.-44     	; 0x2ce <lcd_command>
     2fa:	08 95       	ret

000002fc <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
     304:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
	PORTA&=~enable;
     30e:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
     310:	85 e0       	ldi	r24, 0x05	; 5
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
	PORTA|=enable;
     318:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
	PORTA&=~enable;
     322:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
     324:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
	PORTA&=~enable;
     32e:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	c2 df       	rcall	.-124    	; 0x2bc <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
     338:	8b b3       	in	r24, 0x1b	; 27
     33a:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	be df       	rcall	.-132    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x0E;
     340:	8b b3       	in	r24, 0x1b	; 27
     342:	8e 60       	ori	r24, 0x0E	; 14
     344:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	b9 df       	rcall	.-142    	; 0x2bc <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
     34a:	8b b3       	in	r24, 0x1b	; 27
     34c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	b5 df       	rcall	.-150    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x06;
     352:	8b b3       	in	r24, 0x1b	; 27
     354:	86 60       	ori	r24, 0x06	; 6
     356:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	b0 df       	rcall	.-160    	; 0x2bc <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
     35c:	8b b3       	in	r24, 0x1b	; 27
     35e:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	ac df       	rcall	.-168    	; 0x2bc <lcd_toggle_clear>
	PORTA|=0x01;
     364:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	a9 df       	rcall	.-174    	; 0x2bc <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
     36a:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
     36c:	c4 cf       	rjmp	.-120    	; 0x2f6 <lcd_home_line1>
     36e:	08 95       	ret

00000370 <rotate>:
	}
	
	oi_set_wheels(0, 0);
}

void rotate(oi_t *self, float degrees, robot* bot) {
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
     392:	4a 01       	movw	r8, r20
     394:	5b 01       	movw	r10, r22
     396:	89 01       	movw	r16, r18
		float sensordegrees = degrees/1.1; //calibration: make number smaller to oversteer.
     398:	2d ec       	ldi	r18, 0xCD	; 205
     39a:	3c ec       	ldi	r19, 0xCC	; 204
     39c:	4c e8       	ldi	r20, 0x8C	; 140
     39e:	5f e3       	ldi	r21, 0x3F	; 63
     3a0:	c5 01       	movw	r24, r10
     3a2:	b4 01       	movw	r22, r8
     3a4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__divsf3>
     3a8:	6b 01       	movw	r12, r22
     3aa:	7c 01       	movw	r14, r24
		float toturn = 0;
		
		bot->angle += degrees;
     3ac:	f8 01       	movw	r30, r16
     3ae:	20 85       	ldd	r18, Z+8	; 0x08
     3b0:	31 85       	ldd	r19, Z+9	; 0x09
     3b2:	42 85       	ldd	r20, Z+10	; 0x0a
     3b4:	53 85       	ldd	r21, Z+11	; 0x0b
     3b6:	c5 01       	movw	r24, r10
     3b8:	b4 01       	movw	r22, r8
     3ba:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     3be:	2b 01       	movw	r4, r22
     3c0:	3c 01       	movw	r6, r24
		
		if (bot->angle < 0) {
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	a9 01       	movw	r20, r18
     3c8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	74 f4       	brge	.+28     	; 0x3ec <rotate+0x7c>
			bot->angle = 360 + bot->angle;
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	44 eb       	ldi	r20, 0xB4	; 180
     3d6:	53 e4       	ldi	r21, 0x43	; 67
     3d8:	c3 01       	movw	r24, r6
     3da:	b2 01       	movw	r22, r4
     3dc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     3e0:	f8 01       	movw	r30, r16
     3e2:	60 87       	std	Z+8, r22	; 0x08
     3e4:	71 87       	std	Z+9, r23	; 0x09
     3e6:	82 87       	std	Z+10, r24	; 0x0a
     3e8:	93 87       	std	Z+11, r25	; 0x0b
     3ea:	1d c0       	rjmp	.+58     	; 0x426 <rotate+0xb6>
		} else if (bot->angle > 360) {
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	44 eb       	ldi	r20, 0xB4	; 180
     3f2:	53 e4       	ldi	r21, 0x43	; 67
     3f4:	c3 01       	movw	r24, r6
     3f6:	b2 01       	movw	r22, r4
     3f8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     3fc:	18 16       	cp	r1, r24
     3fe:	34 f0       	brlt	.+12     	; 0x40c <rotate+0x9c>

void rotate(oi_t *self, float degrees, robot* bot) {
		float sensordegrees = degrees/1.1; //calibration: make number smaller to oversteer.
		float toturn = 0;
		
		bot->angle += degrees;
     400:	f8 01       	movw	r30, r16
     402:	40 86       	std	Z+8, r4	; 0x08
     404:	51 86       	std	Z+9, r5	; 0x09
     406:	62 86       	std	Z+10, r6	; 0x0a
     408:	73 86       	std	Z+11, r7	; 0x0b
     40a:	0d c0       	rjmp	.+26     	; 0x426 <rotate+0xb6>
		
		if (bot->angle < 0) {
			bot->angle = 360 + bot->angle;
		} else if (bot->angle > 360) {
			bot->angle = bot->angle - 360;
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	44 eb       	ldi	r20, 0xB4	; 180
     412:	53 e4       	ldi	r21, 0x43	; 67
     414:	c3 01       	movw	r24, r6
     416:	b2 01       	movw	r22, r4
     418:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__subsf3>
     41c:	f8 01       	movw	r30, r16
     41e:	60 87       	std	Z+8, r22	; 0x08
     420:	71 87       	std	Z+9, r23	; 0x09
     422:	82 87       	std	Z+10, r24	; 0x0a
     424:	93 87       	std	Z+11, r25	; 0x0b
		}
		
		if (degrees > 0){ //rotate CCW
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	c5 01       	movw	r24, r10
     42e:	b4 01       	movw	r22, r8
     430:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     434:	18 16       	cp	r1, r24
     436:	74 f5       	brge	.+92     	; 0x494 <rotate+0x124>
			oi_set_wheels(100,-100);
     438:	6c e9       	ldi	r22, 0x9C	; 156
     43a:	7f ef       	ldi	r23, 0xFF	; 255
     43c:	84 e6       	ldi	r24, 0x64	; 100
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 aa 0a 	call	0x1554	; 0x1554 <oi_set_wheels>
			while (toturn < sensordegrees) {
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	a9 01       	movw	r20, r18
     44a:	c7 01       	movw	r24, r14
     44c:	b6 01       	movw	r22, r12
     44e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     452:	18 16       	cp	r1, r24
     454:	1c f5       	brge	.+70     	; 0x49c <rotate+0x12c>
     456:	41 2c       	mov	r4, r1
     458:	51 2c       	mov	r5, r1
     45a:	32 01       	movw	r6, r4
				oi_update(self);
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 02 0b 	call	0x1604	; 0x1604 <oi_update>
				toturn += self->angle;
     462:	6e 85       	ldd	r22, Y+14	; 0x0e
     464:	7f 85       	ldd	r23, Y+15	; 0x0f
     466:	07 2e       	mov	r0, r23
     468:	00 0c       	add	r0, r0
     46a:	88 0b       	sbc	r24, r24
     46c:	99 0b       	sbc	r25, r25
     46e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     472:	9b 01       	movw	r18, r22
     474:	ac 01       	movw	r20, r24
     476:	c3 01       	movw	r24, r6
     478:	b2 01       	movw	r22, r4
     47a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     47e:	2b 01       	movw	r4, r22
     480:	3c 01       	movw	r6, r24
			bot->angle = bot->angle - 360;
		}
		
		if (degrees > 0){ //rotate CCW
			oi_set_wheels(100,-100);
			while (toturn < sensordegrees) {
     482:	9b 01       	movw	r18, r22
     484:	ac 01       	movw	r20, r24
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     48e:	18 16       	cp	r1, r24
     490:	2c f3       	brlt	.-54     	; 0x45c <rotate+0xec>
     492:	07 c0       	rjmp	.+14     	; 0x4a2 <rotate+0x132>
	oi_set_wheels(0, 0);
}

void rotate(oi_t *self, float degrees, robot* bot) {
		float sensordegrees = degrees/1.1; //calibration: make number smaller to oversteer.
		float toturn = 0;
     494:	41 2c       	mov	r4, r1
     496:	51 2c       	mov	r5, r1
     498:	32 01       	movw	r6, r4
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <rotate+0x132>
     49c:	41 2c       	mov	r4, r1
     49e:	51 2c       	mov	r5, r1
     4a0:	32 01       	movw	r6, r4
			while (toturn < sensordegrees) {
				oi_update(self);
				toturn += self->angle;
			}
		}
		if (degrees < 0){ //rotate CW
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	a9 01       	movw	r20, r18
     4a8:	c5 01       	movw	r24, r10
     4aa:	b4 01       	movw	r22, r8
     4ac:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	4c f5       	brge	.+82     	; 0x506 <rotate+0x196>
			oi_set_wheels(-100,100);
     4b4:	64 e6       	ldi	r22, 0x64	; 100
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	8c e9       	ldi	r24, 0x9C	; 156
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <oi_set_wheels>
			while (toturn > sensordegrees) {
     4c0:	a7 01       	movw	r20, r14
     4c2:	96 01       	movw	r18, r12
     4c4:	c3 01       	movw	r24, r6
     4c6:	b2 01       	movw	r22, r4
     4c8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     4cc:	18 16       	cp	r1, r24
     4ce:	dc f4       	brge	.+54     	; 0x506 <rotate+0x196>
				oi_update(self);
     4d0:	ce 01       	movw	r24, r28
     4d2:	0e 94 02 0b 	call	0x1604	; 0x1604 <oi_update>
				toturn += self->angle;
     4d6:	6e 85       	ldd	r22, Y+14	; 0x0e
     4d8:	7f 85       	ldd	r23, Y+15	; 0x0f
     4da:	07 2e       	mov	r0, r23
     4dc:	00 0c       	add	r0, r0
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c3 01       	movw	r24, r6
     4ec:	b2 01       	movw	r22, r4
     4ee:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     4f2:	2b 01       	movw	r4, r22
     4f4:	3c 01       	movw	r6, r24
				toturn += self->angle;
			}
		}
		if (degrees < 0){ //rotate CW
			oi_set_wheels(-100,100);
			while (toturn > sensordegrees) {
     4f6:	9b 01       	movw	r18, r22
     4f8:	ac 01       	movw	r20, r24
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	2c f3       	brlt	.-54     	; 0x4d0 <rotate+0x160>
				oi_update(self);
				toturn += self->angle;
			}
		}
		oi_set_wheels(0, 0); // stop
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <oi_set_wheels>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	af 90       	pop	r10
     526:	9f 90       	pop	r9
     528:	8f 90       	pop	r8
     52a:	7f 90       	pop	r7
     52c:	6f 90       	pop	r6
     52e:	5f 90       	pop	r5
     530:	4f 90       	pop	r4
     532:	08 95       	ret

00000534 <move>:
	}
	
	return 0;
}

void move(oi_t *self, float distance_mm, robot *bot) { // Find more accurate way of moving robot
     534:	4f 92       	push	r4
     536:	5f 92       	push	r5
     538:	6f 92       	push	r6
     53a:	7f 92       	push	r7
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
     556:	4a 01       	movw	r8, r20
     558:	5b 01       	movw	r10, r22
     55a:	89 01       	movw	r16, r18
	float togo = distance_mm/0.11;                    // calculated sensor distance
     55c:	2e ea       	ldi	r18, 0xAE	; 174
     55e:	37 e4       	ldi	r19, 0x47	; 71
     560:	41 ee       	ldi	r20, 0xE1	; 225
     562:	5d e3       	ldi	r21, 0x3D	; 61
     564:	c5 01       	movw	r24, r10
     566:	b4 01       	movw	r22, r8
     568:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__divsf3>
     56c:	2b 01       	movw	r4, r22
     56e:	3c 01       	movw	r6, r24
	float travel = 0;				                    // distance traveled by robot
	bot->dist_traveled = distance_mm;
     570:	f8 01       	movw	r30, r16
     572:	84 86       	std	Z+12, r8	; 0x0c
     574:	95 86       	std	Z+13, r9	; 0x0d
     576:	a6 86       	std	Z+14, r10	; 0x0e
     578:	b7 86       	std	Z+15, r11	; 0x0f
	
	if (distance_mm > 0) {
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	a9 01       	movw	r20, r18
     580:	c5 01       	movw	r24, r10
     582:	b4 01       	movw	r22, r8
     584:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     588:	18 16       	cp	r1, r24
     58a:	0c f0       	brlt	.+2      	; 0x58e <move+0x5a>
     58c:	af c0       	rjmp	.+350    	; 0x6ec <move+0x1b8>
		oi_set_wheels(150, 150);
     58e:	66 e9       	ldi	r22, 0x96	; 150
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	86 e9       	ldi	r24, 0x96	; 150
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	de d7       	rcall	.+4028   	; 0x1554 <oi_set_wheels>
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	a9 01       	movw	r20, r18
     59e:	c3 01       	movw	r24, r6
     5a0:	b2 01       	movw	r22, r4
     5a2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <move+0x78>
     5aa:	d4 c0       	rjmp	.+424    	; 0x754 <move+0x220>
			if ((self->cliff_frontleft_signal > 900 || self->cliff_frontleft) || (self->cliff_frontright_signal > 670 || self->cliff_frontright)) {
     5ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5b0:	85 38       	cpi	r24, 0x85	; 133
     5b2:	93 40       	sbci	r25, 0x03	; 3
     5b4:	38 f5       	brcc	.+78     	; 0x604 <move+0xd0>
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	81 11       	cpse	r24, r1
     5ba:	24 c0       	rjmp	.+72     	; 0x604 <move+0xd0>
     5bc:	88 a1       	ldd	r24, Y+32	; 0x20
     5be:	99 a1       	ldd	r25, Y+33	; 0x21
     5c0:	8f 39       	cpi	r24, 0x9F	; 159
     5c2:	92 40       	sbci	r25, 0x02	; 2
     5c4:	f8 f4       	brcc	.+62     	; 0x604 <move+0xd0>
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	81 11       	cpse	r24, r1
     5ca:	1c c0       	rjmp	.+56     	; 0x604 <move+0xd0>
				move(self, -distance_mm, bot);
				break;
			}
			
			if (self->cliff_left_signal > 920 || self->cliff_left) {
     5cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5d0:	89 39       	cpi	r24, 0x99	; 153
     5d2:	93 40       	sbci	r25, 0x03	; 3
     5d4:	30 f5       	brcc	.+76     	; 0x622 <move+0xee>
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	81 11       	cpse	r24, r1
     5da:	23 c0       	rjmp	.+70     	; 0x622 <move+0xee>
     5dc:	c1 2c       	mov	r12, r1
     5de:	d1 2c       	mov	r13, r1
     5e0:	76 01       	movw	r14, r12
     5e2:	26 c0       	rjmp	.+76     	; 0x630 <move+0xfc>
	
	if (distance_mm > 0) {
		oi_set_wheels(150, 150);
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
			if ((self->cliff_frontleft_signal > 900 || self->cliff_frontleft) || (self->cliff_frontright_signal > 670 || self->cliff_frontright)) {
     5e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5e8:	85 38       	cpi	r24, 0x85	; 133
     5ea:	93 40       	sbci	r25, 0x03	; 3
     5ec:	58 f4       	brcc	.+22     	; 0x604 <move+0xd0>
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	81 11       	cpse	r24, r1
     5f2:	08 c0       	rjmp	.+16     	; 0x604 <move+0xd0>
     5f4:	88 a1       	ldd	r24, Y+32	; 0x20
     5f6:	99 a1       	ldd	r25, Y+33	; 0x21
     5f8:	8f 39       	cpi	r24, 0x9F	; 159
     5fa:	92 40       	sbci	r25, 0x02	; 2
     5fc:	18 f4       	brcc	.+6      	; 0x604 <move+0xd0>
     5fe:	8c 81       	ldd	r24, Y+4	; 0x04
     600:	88 23       	and	r24, r24
     602:	39 f0       	breq	.+14     	; 0x612 <move+0xde>
				move(self, -distance_mm, bot);
     604:	b5 01       	movw	r22, r10
     606:	a4 01       	movw	r20, r8
     608:	70 58       	subi	r23, 0x80	; 128
     60a:	98 01       	movw	r18, r16
     60c:	ce 01       	movw	r24, r28
     60e:	92 df       	rcall	.-220    	; 0x534 <move>
				break;
     610:	a1 c0       	rjmp	.+322    	; 0x754 <move+0x220>
			}
			
			if (self->cliff_left_signal > 920 || self->cliff_left) {
     612:	8c 8d       	ldd	r24, Y+28	; 0x1c
     614:	9d 8d       	ldd	r25, Y+29	; 0x1d
     616:	89 39       	cpi	r24, 0x99	; 153
     618:	93 40       	sbci	r25, 0x03	; 3
     61a:	18 f4       	brcc	.+6      	; 0x622 <move+0xee>
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	88 23       	and	r24, r24
     620:	39 f0       	breq	.+14     	; 0x630 <move+0xfc>
				move(self, -distance_mm, bot);
     622:	b5 01       	movw	r22, r10
     624:	a4 01       	movw	r20, r8
     626:	70 58       	subi	r23, 0x80	; 128
     628:	98 01       	movw	r18, r16
     62a:	ce 01       	movw	r24, r28
     62c:	83 df       	rcall	.-250    	; 0x534 <move>
				break;
     62e:	92 c0       	rjmp	.+292    	; 0x754 <move+0x220>
			}
			
			if (self->cliff_right_signal > 550 || self->cliff_right) {
     630:	8a a1       	ldd	r24, Y+34	; 0x22
     632:	9b a1       	ldd	r25, Y+35	; 0x23
     634:	87 32       	cpi	r24, 0x27	; 39
     636:	92 40       	sbci	r25, 0x02	; 2
     638:	18 f4       	brcc	.+6      	; 0x640 <move+0x10c>
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	88 23       	and	r24, r24
     63e:	39 f0       	breq	.+14     	; 0x64e <move+0x11a>
				move(self, -distance_mm, bot);
     640:	b5 01       	movw	r22, r10
     642:	a4 01       	movw	r20, r8
     644:	70 58       	subi	r23, 0x80	; 128
     646:	98 01       	movw	r18, r16
     648:	ce 01       	movw	r24, r28
     64a:	74 df       	rcall	.-280    	; 0x534 <move>
				break;
     64c:	83 c0       	rjmp	.+262    	; 0x754 <move+0x220>
			}
			
			if (self->bumper_left) {
     64e:	88 81       	ld	r24, Y
     650:	81 ff       	sbrs	r24, 1
     652:	17 c0       	rjmp	.+46     	; 0x682 <move+0x14e>
				move(self, -15, bot);
     654:	98 01       	movw	r18, r16
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e7       	ldi	r22, 0x70	; 112
     65c:	71 ec       	ldi	r23, 0xC1	; 193
     65e:	ce 01       	movw	r24, r28
     660:	69 df       	rcall	.-302    	; 0x534 <move>
				travel -= 15.0/0.115;
				wait_ms(100);
     662:	84 e6       	ldi	r24, 0x64	; 100
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
				rotate(self, -90, bot);
     66a:	98 01       	movw	r18, r16
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	64 eb       	ldi	r22, 0xB4	; 180
     672:	72 ec       	ldi	r23, 0xC2	; 194
     674:	ce 01       	movw	r24, r28
     676:	7c de       	rcall	.-776    	; 0x370 <rotate>
				wait_ms(100);
     678:	84 e6       	ldi	r24, 0x64	; 100
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
				break;
     680:	69 c0       	rjmp	.+210    	; 0x754 <move+0x220>
			}
			
			if (self->bumper_right) {
     682:	80 ff       	sbrs	r24, 0
     684:	17 c0       	rjmp	.+46     	; 0x6b4 <move+0x180>
				move(self, -15, bot);
     686:	98 01       	movw	r18, r16
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	60 e7       	ldi	r22, 0x70	; 112
     68e:	71 ec       	ldi	r23, 0xC1	; 193
     690:	ce 01       	movw	r24, r28
     692:	50 df       	rcall	.-352    	; 0x534 <move>
				travel -= 15.0/0.115;
				wait_ms(100);
     694:	84 e6       	ldi	r24, 0x64	; 100
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
				rotate(self, 90, bot);
     69c:	98 01       	movw	r18, r16
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	64 eb       	ldi	r22, 0xB4	; 180
     6a4:	72 e4       	ldi	r23, 0x42	; 66
     6a6:	ce 01       	movw	r24, r28
     6a8:	63 de       	rcall	.-826    	; 0x370 <rotate>
				wait_ms(100);
     6aa:	84 e6       	ldi	r24, 0x64	; 100
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 05 0c 	call	0x180a	; 0x180a <wait_ms>
				break;
     6b2:	50 c0       	rjmp	.+160    	; 0x754 <move+0x220>
			}
			oi_update(self);
     6b4:	ce 01       	movw	r24, r28
     6b6:	a6 d7       	rcall	.+3916   	; 0x1604 <oi_update>
			travel += self->distance;
     6b8:	6c 85       	ldd	r22, Y+12	; 0x0c
     6ba:	7d 85       	ldd	r23, Y+13	; 0x0d
     6bc:	07 2e       	mov	r0, r23
     6be:	00 0c       	add	r0, r0
     6c0:	88 0b       	sbc	r24, r24
     6c2:	99 0b       	sbc	r25, r25
     6c4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
	bot->dist_traveled = distance_mm;
	
	if (distance_mm > 0) {
		oi_set_wheels(150, 150);
		
		while (travel < togo) { // Cliff sensors currently calibrated for bot 3
     6d8:	9b 01       	movw	r18, r22
     6da:	ac 01       	movw	r20, r24
     6dc:	c3 01       	movw	r24, r6
     6de:	b2 01       	movw	r22, r4
     6e0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__gesf2>
     6e4:	18 16       	cp	r1, r24
     6e6:	0c f4       	brge	.+2      	; 0x6ea <move+0x1b6>
     6e8:	7d cf       	rjmp	.-262    	; 0x5e4 <move+0xb0>
     6ea:	34 c0       	rjmp	.+104    	; 0x754 <move+0x220>
				break;
			}
			oi_update(self);
			travel += self->distance;
		}
	} else if (distance_mm < 0) {
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	c5 01       	movw	r24, r10
     6f4:	b4 01       	movw	r22, r8
     6f6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     6fa:	88 23       	and	r24, r24
     6fc:	5c f5       	brge	.+86     	; 0x754 <move+0x220>
		oi_set_wheels(-150, -150);
     6fe:	6a e6       	ldi	r22, 0x6A	; 106
     700:	7f ef       	ldi	r23, 0xFF	; 255
     702:	8a e6       	ldi	r24, 0x6A	; 106
     704:	9f ef       	ldi	r25, 0xFF	; 255
     706:	26 d7       	rcall	.+3660   	; 0x1554 <oi_set_wheels>
		
		while (travel > togo) {
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	c3 01       	movw	r24, r6
     710:	b2 01       	movw	r22, r4
     712:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     716:	88 23       	and	r24, r24
     718:	ec f4       	brge	.+58     	; 0x754 <move+0x220>
     71a:	c1 2c       	mov	r12, r1
     71c:	d1 2c       	mov	r13, r1
     71e:	76 01       	movw	r14, r12
			oi_update(self);
     720:	ce 01       	movw	r24, r28
     722:	70 d7       	rcall	.+3808   	; 0x1604 <oi_update>
			travel += self->distance;
     724:	8c 85       	ldd	r24, Y+12	; 0x0c
     726:	9d 85       	ldd	r25, Y+13	; 0x0d
     728:	bc 01       	movw	r22, r24
     72a:	99 0f       	add	r25, r25
     72c:	88 0b       	sbc	r24, r24
     72e:	99 0b       	sbc	r25, r25
     730:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c7 01       	movw	r24, r14
     73a:	b6 01       	movw	r22, r12
     73c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
			travel += self->distance;
		}
	} else if (distance_mm < 0) {
		oi_set_wheels(-150, -150);
		
		while (travel > togo) {
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__cmpsf2>
     750:	88 23       	and	r24, r24
     752:	34 f3       	brlt	.-52     	; 0x720 <move+0x1ec>
			oi_update(self);
			travel += self->distance;
		}
	}
	
	oi_set_wheels(0, 0);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fb d6       	rcall	.+3574   	; 0x1554 <oi_set_wheels>
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	7f 90       	pop	r7
     778:	6f 90       	pop	r6
     77a:	5f 90       	pop	r5
     77c:	4f 90       	pop	r4
     77e:	08 95       	ret

00000780 <main>:
// Prototypes
void move(oi_t *self, float distance_mm, robot *bot);
void rotate(oi_t *self, float degrees, robot *bot);

int main(void)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	c4 51       	subi	r28, 0x14	; 20
     78a:	d1 40       	sbci	r29, 0x01	; 1
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
	obstacle obst;
	robot bot;
    oi_t *sensor_data = oi_alloc();
     796:	af d6       	rcall	.+3422   	; 0x14f6 <oi_alloc>
     798:	7c 01       	movw	r14, r24
	bot.initialized = 0; // Has to be called only once and before reset
     79a:	c2 5f       	subi	r28, 0xF2	; 242
     79c:	de 4f       	sbci	r29, 0xFE	; 254
     79e:	88 81       	ld	r24, Y
     7a0:	ce 50       	subi	r28, 0x0E	; 14
     7a2:	d1 40       	sbci	r29, 0x01	; 1
     7a4:	8e 7f       	andi	r24, 0xFE	; 254
     7a6:	c2 5f       	subi	r28, 0xF2	; 242
     7a8:	de 4f       	sbci	r29, 0xFE	; 254
     7aa:	88 83       	st	Y, r24
     7ac:	ce 50       	subi	r28, 0x0E	; 14
     7ae:	d1 40       	sbci	r29, 0x01	; 1
	reset(&obst, &bot);
     7b0:	be 01       	movw	r22, r28
     7b2:	62 50       	subi	r22, 0x02	; 2
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	90 d2       	rcall	.+1312   	; 0xcdc <reset>
    oi_init(sensor_data);
     7bc:	c7 01       	movw	r24, r14
     7be:	df d7       	rcall	.+4030   	; 0x177e <oi_init>
	char dist_to_travel = 15; // cm
	char angle_to_turn = 45;  // degrees
	
	unsigned char current;
	unsigned char num_notes = 3;
	unsigned char notes[] = {36, 36, 36};
     7c0:	84 e2       	ldi	r24, 0x24	; 36
     7c2:	c1 5f       	subi	r28, 0xF1	; 241
     7c4:	de 4f       	sbci	r29, 0xFE	; 254
     7c6:	88 83       	st	Y, r24
     7c8:	cf 50       	subi	r28, 0x0F	; 15
     7ca:	d1 40       	sbci	r29, 0x01	; 1
     7cc:	c0 5f       	subi	r28, 0xF0	; 240
     7ce:	de 4f       	sbci	r29, 0xFE	; 254
     7d0:	88 83       	st	Y, r24
     7d2:	c0 51       	subi	r28, 0x10	; 16
     7d4:	d1 40       	sbci	r29, 0x01	; 1
     7d6:	cf 5e       	subi	r28, 0xEF	; 239
     7d8:	de 4f       	sbci	r29, 0xFE	; 254
     7da:	88 83       	st	Y, r24
     7dc:	c1 51       	subi	r28, 0x11	; 17
     7de:	d1 40       	sbci	r29, 0x01	; 1
	unsigned char duration[] = {15, 15, 15};
     7e0:	8f e0       	ldi	r24, 0x0F	; 15
     7e2:	ce 5e       	subi	r28, 0xEE	; 238
     7e4:	de 4f       	sbci	r29, 0xFE	; 254
     7e6:	88 83       	st	Y, r24
     7e8:	c2 51       	subi	r28, 0x12	; 18
     7ea:	d1 40       	sbci	r29, 0x01	; 1
     7ec:	cd 5e       	subi	r28, 0xED	; 237
     7ee:	de 4f       	sbci	r29, 0xFE	; 254
     7f0:	88 83       	st	Y, r24
     7f2:	c3 51       	subi	r28, 0x13	; 19
     7f4:	d1 40       	sbci	r29, 0x01	; 1
     7f6:	cc 5e       	subi	r28, 0xEC	; 236
     7f8:	de 4f       	sbci	r29, 0xFE	; 254
     7fa:	88 83       	st	Y, r24
     7fc:	c4 51       	subi	r28, 0x14	; 20
     7fe:	d1 40       	sbci	r29, 0x01	; 1
	
	while (1) {
		oi_update(sensor_data);
     800:	c7 01       	movw	r24, r14
     802:	00 d7       	rcall	.+3584   	; 0x1604 <oi_update>
		/*lprintf("Cliff L: %d\nCliff Front L: %d\nCliff Front R: %d\nCliff R: %d", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
		lprintf("Cliff L: %d\nCliff Front L: %d\nCliff Front R: %d\nCliff R: %d", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
		wait_ms(100);*/
		
		current = USART_Receive();
     804:	0e 94 56 0d 	call	0x1aac	; 0x1aac <USART_Receive>
     808:	18 2f       	mov	r17, r24
		
		if (current == 'w') {
     80a:	87 37       	cpi	r24, 0x77	; 119
     80c:	89 f4       	brne	.+34     	; 0x830 <main+0xb0>
			move(sensor_data, dist_to_travel, &bot);
     80e:	9e 01       	movw	r18, r28
     810:	22 50       	subi	r18, 0x02	; 2
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e7       	ldi	r22, 0x70	; 112
     81a:	71 e4       	ldi	r23, 0x41	; 65
     81c:	c7 01       	movw	r24, r14
     81e:	8a de       	rcall	.-748    	; 0x534 <move>
			update_information(&obst, &bot, sensor_data);
     820:	a7 01       	movw	r20, r14
     822:	be 01       	movw	r22, r28
     824:	62 50       	subi	r22, 0x02	; 2
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	1a d1       	rcall	.+564    	; 0xa62 <update_information>
     82e:	38 c0       	rjmp	.+112    	; 0x8a0 <main+0x120>
		} else if (current == 'a') {
     830:	81 36       	cpi	r24, 0x61	; 97
     832:	51 f4       	brne	.+20     	; 0x848 <main+0xc8>
			rotate(sensor_data, angle_to_turn, &bot);
     834:	9e 01       	movw	r18, r28
     836:	22 50       	subi	r18, 0x02	; 2
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	64 e3       	ldi	r22, 0x34	; 52
     840:	72 e4       	ldi	r23, 0x42	; 66
     842:	c7 01       	movw	r24, r14
     844:	95 dd       	rcall	.-1238   	; 0x370 <rotate>
     846:	2c c0       	rjmp	.+88     	; 0x8a0 <main+0x120>
		} else if (current == 'd') {
     848:	84 36       	cpi	r24, 0x64	; 100
     84a:	51 f4       	brne	.+20     	; 0x860 <main+0xe0>
			rotate(sensor_data, -angle_to_turn, &bot);
     84c:	9e 01       	movw	r18, r28
     84e:	22 50       	subi	r18, 0x02	; 2
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	64 e3       	ldi	r22, 0x34	; 52
     858:	72 ec       	ldi	r23, 0xC2	; 194
     85a:	c7 01       	movw	r24, r14
     85c:	89 dd       	rcall	.-1262   	; 0x370 <rotate>
     85e:	20 c0       	rjmp	.+64     	; 0x8a0 <main+0x120>
		} else if (current == 'q') {
     860:	81 37       	cpi	r24, 0x71	; 113
     862:	81 f4       	brne	.+32     	; 0x884 <main+0x104>
			sweep(&obst, &bot);
     864:	be 01       	movw	r22, r28
     866:	62 50       	subi	r22, 0x02	; 2
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	34 d5       	rcall	.+2664   	; 0x12d8 <sweep>
			print_and_process_stats(&obst);
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b4 d5       	rcall	.+2920   	; 0x13de <print_and_process_stats>
			reset(&obst, &bot);
     876:	be 01       	movw	r22, r28
     878:	62 50       	subi	r22, 0x02	; 2
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	2d d2       	rcall	.+1114   	; 0xcdc <reset>
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <main+0x120>
		} else {
			oi_load_song(2, num_notes, notes, duration);
     884:	9e 01       	movw	r18, r28
     886:	2e 5e       	subi	r18, 0xEE	; 238
     888:	3e 4f       	sbci	r19, 0xFE	; 254
     88a:	ae 01       	movw	r20, r28
     88c:	41 5f       	subi	r20, 0xF1	; 241
     88e:	5e 4f       	sbci	r21, 0xFE	; 254
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	74 d6       	rcall	.+3304   	; 0x1582 <oi_load_song>
			oi_play_song(2);
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a2 d6       	rcall	.+3396   	; 0x15e4 <oi_play_song>
		}
		
		USART_Transmit(current);
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <USART_Transmit>
	}
     8a6:	ac cf       	rjmp	.-168    	; 0x800 <main+0x80>

000008a8 <initializations>:
#include <math.h>
#include "lcd.h"
#include "util.h"
#include "object_tracking.h"

void initializations(obstacle* obst, robot* bot) {
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	8b 01       	movw	r16, r22
	obst->degrees = 0.0; // Start angle at 0
     8b4:	18 82       	st	Y, r1
     8b6:	19 82       	std	Y+1, r1	; 0x01
     8b8:	1a 82       	std	Y+2, r1	; 0x02
     8ba:	1b 82       	std	Y+3, r1	; 0x03
	
	lcd_init();               // Initialize LCD
     8bc:	1f dd       	rcall	.-1474   	; 0x2fc <lcd_init>
	ADC_init();               // Initialize IR
     8be:	d2 d7       	rcall	.+4004   	; 0x1864 <ADC_init>
	ping_timer_init();        // Initialize Ping
     8c0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ping_timer_init>
	servo_timer_init();       // Initialize Servo
     8c4:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <servo_timer_init>
	USART_Init(UBRR);         // Initialize USART for Bluetooth communication
     8c8:	82 e2       	ldi	r24, 0x22	; 34
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <USART_Init>
	move_servo(&obst->degrees);     // Move Servo to starting position
     8d0:	ce 01       	movw	r24, r28
     8d2:	0e 94 ed 0c 	call	0x19da	; 0x19da <move_servo>
	wait_ms(500);             // Wait for Servo to settle
     8d6:	84 ef       	ldi	r24, 0xF4	; 244
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	97 d7       	rcall	.+3886   	; 0x180a <wait_ms>
	
	/* IR Variable Initializations */
	obst->cur_dist_IR = 0;
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1c 82       	std	Y+4, r1	; 0x04
	obst->last_dist_IR = 0;
     8e0:	1f 82       	std	Y+7, r1	; 0x07
     8e2:	1e 82       	std	Y+6, r1	; 0x06
	obst->total_dist_IR = 0;
     8e4:	19 86       	std	Y+9, r1	; 0x09
     8e6:	18 86       	std	Y+8, r1	; 0x08
	obst->start_angle_IR = 0;
     8e8:	1a 86       	std	Y+10, r1	; 0x0a
	obst->end_angle_IR = 0;
     8ea:	1b 86       	std	Y+11, r1	; 0x0b
	obst->object_detected = 0; // Using ^= to toggle breaks program if used a lot. Why?
     8ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ee:	8e 7f       	andi	r24, 0xFE	; 254
     8f0:	8c 87       	std	Y+12, r24	; 0x0c
	obst->all_object_index = 0;
     8f2:	fe 01       	movw	r30, r28
     8f4:	e4 50       	subi	r30, 0x04	; 4
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 81       	ld	r24, Z
     8fa:	80 7f       	andi	r24, 0xF0	; 240
     8fc:	80 83       	st	Z, r24
	obst->cur_obj_size_IR = 20;
     8fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     900:	81 7c       	andi	r24, 0xC1	; 193
     902:	88 62       	ori	r24, 0x28	; 40
     904:	8c 87       	std	Y+12, r24	; 0x0c
	
	/* SONAR Variable Initializations */
	obst->cur_dist_SONAR = 0.0;
     906:	1d 86       	std	Y+13, r1	; 0x0d
     908:	1e 86       	std	Y+14, r1	; 0x0e
     90a:	1f 86       	std	Y+15, r1	; 0x0f
     90c:	18 8a       	std	Y+16, r1	; 0x10
	obst->last_dist_SONAR = 0.0;
     90e:	19 8a       	std	Y+17, r1	; 0x11
     910:	1a 8a       	std	Y+18, r1	; 0x12
     912:	1b 8a       	std	Y+19, r1	; 0x13
     914:	1c 8a       	std	Y+20, r1	; 0x14
	obst->start_dist_SONAR = 0;
     916:	1d 8a       	std	Y+21, r1	; 0x15
	obst->end_dist_SONAR = 0;
     918:	1e 8a       	std	Y+22, r1	; 0x16
	
	/* Smallest Object Variable Initializations */
	obst->smallest_obj_angular_size = 50;
     91a:	8f 89       	ldd	r24, Y+23	; 0x17
     91c:	80 7c       	andi	r24, 0xC0	; 192
     91e:	82 63       	ori	r24, 0x32	; 50
     920:	8f 8b       	std	Y+23, r24	; 0x17
	obst->smallest_obj_linear_size = LARGE_OBJECT_SIZE_MIN;
     922:	8f 89       	ldd	r24, Y+23	; 0x17
     924:	80 6c       	ori	r24, 0xC0	; 192
     926:	8f 8b       	std	Y+23, r24	; 0x17
     928:	88 8d       	ldd	r24, Y+24	; 0x18
     92a:	88 7f       	andi	r24, 0xF8	; 248
     92c:	82 60       	ori	r24, 0x02	; 2
     92e:	88 8f       	std	Y+24, r24	; 0x18
	obst->smallest_obj_dist_SONAR = 0;
     930:	19 8e       	std	Y+25, r1	; 0x19
	obst->smallest_obj_dist_IR = 0;
     932:	1a 8e       	std	Y+26, r1	; 0x1a
	obst->smallest_obj_position = 0.0;
     934:	1b 8e       	std	Y+27, r1	; 0x1b
     936:	1c 8e       	std	Y+28, r1	; 0x1c
     938:	1d 8e       	std	Y+29, r1	; 0x1d
     93a:	1e 8e       	std	Y+30, r1	; 0x1e
	
	/* Closest Object Variable Initializations */
	obst->closest_obj_angular_size = 0;
     93c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     93e:	80 7c       	andi	r24, 0xC0	; 192
     940:	8f 8f       	std	Y+31, r24	; 0x1f
	obst->closest_obj_linear_size = 0;
     942:	8f 8d       	ldd	r24, Y+31	; 0x1f
     944:	8f 73       	andi	r24, 0x3F	; 63
     946:	8f 8f       	std	Y+31, r24	; 0x1f
     948:	88 a1       	ldd	r24, Y+32	; 0x20
     94a:	88 7f       	andi	r24, 0xF8	; 248
     94c:	88 a3       	std	Y+32, r24	; 0x20
	obst->closest_obj_dist_SONAR = 341; // Approximate SONAR Range Limit
     94e:	85 e5       	ldi	r24, 0x55	; 85
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9a a3       	std	Y+34, r25	; 0x22
     954:	89 a3       	std	Y+33, r24	; 0x21
	obst->closest_obj_dist_IR = 2752;   // Approximate IR Range Limit
     956:	80 ec       	ldi	r24, 0xC0	; 192
     958:	9a e0       	ldi	r25, 0x0A	; 10
     95a:	9c a3       	std	Y+36, r25	; 0x24
     95c:	8b a3       	std	Y+35, r24	; 0x23
	obst->closest_obj_position = 0.0;
     95e:	1d a2       	std	Y+37, r1	; 0x25
     960:	1e a2       	std	Y+38, r1	; 0x26
     962:	1f a2       	std	Y+39, r1	; 0x27
     964:	18 a6       	std	Y+40, r1	; 0x28
	
	/* Object Validation Level Initialization */
	obst->validation_level = 0;
     966:	19 a6       	std	Y+41, r1	; 0x29
	
	/* Robot Coordinates Initialization */
	if (bot->initialized == 0) {
     968:	f8 01       	movw	r30, r16
     96a:	80 89       	ldd	r24, Z+16	; 0x10
     96c:	80 fd       	sbrc	r24, 0
     96e:	1a c0       	rjmp	.+52     	; 0x9a4 <initializations+0xfc>
		bot->x = 0;
     970:	10 82       	st	Z, r1
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
		bot->y = 0;
     978:	14 82       	std	Z+4, r1	; 0x04
     97a:	15 82       	std	Z+5, r1	; 0x05
     97c:	16 82       	std	Z+6, r1	; 0x06
     97e:	17 82       	std	Z+7, r1	; 0x07
		bot->angle = 90.0;
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a4 eb       	ldi	r26, 0xB4	; 180
     986:	b2 e4       	ldi	r27, 0x42	; 66
     988:	80 87       	std	Z+8, r24	; 0x08
     98a:	91 87       	std	Z+9, r25	; 0x09
     98c:	a2 87       	std	Z+10, r26	; 0x0a
     98e:	b3 87       	std	Z+11, r27	; 0x0b
		bot->dist_traveled = 0;
     990:	14 86       	std	Z+12, r1	; 0x0c
     992:	15 86       	std	Z+13, r1	; 0x0d
     994:	16 86       	std	Z+14, r1	; 0x0e
     996:	17 86       	std	Z+15, r1	; 0x0f
		bot->initialized ^= 1;
     998:	80 89       	ldd	r24, Z+16	; 0x10
     99a:	98 2f       	mov	r25, r24
     99c:	90 95       	com	r25
     99e:	90 fb       	bst	r25, 0
     9a0:	80 f9       	bld	r24, 0
     9a2:	80 8b       	std	Z+16, r24	; 0x10
	
	Obstacle Variables to Analyze
	obst->obst_index = 0; // Amount of goal posts found. There are 4 posts total so 3 bits will suffice.*/
	
	// Note: Object array does not need to be initialized
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <get_linear_width>:
	
	/* Find Closest Object */
	find_closest_obj(obst);
}

char get_linear_width(obstacle* obst) {
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	return 2 * obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * tan((obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] * (3.141516/180)) / 2); // sin((3.141516/180) * obst->object_array[obst->object_index][ANGULAR_WIDTH]) * obst->object_array[obst->object_index][DISTANCE_SONAR];
     9ba:	dc 01       	movw	r26, r24
     9bc:	a4 50       	subi	r26, 0x04	; 4
     9be:	bf 4f       	sbci	r27, 0xFF	; 255
     9c0:	2c 91       	ld	r18, X
     9c2:	2f 70       	andi	r18, 0x0F	; 15
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	f9 01       	movw	r30, r18
     9cc:	ee 0f       	add	r30, r30
     9ce:	ff 1f       	adc	r31, r31
     9d0:	ee 0f       	add	r30, r30
     9d2:	ff 1f       	adc	r31, r31
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e2 1b       	sub	r30, r18
     9da:	f3 0b       	sbc	r31, r19
     9dc:	e8 0f       	add	r30, r24
     9de:	f9 1f       	adc	r31, r25
     9e0:	c6 a5       	ldd	r28, Z+46	; 0x2e
     9e2:	d7 a5       	ldd	r29, Z+47	; 0x2f
     9e4:	2c 91       	ld	r18, X
     9e6:	2f 70       	andi	r18, 0x0F	; 15
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	22 0f       	add	r18, r18
     9ec:	33 1f       	adc	r19, r19
     9ee:	f9 01       	movw	r30, r18
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	e2 1b       	sub	r30, r18
     9fe:	f3 0b       	sbc	r31, r19
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	62 a5       	ldd	r22, Z+42	; 0x2a
     a06:	73 a5       	ldd	r23, Z+43	; 0x2b
     a08:	07 2e       	mov	r0, r23
     a0a:	00 0c       	add	r0, r0
     a0c:	88 0b       	sbc	r24, r24
     a0e:	99 0b       	sbc	r25, r25
     a10:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     a14:	20 e5       	ldi	r18, 0x50	; 80
     a16:	39 ef       	ldi	r19, 0xF9	; 249
     a18:	4e e8       	ldi	r20, 0x8E	; 142
     a1a:	5c e3       	ldi	r21, 0x3C	; 60
     a1c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     a2c:	0e 94 aa 10 	call	0x2154	; 0x2154 <tan>
     a30:	6b 01       	movw	r12, r22
     a32:	7c 01       	movw	r14, r24
     a34:	ce 01       	movw	r24, r28
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	bc 01       	movw	r22, r24
     a3c:	99 0f       	add	r25, r25
     a3e:	88 0b       	sbc	r24, r24
     a40:	99 0b       	sbc	r25, r25
     a42:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     a46:	a7 01       	movw	r20, r14
     a48:	96 01       	movw	r18, r12
     a4a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     a4e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fixunssfsi>
     a52:	86 2f       	mov	r24, r22
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <update_information>:

void update_information(obstacle* obst, robot* bot, oi_t* self) {
     a62:	2f 92       	push	r2
     a64:	3f 92       	push	r3
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	e8 97       	sbiw	r28, 0x38	; 56
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	2c 01       	movw	r4, r24
     a98:	3b 01       	movw	r6, r22
	bot->x = bot->x + bot->dist_traveled * cos(bot->angle * (3.141516/180)); // Update robot x coordinate
     a9a:	fb 01       	movw	r30, r22
     a9c:	c4 84       	ldd	r12, Z+12	; 0x0c
     a9e:	d5 84       	ldd	r13, Z+13	; 0x0d
     aa0:	e6 84       	ldd	r14, Z+14	; 0x0e
     aa2:	f7 84       	ldd	r15, Z+15	; 0x0f
     aa4:	20 e5       	ldi	r18, 0x50	; 80
     aa6:	39 ef       	ldi	r19, 0xF9	; 249
     aa8:	4e e8       	ldi	r20, 0x8E	; 142
     aaa:	5c e3       	ldi	r21, 0x3C	; 60
     aac:	60 85       	ldd	r22, Z+8	; 0x08
     aae:	71 85       	ldd	r23, Z+9	; 0x09
     ab0:	82 85       	ldd	r24, Z+10	; 0x0a
     ab2:	93 85       	ldd	r25, Z+11	; 0x0b
     ab4:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
     abc:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <cos>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	c7 01       	movw	r24, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	f3 01       	movw	r30, r6
     ad2:	60 81       	ld	r22, Z
     ad4:	71 81       	ldd	r23, Z+1	; 0x01
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	fb d7       	rcall	.+4086   	; 0x1ad2 <__addsf3>
     adc:	f3 01       	movw	r30, r6
     ade:	60 83       	st	Z, r22
     ae0:	71 83       	std	Z+1, r23	; 0x01
     ae2:	82 83       	std	Z+2, r24	; 0x02
     ae4:	93 83       	std	Z+3, r25	; 0x03
	bot->y = bot->y + bot->dist_traveled * sin(bot->angle * (3.141516/180)); // Update robot y coordinate
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 5f 10 	call	0x20be	; 0x20be <sin>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c7 01       	movw	r24, r14
     af4:	b6 01       	movw	r22, r12
     af6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	f3 01       	movw	r30, r6
     b00:	64 81       	ldd	r22, Z+4	; 0x04
     b02:	75 81       	ldd	r23, Z+5	; 0x05
     b04:	86 81       	ldd	r24, Z+6	; 0x06
     b06:	97 81       	ldd	r25, Z+7	; 0x07
     b08:	e4 d7       	rcall	.+4040   	; 0x1ad2 <__addsf3>
     b0a:	f3 01       	movw	r30, r6
     b0c:	64 83       	std	Z+4, r22	; 0x04
     b0e:	75 83       	std	Z+5, r23	; 0x05
     b10:	86 83       	std	Z+6, r24	; 0x06
     b12:	97 83       	std	Z+7, r25	; 0x07
	
	if (obst->all_object_index > 0) { // Are there objects to keep track of? If so, update the objects distance and angle in respect to the robot
     b14:	f2 01       	movw	r30, r4
     b16:	e4 50       	subi	r30, 0x04	; 4
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	09 f4       	brne	.+2      	; 0xb22 <update_information+0xc0>
     b20:	94 c0       	rjmp	.+296    	; 0xc4a <update_information+0x1e8>
		for (int i = 0; i < obst->all_object_index; i++) { // Loop through total detected objects
     b22:	80 81       	ld	r24, Z
     b24:	8f 70       	andi	r24, 0x0F	; 15
     b26:	09 f4       	brne	.+2      	; 0xb2a <update_information+0xc8>
     b28:	90 c0       	rjmp	.+288    	; 0xc4a <update_information+0x1e8>
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	f8 af       	std	Y+56, r31	; 0x38
     b30:	ef ab       	std	Y+55, r30	; 0x37
			obst->all_objects_array[i][ALL_DISTANCE_SONAR] = sqrt( pow(bot->x - obst->all_objects_array[i][ALL_X], 2) + pow(bot->y - obst->all_objects_array[i][ALL_Y], 2) ); // Apply distance formula
     b32:	c8 01       	movw	r24, r16
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	1c 01       	movw	r2, r24
     b3a:	22 0c       	add	r2, r2
     b3c:	33 1c       	adc	r3, r3
     b3e:	22 0c       	add	r2, r2
     b40:	33 1c       	adc	r3, r3
     b42:	22 0c       	add	r2, r2
     b44:	33 1c       	adc	r3, r3
     b46:	28 1a       	sub	r2, r24
     b48:	39 0a       	sbc	r3, r25
     b4a:	24 0c       	add	r2, r4
     b4c:	35 1c       	adc	r3, r5
     b4e:	f1 01       	movw	r30, r2
     b50:	64 a9       	ldd	r22, Z+52	; 0x34
     b52:	75 a9       	ldd	r23, Z+53	; 0x35
     b54:	07 2e       	mov	r0, r23
     b56:	00 0c       	add	r0, r0
     b58:	88 0b       	sbc	r24, r24
     b5a:	99 0b       	sbc	r25, r25
     b5c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     b60:	9b 01       	movw	r18, r22
     b62:	ac 01       	movw	r20, r24
     b64:	f3 01       	movw	r30, r6
     b66:	60 81       	ld	r22, Z
     b68:	71 81       	ldd	r23, Z+1	; 0x01
     b6a:	82 81       	ldd	r24, Z+2	; 0x02
     b6c:	93 81       	ldd	r25, Z+3	; 0x03
     b6e:	b0 d7       	rcall	.+3936   	; 0x1ad0 <__subsf3>
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
     b74:	f1 01       	movw	r30, r2
     b76:	66 a9       	ldd	r22, Z+54	; 0x36
     b78:	77 a9       	ldd	r23, Z+55	; 0x37
     b7a:	07 2e       	mov	r0, r23
     b7c:	00 0c       	add	r0, r0
     b7e:	88 0b       	sbc	r24, r24
     b80:	99 0b       	sbc	r25, r25
     b82:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	f3 01       	movw	r30, r6
     b8c:	64 81       	ldd	r22, Z+4	; 0x04
     b8e:	75 81       	ldd	r23, Z+5	; 0x05
     b90:	86 81       	ldd	r24, Z+6	; 0x06
     b92:	97 81       	ldd	r25, Z+7	; 0x07
     b94:	9d d7       	rcall	.+3898   	; 0x1ad0 <__subsf3>
     b96:	6b 01       	movw	r12, r22
     b98:	7c 01       	movw	r14, r24
     b9a:	a5 01       	movw	r20, r10
     b9c:	94 01       	movw	r18, r8
     b9e:	c5 01       	movw	r24, r10
     ba0:	b4 01       	movw	r22, r8
     ba2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     ba6:	6b ab       	std	Y+51, r22	; 0x33
     ba8:	7c ab       	std	Y+52, r23	; 0x34
     baa:	8d ab       	std	Y+53, r24	; 0x35
     bac:	9e ab       	std	Y+54, r25	; 0x36
     bae:	a5 01       	movw	r20, r10
     bb0:	94 01       	movw	r18, r8
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     bba:	4b 01       	movw	r8, r22
     bbc:	5c 01       	movw	r10, r24
     bbe:	a7 01       	movw	r20, r14
     bc0:	96 01       	movw	r18, r12
     bc2:	c7 01       	movw	r24, r14
     bc4:	b6 01       	movw	r22, r12
     bc6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__mulsf3>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	7f d7       	rcall	.+3838   	; 0x1ad2 <__addsf3>
     bd4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <sqrt>
     bd8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__fixsfsi>
     bdc:	f1 01       	movw	r30, r2
     bde:	77 a7       	std	Z+47, r23	; 0x2f
     be0:	66 a7       	std	Z+46, r22	; 0x2e
			obst->all_objects_array[i][ALL_POSITION] = atan( (obst->all_objects_array[i][ALL_Y] - bot->y) / (obst->all_objects_array[i][ALL_X] - bot->x) ); // Apply formula to find theta
     be2:	66 a9       	ldd	r22, Z+54	; 0x36
     be4:	77 a9       	ldd	r23, Z+55	; 0x37
     be6:	e4 a8       	ldd	r14, Z+52	; 0x34
     be8:	f5 a8       	ldd	r15, Z+53	; 0x35
     bea:	07 2e       	mov	r0, r23
     bec:	00 0c       	add	r0, r0
     bee:	88 0b       	sbc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     bf6:	f3 01       	movw	r30, r6
     bf8:	24 81       	ldd	r18, Z+4	; 0x04
     bfa:	35 81       	ldd	r19, Z+5	; 0x05
     bfc:	46 81       	ldd	r20, Z+6	; 0x06
     bfe:	57 81       	ldd	r21, Z+7	; 0x07
     c00:	67 d7       	rcall	.+3790   	; 0x1ad0 <__subsf3>
     c02:	4b 01       	movw	r8, r22
     c04:	5c 01       	movw	r10, r24
     c06:	b7 01       	movw	r22, r14
     c08:	ff 0c       	add	r15, r15
     c0a:	88 0b       	sbc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     c12:	f3 01       	movw	r30, r6
     c14:	20 81       	ld	r18, Z
     c16:	31 81       	ldd	r19, Z+1	; 0x01
     c18:	42 81       	ldd	r20, Z+2	; 0x02
     c1a:	53 81       	ldd	r21, Z+3	; 0x03
     c1c:	59 d7       	rcall	.+3762   	; 0x1ad0 <__subsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c5 01       	movw	r24, r10
     c24:	b4 01       	movw	r22, r8
     c26:	e8 d7       	rcall	.+4048   	; 0x1bf8 <__divsf3>
     c28:	b8 d7       	rcall	.+3952   	; 0x1b9a <atan>
     c2a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__fixsfsi>
     c2e:	f1 01       	movw	r30, r2
     c30:	73 ab       	std	Z+51, r23	; 0x33
     c32:	62 ab       	std	Z+50, r22	; 0x32
void update_information(obstacle* obst, robot* bot, oi_t* self) {
	bot->x = bot->x + bot->dist_traveled * cos(bot->angle * (3.141516/180)); // Update robot x coordinate
	bot->y = bot->y + bot->dist_traveled * sin(bot->angle * (3.141516/180)); // Update robot y coordinate
	
	if (obst->all_object_index > 0) { // Are there objects to keep track of? If so, update the objects distance and angle in respect to the robot
		for (int i = 0; i < obst->all_object_index; i++) { // Loop through total detected objects
     c34:	0f 5f       	subi	r16, 0xFF	; 255
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
     c38:	ef a9       	ldd	r30, Y+55	; 0x37
     c3a:	f8 ad       	ldd	r31, Y+56	; 0x38
     c3c:	80 81       	ld	r24, Z
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	08 17       	cp	r16, r24
     c44:	19 07       	cpc	r17, r25
     c46:	0c f4       	brge	.+2      	; 0xc4a <update_information+0x1e8>
     c48:	74 cf       	rjmp	.-280    	; 0xb32 <update_information+0xd0>
			obst->all_objects_array[i][ALL_POSITION] = atan( (obst->all_objects_array[i][ALL_Y] - bot->y) / (obst->all_objects_array[i][ALL_X] - bot->x) ); // Apply formula to find theta
		}
	}
	
	char buffer[50];
	sprintf(buffer, "\r\nBot X: %.3lf\r\nBot Y: %.3lf\r\nBot Angle: %.3lf\r\n", bot->x, bot->y, bot->angle);
     c4a:	f3 01       	movw	r30, r6
     c4c:	83 85       	ldd	r24, Z+11	; 0x0b
     c4e:	8f 93       	push	r24
     c50:	82 85       	ldd	r24, Z+10	; 0x0a
     c52:	8f 93       	push	r24
     c54:	81 85       	ldd	r24, Z+9	; 0x09
     c56:	8f 93       	push	r24
     c58:	80 85       	ldd	r24, Z+8	; 0x08
     c5a:	8f 93       	push	r24
     c5c:	87 81       	ldd	r24, Z+7	; 0x07
     c5e:	8f 93       	push	r24
     c60:	86 81       	ldd	r24, Z+6	; 0x06
     c62:	8f 93       	push	r24
     c64:	85 81       	ldd	r24, Z+5	; 0x05
     c66:	8f 93       	push	r24
     c68:	84 81       	ldd	r24, Z+4	; 0x04
     c6a:	8f 93       	push	r24
     c6c:	83 81       	ldd	r24, Z+3	; 0x03
     c6e:	8f 93       	push	r24
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	8f 93       	push	r24
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	8f 93       	push	r24
     c78:	80 81       	ld	r24, Z
     c7a:	8f 93       	push	r24
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	8e 01       	movw	r16, r28
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	1f 93       	push	r17
     c8c:	0f 93       	push	r16
     c8e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <sprintf>
	
	send_message(buffer);
     c92:	c8 01       	movw	r24, r16
     c94:	0f d7       	rcall	.+3614   	; 0x1ab4 <send_message>
	// Do not reset the angle. Bot needs to know where it was last angled to be accurate.
	bot->dist_traveled = 0; // Reset for next run
     c96:	f3 01       	movw	r30, r6
     c98:	14 86       	std	Z+12, r1	; 0x0c
     c9a:	15 86       	std	Z+13, r1	; 0x0d
     c9c:	16 86       	std	Z+14, r1	; 0x0e
     c9e:	17 86       	std	Z+15, r1	; 0x0f
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
}
     caa:	e8 96       	adiw	r28, 0x38	; 56
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	8f 90       	pop	r8
     cce:	7f 90       	pop	r7
     cd0:	6f 90       	pop	r6
     cd2:	5f 90       	pop	r5
     cd4:	4f 90       	pop	r4
     cd6:	3f 90       	pop	r3
     cd8:	2f 90       	pop	r2
     cda:	08 95       	ret

00000cdc <reset>:

/*char getY(obstacle* obst, robot* bot){
	return (char) obst->cur_dist_IR * sin(toRad((obst->start_angle_IR + obst->end_angle_IR)/2));
}*/

void reset(obstacle* obst, robot* bot) {
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	ec 01       	movw	r28, r24
     ce6:	8b 01       	movw	r16, r22
	obst->degrees = 0.0;
     ce8:	18 82       	st	Y, r1
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	1a 82       	std	Y+2, r1	; 0x02
     cee:	1b 82       	std	Y+3, r1	; 0x03
	move_servo(&obst->degrees);
     cf0:	74 d6       	rcall	.+3304   	; 0x19da <move_servo>
	initializations(obst, bot); // reinitialize
     cf2:	b8 01       	movw	r22, r16
     cf4:	ce 01       	movw	r24, r28
     cf6:	d8 dd       	rcall	.-1104   	; 0x8a8 <initializations>
	for (int i = 0; i < 15; i++) { // reset object arrays
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0

/*char getY(obstacle* obst, robot* bot){
	return (char) obst->cur_dist_IR * sin(toRad((obst->start_angle_IR + obst->end_angle_IR)/2));
}*/

void reset(obstacle* obst, robot* bot) {
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <reset+0x4e>
	obst->degrees = 0.0;
	move_servo(&obst->degrees);
	initializations(obst, bot); // reinitialize
	for (int i = 0; i < 15; i++) { // reset object arrays
		for (int j = 0; j < 7; j++) {
			obst->all_objects_array[i][j] = 0;
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	75 96       	adiw	r30, 0x15	; 21
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ec 0f       	add	r30, r28
     d10:	fd 1f       	adc	r31, r29
     d12:	11 82       	std	Z+1, r1	; 0x01
     d14:	10 82       	st	Z, r1
void reset(obstacle* obst, robot* bot) {
	obst->degrees = 0.0;
	move_servo(&obst->degrees);
	initializations(obst, bot); // reinitialize
	for (int i = 0; i < 15; i++) { // reset object arrays
		for (int j = 0; j < 7; j++) {
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	27 30       	cpi	r18, 0x07	; 7
     d1c:	31 05       	cpc	r19, r1
     d1e:	89 f7       	brne	.-30     	; 0xd02 <reset+0x26>

void reset(obstacle* obst, robot* bot) {
	obst->degrees = 0.0;
	move_servo(&obst->degrees);
	initializations(obst, bot); // reinitialize
	for (int i = 0; i < 15; i++) { // reset object arrays
     d20:	4f 5f       	subi	r20, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	4f 30       	cpi	r20, 0x0F	; 15
     d26:	51 05       	cpc	r21, r1
     d28:	61 f0       	breq	.+24     	; 0xd42 <reset+0x66>

/*char getY(obstacle* obst, robot* bot){
	return (char) obst->cur_dist_IR * sin(toRad((obst->start_angle_IR + obst->end_angle_IR)/2));
}*/

void reset(obstacle* obst, robot* bot) {
     d2a:	27 2f       	mov	r18, r23
     d2c:	36 2f       	mov	r19, r22
	obst->degrees = 0.0;
	move_servo(&obst->degrees);
	initializations(obst, bot); // reinitialize
	for (int i = 0; i < 15; i++) { // reset object arrays
		for (int j = 0; j < 7; j++) {
			obst->all_objects_array[i][j] = 0;
     d2e:	ca 01       	movw	r24, r20
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	84 1b       	sub	r24, r20
     d3e:	95 0b       	sbc	r25, r21
     d40:	e0 cf       	rjmp	.-64     	; 0xd02 <reset+0x26>
		}
	}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <find_objs_IR>:

void find_objs_IR(obstacle* obst, robot* bot) {
     d4c:	6f 92       	push	r6
     d4e:	7f 92       	push	r7
     d50:	8f 92       	push	r8
     d52:	9f 92       	push	r9
     d54:	af 92       	push	r10
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	8b 01       	movw	r16, r22
	if (obst->cur_dist_IR <= MAX_DETECTION_DISTANCE) { // Current IR measured distance is within detection range?
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	81 35       	cpi	r24, 0x51	; 81
     d72:	91 05       	cpc	r25, r1
     d74:	2c f5       	brge	.+74     	; 0xdc0 <find_objs_IR+0x74>
		if (obst->object_detected == 0) { // If yes, are we looking for a new object?
     d76:	8c 85       	ldd	r24, Y+12	; 0x0c
     d78:	80 fd       	sbrc	r24, 0
     d7a:	13 c0       	rjmp	.+38     	; 0xda2 <find_objs_IR+0x56>
			obst->object_detected = 1; // We've detected something
     d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	8c 87       	std	Y+12, r24	; 0x0c
			obst->start_angle_IR = obst->degrees; // Log start angle
     d82:	68 81       	ld	r22, Y
     d84:	79 81       	ldd	r23, Y+1	; 0x01
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	a3 d7       	rcall	.+3910   	; 0x1cd2 <__fixunssfsi>
     d8c:	6a 87       	std	Y+10, r22	; 0x0a
			obst->start_dist_SONAR = obst->cur_dist_SONAR; // Log distance measured by sonar as start distance (IR is less consistent, but computed averages anyway as backup)
     d8e:	6d 85       	ldd	r22, Y+13	; 0x0d
     d90:	7e 85       	ldd	r23, Y+14	; 0x0e
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	98 89       	ldd	r25, Y+16	; 0x10
     d96:	9d d7       	rcall	.+3898   	; 0x1cd2 <__fixunssfsi>
     d98:	6d 8b       	std	Y+21, r22	; 0x15
			obst->validation_level++; // Begin object validation sequence
     d9a:	89 a5       	ldd	r24, Y+41	; 0x29
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	89 a7       	std	Y+41, r24	; 0x29
     da0:	88 c1       	rjmp	.+784    	; 0x10b2 <find_objs_IR+0x366>
		} else if (obst->object_detected == 1) { // Continue object validation sequence if still in detection range
     da2:	8c 85       	ldd	r24, Y+12	; 0x0c
     da4:	80 ff       	sbrs	r24, 0
     da6:	85 c1       	rjmp	.+778    	; 0x10b2 <find_objs_IR+0x366>
			obst->validation_level++;
     da8:	89 a5       	ldd	r24, Y+41	; 0x29
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	89 a7       	std	Y+41, r24	; 0x29
			obst->total_dist_IR += obst->cur_dist_IR; // Find total distance measured by IR
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	28 85       	ldd	r18, Y+8	; 0x08
     db4:	39 85       	ldd	r19, Y+9	; 0x09
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	99 87       	std	Y+9, r25	; 0x09
     dbc:	88 87       	std	Y+8, r24	; 0x08
     dbe:	79 c1       	rjmp	.+754    	; 0x10b2 <find_objs_IR+0x366>
		}
		} else {
		if ((obst->object_detected == 1 && obst->validation_level >= SMALL_OBJECT_SIZE_MIN)) { // We've finished seeing the object. Is the object valid (at least as big as smallest object size)?
     dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc2:	80 ff       	sbrs	r24, 0
     dc4:	6b c1       	rjmp	.+726    	; 0x109c <find_objs_IR+0x350>
     dc6:	89 a5       	ldd	r24, Y+41	; 0x29
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	08 f4       	brcc	.+2      	; 0xdce <find_objs_IR+0x82>
     dcc:	67 c1       	rjmp	.+718    	; 0x109c <find_objs_IR+0x350>
			obst->end_angle_IR = obst->degrees - 1; // Log the last measured angle
     dce:	68 81       	ld	r22, Y
     dd0:	79 81       	ldd	r23, Y+1	; 0x01
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	78 d6       	rcall	.+3312   	; 0x1ad0 <__subsf3>
     de0:	78 d7       	rcall	.+3824   	; 0x1cd2 <__fixunssfsi>
     de2:	6b 87       	std	Y+11, r22	; 0x0b
			obst->end_dist_SONAR = obst->last_dist_SONAR; // Log the last distance measured by the sonar as end distance (same reason as before)
     de4:	69 89       	ldd	r22, Y+17	; 0x11
     de6:	7a 89       	ldd	r23, Y+18	; 0x12
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	72 d7       	rcall	.+3812   	; 0x1cd2 <__fixunssfsi>
     dee:	6e 8b       	std	Y+22, r22	; 0x16
			obst->object_detected = 0; // Reset detection variable
     df0:	8c 85       	ldd	r24, Y+12	; 0x0c
     df2:	8e 7f       	andi	r24, 0xFE	; 254
     df4:	8c 87       	std	Y+12, r24	; 0x0c
			obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] = obst->end_angle_IR - obst->start_angle_IR; // Log calculated object angular size
     df6:	de 01       	movw	r26, r28
     df8:	a4 50       	subi	r26, 0x04	; 4
     dfa:	bf 4f       	sbci	r27, 0xFF	; 255
     dfc:	8c 91       	ld	r24, X
     dfe:	8f 70       	andi	r24, 0x0F	; 15
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	2b 85       	ldd	r18, Y+11	; 0x0b
     e04:	4a 85       	ldd	r20, Y+10	; 0x0a
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	24 1b       	sub	r18, r20
     e0a:	31 09       	sbc	r19, r1
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	fc 01       	movw	r30, r24
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	e8 1b       	sub	r30, r24
     e20:	f9 0b       	sbc	r31, r25
     e22:	ec 0f       	add	r30, r28
     e24:	fd 1f       	adc	r31, r29
     e26:	33 a7       	std	Z+43, r19	; 0x2b
     e28:	22 a7       	std	Z+42, r18	; 0x2a
			obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] = (obst->start_dist_SONAR + obst->end_dist_SONAR) / 2; // Log calculated object distance
     e2a:	8c 91       	ld	r24, X
     e2c:	8f 70       	andi	r24, 0x0F	; 15
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	4d 89       	ldd	r20, Y+21	; 0x15
     e32:	2e 89       	ldd	r18, Y+22	; 0x16
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	24 0f       	add	r18, r20
     e38:	31 1d       	adc	r19, r1
     e3a:	35 95       	asr	r19
     e3c:	27 95       	ror	r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	fc 01       	movw	r30, r24
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	e8 1b       	sub	r30, r24
     e52:	f9 0b       	sbc	r31, r25
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	37 a7       	std	Z+47, r19	; 0x2f
     e5a:	26 a7       	std	Z+46, r18	; 0x2e
			obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_IR] = obst->total_dist_IR / (obst->validation_level - 1); // IR Distance = Average = Sum/N (total distance/number of distance measurements), where validation level serves as N - 1 (to account for extra sample at line 113)
     e5c:	6d 01       	movw	r12, r26
     e5e:	fd 01       	movw	r30, r26
     e60:	80 81       	ld	r24, Z
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	99 85       	ldd	r25, Y+9	; 0x09
     e6c:	69 a5       	ldd	r22, Y+41	; 0x29
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	61 50       	subi	r22, 0x01	; 1
     e72:	71 09       	sbc	r23, r1
     e74:	0e 94 57 15 	call	0x2aae	; 0x2aae <__divmodhi4>
     e78:	c9 01       	movw	r24, r18
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	fc 01       	movw	r30, r24
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e8 1b       	sub	r30, r24
     e8e:	f9 0b       	sbc	r31, r25
     e90:	ec 0f       	add	r30, r28
     e92:	fd 1f       	adc	r31, r29
     e94:	71 ab       	std	Z+49, r23	; 0x31
     e96:	60 ab       	std	Z+48, r22	; 0x30
			obst->all_objects_array[obst->all_object_index][ALL_LINEAR_WIDTH] = get_linear_width(obst); // Log calculated linear width
     e98:	f6 01       	movw	r30, r12
     e9a:	20 81       	ld	r18, Z
     e9c:	2f 70       	andi	r18, 0x0F	; 15
     e9e:	e2 2e       	mov	r14, r18
     ea0:	f1 2c       	mov	r15, r1
     ea2:	ce 01       	movw	r24, r28
     ea4:	84 dd       	rcall	.-1272   	; 0x9ae <get_linear_width>
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	97 01       	movw	r18, r14
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	f9 01       	movw	r30, r18
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e2 1b       	sub	r30, r18
     ebe:	f3 0b       	sbc	r31, r19
     ec0:	ec 0f       	add	r30, r28
     ec2:	fd 1f       	adc	r31, r29
     ec4:	95 a7       	std	Z+45, r25	; 0x2d
     ec6:	84 a7       	std	Z+44, r24	; 0x2c
			obst->all_objects_array[obst->all_object_index][ALL_POSITION] = (obst->start_angle_IR + (obst->all_objects_array[obst->all_object_index][ALL_ANGULAR_WIDTH] / 2)); // Log calculated object angular position
     ec8:	f6 01       	movw	r30, r12
     eca:	80 81       	ld	r24, Z
     ecc:	8f 70       	andi	r24, 0x0F	; 15
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	4a 85       	ldd	r20, Y+10	; 0x0a
     ed2:	20 81       	ld	r18, Z
     ed4:	2f 70       	andi	r18, 0x0F	; 15
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	f9 01       	movw	r30, r18
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	e2 1b       	sub	r30, r18
     eec:	f3 0b       	sbc	r31, r19
     eee:	ec 0f       	add	r30, r28
     ef0:	fd 1f       	adc	r31, r29
     ef2:	62 a5       	ldd	r22, Z+42	; 0x2a
     ef4:	73 a5       	ldd	r23, Z+43	; 0x2b
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	9b 01       	movw	r18, r22
     efa:	77 23       	and	r23, r23
     efc:	14 f4       	brge	.+4      	; 0xf02 <find_objs_IR+0x1b6>
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	35 95       	asr	r19
     f04:	27 95       	ror	r18
     f06:	24 0f       	add	r18, r20
     f08:	35 1f       	adc	r19, r21
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	fc 01       	movw	r30, r24
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e8 1b       	sub	r30, r24
     f1e:	f9 0b       	sbc	r31, r25
     f20:	ec 0f       	add	r30, r28
     f22:	fd 1f       	adc	r31, r29
     f24:	33 ab       	std	Z+51, r19	; 0x33
     f26:	22 ab       	std	Z+50, r18	; 0x32
			obst->all_objects_array[obst->all_object_index][ALL_X] = bot->x + obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * cos(obst->all_objects_array[obst->all_object_index][ALL_POSITION] * (3.141516/180)); // Assign X coordinate of object in respect to the bot
     f28:	7e 01       	movw	r14, r28
     f2a:	fc ef       	ldi	r31, 0xFC	; 252
     f2c:	ef 0e       	add	r14, r31
     f2e:	f1 1c       	adc	r15, r1
     f30:	f7 01       	movw	r30, r14
     f32:	80 81       	ld	r24, Z
     f34:	8f 70       	andi	r24, 0x0F	; 15
     f36:	68 2e       	mov	r6, r24
     f38:	71 2c       	mov	r7, r1
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	fc 01       	movw	r30, r24
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	ee 0f       	add	r30, r30
     f50:	ff 1f       	adc	r31, r31
     f52:	e8 1b       	sub	r30, r24
     f54:	f9 0b       	sbc	r31, r25
     f56:	ec 0f       	add	r30, r28
     f58:	fd 1f       	adc	r31, r29
     f5a:	c6 a4       	ldd	r12, Z+46	; 0x2e
     f5c:	d7 a4       	ldd	r13, Z+47	; 0x2f
     f5e:	f7 01       	movw	r30, r14
     f60:	80 81       	ld	r24, Z
     f62:	8f 70       	andi	r24, 0x0F	; 15
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	fc 01       	movw	r30, r24
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e8 1b       	sub	r30, r24
     f7a:	f9 0b       	sbc	r31, r25
     f7c:	ec 0f       	add	r30, r28
     f7e:	fd 1f       	adc	r31, r29
     f80:	62 a9       	ldd	r22, Z+50	; 0x32
     f82:	73 a9       	ldd	r23, Z+51	; 0x33
     f84:	07 2e       	mov	r0, r23
     f86:	00 0c       	add	r0, r0
     f88:	88 0b       	sbc	r24, r24
     f8a:	99 0b       	sbc	r25, r25
     f8c:	d0 d6       	rcall	.+3488   	; 0x1d2e <__floatsisf>
     f8e:	20 e5       	ldi	r18, 0x50	; 80
     f90:	39 ef       	ldi	r19, 0xF9	; 249
     f92:	4e e8       	ldi	r20, 0x8E	; 142
     f94:	5c e3       	ldi	r21, 0x3C	; 60
     f96:	e4 d7       	rcall	.+4040   	; 0x1f60 <__mulsf3>
     f98:	2c d6       	rcall	.+3160   	; 0x1bf2 <cos>
     f9a:	4b 01       	movw	r8, r22
     f9c:	5c 01       	movw	r10, r24
     f9e:	b6 01       	movw	r22, r12
     fa0:	dd 0c       	add	r13, r13
     fa2:	88 0b       	sbc	r24, r24
     fa4:	99 0b       	sbc	r25, r25
     fa6:	c3 d6       	rcall	.+3462   	; 0x1d2e <__floatsisf>
     fa8:	a5 01       	movw	r20, r10
     faa:	94 01       	movw	r18, r8
     fac:	d9 d7       	rcall	.+4018   	; 0x1f60 <__mulsf3>
     fae:	f8 01       	movw	r30, r16
     fb0:	20 81       	ld	r18, Z
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	42 81       	ldd	r20, Z+2	; 0x02
     fb6:	53 81       	ldd	r21, Z+3	; 0x03
     fb8:	8c d5       	rcall	.+2840   	; 0x1ad2 <__addsf3>
     fba:	86 d6       	rcall	.+3340   	; 0x1cc8 <__fixsfsi>
     fbc:	66 0c       	add	r6, r6
     fbe:	77 1c       	adc	r7, r7
     fc0:	f3 01       	movw	r30, r6
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	e6 19       	sub	r30, r6
     fd0:	f7 09       	sbc	r31, r7
     fd2:	ec 0f       	add	r30, r28
     fd4:	fd 1f       	adc	r31, r29
     fd6:	75 ab       	std	Z+53, r23	; 0x35
     fd8:	64 ab       	std	Z+52, r22	; 0x34
			obst->all_objects_array[obst->all_object_index][ALL_Y] = bot->y + obst->all_objects_array[obst->all_object_index][ALL_DISTANCE_SONAR] * sin(obst->all_objects_array[obst->all_object_index][ALL_POSITION] * (3.141516/180)); // Assign Y coordinate of object in respect to the bot
     fda:	f7 01       	movw	r30, r14
     fdc:	80 81       	ld	r24, Z
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	68 2e       	mov	r6, r24
     fe2:	71 2c       	mov	r7, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	fc 01       	movw	r30, r24
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	e8 1b       	sub	r30, r24
     ffe:	f9 0b       	sbc	r31, r25
    1000:	ec 0f       	add	r30, r28
    1002:	fd 1f       	adc	r31, r29
    1004:	c6 a4       	ldd	r12, Z+46	; 0x2e
    1006:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1008:	f7 01       	movw	r30, r14
    100a:	80 81       	ld	r24, Z
    100c:	8f 70       	andi	r24, 0x0F	; 15
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	e8 1b       	sub	r30, r24
    1024:	f9 0b       	sbc	r31, r25
    1026:	ec 0f       	add	r30, r28
    1028:	fd 1f       	adc	r31, r29
    102a:	62 a9       	ldd	r22, Z+50	; 0x32
    102c:	73 a9       	ldd	r23, Z+51	; 0x33
    102e:	07 2e       	mov	r0, r23
    1030:	00 0c       	add	r0, r0
    1032:	88 0b       	sbc	r24, r24
    1034:	99 0b       	sbc	r25, r25
    1036:	7b d6       	rcall	.+3318   	; 0x1d2e <__floatsisf>
    1038:	20 e5       	ldi	r18, 0x50	; 80
    103a:	39 ef       	ldi	r19, 0xF9	; 249
    103c:	4e e8       	ldi	r20, 0x8E	; 142
    103e:	5c e3       	ldi	r21, 0x3C	; 60
    1040:	8f d7       	rcall	.+3870   	; 0x1f60 <__mulsf3>
    1042:	0e 94 5f 10 	call	0x20be	; 0x20be <sin>
    1046:	4b 01       	movw	r8, r22
    1048:	5c 01       	movw	r10, r24
    104a:	b6 01       	movw	r22, r12
    104c:	dd 0c       	add	r13, r13
    104e:	88 0b       	sbc	r24, r24
    1050:	99 0b       	sbc	r25, r25
    1052:	6d d6       	rcall	.+3290   	; 0x1d2e <__floatsisf>
    1054:	a5 01       	movw	r20, r10
    1056:	94 01       	movw	r18, r8
    1058:	83 d7       	rcall	.+3846   	; 0x1f60 <__mulsf3>
    105a:	f8 01       	movw	r30, r16
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	35 81       	ldd	r19, Z+5	; 0x05
    1060:	46 81       	ldd	r20, Z+6	; 0x06
    1062:	57 81       	ldd	r21, Z+7	; 0x07
    1064:	36 d5       	rcall	.+2668   	; 0x1ad2 <__addsf3>
    1066:	30 d6       	rcall	.+3168   	; 0x1cc8 <__fixsfsi>
    1068:	66 0c       	add	r6, r6
    106a:	77 1c       	adc	r7, r7
    106c:	f3 01       	movw	r30, r6
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	e6 19       	sub	r30, r6
    107c:	f7 09       	sbc	r31, r7
    107e:	ec 0f       	add	r30, r28
    1080:	fd 1f       	adc	r31, r29
    1082:	77 ab       	std	Z+55, r23	; 0x37
    1084:	66 ab       	std	Z+54, r22	; 0x36
			obst->all_object_index++; // Move to next index
    1086:	f7 01       	movw	r30, r14
    1088:	80 81       	ld	r24, Z
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	98 2f       	mov	r25, r24
    108e:	9f 70       	andi	r25, 0x0F	; 15
    1090:	80 81       	ld	r24, Z
    1092:	80 7f       	andi	r24, 0xF0	; 240
    1094:	89 2b       	or	r24, r25
    1096:	80 83       	st	Z, r24
			obst->validation_level = 0; // Reset validation level
    1098:	19 a6       	std	Y+41, r1	; 0x29
    109a:	0b c0       	rjmp	.+22     	; 0x10b2 <find_objs_IR+0x366>
		}
		else if (obst->object_detected == 1) { // Object is an anomaly. Reset last logged variables.
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	80 ff       	sbrs	r24, 0
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <find_objs_IR+0x366>
			obst->validation_level = 0;
    10a2:	19 a6       	std	Y+41, r1	; 0x29
			obst->start_angle_IR = 0;
    10a4:	1a 86       	std	Y+10, r1	; 0x0a
			obst->start_dist_SONAR = 0;
    10a6:	1d 8a       	std	Y+21, r1	; 0x15
			obst->object_detected = 0;
    10a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 87       	std	Y+12, r24	; 0x0c
			obst->total_dist_IR = 0;
    10ae:	19 86       	std	Y+9, r1	; 0x09
    10b0:	18 86       	std	Y+8, r1	; 0x08
		}
	}
	obst->last_dist_IR = obst->cur_dist_IR; // Remember the last measured IR distance
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	9f 83       	std	Y+7, r25	; 0x07
    10b8:	8e 83       	std	Y+6, r24	; 0x06
	obst->last_dist_SONAR = obst->cur_dist_SONAR; // Remember last measured SONAR distance
    10ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    10bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10be:	af 85       	ldd	r26, Y+15	; 0x0f
    10c0:	b8 89       	ldd	r27, Y+16	; 0x10
    10c2:	89 8b       	std	Y+17, r24	; 0x11
    10c4:	9a 8b       	std	Y+18, r25	; 0x12
    10c6:	ab 8b       	std	Y+19, r26	; 0x13
    10c8:	bc 8b       	std	Y+20, r27	; 0x14
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	9f 90       	pop	r9
    10e0:	8f 90       	pop	r8
    10e2:	7f 90       	pop	r7
    10e4:	6f 90       	pop	r6
    10e6:	08 95       	ret

000010e8 <find_smallest_obj>:
		} else if (obst->obst_array[i][OBST_POSITION] > 150 && obst->obst_array[i][OBST_POSITION] <= 180) {
			obst->obst_array[i][WEST] = 1;
		}
	}
}*/
void find_smallest_obj(obstacle* obst) {
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
	for (int i = 0; i < obst->all_object_index; i++)
    10f6:	fc 01       	movw	r30, r24
    10f8:	e4 50       	subi	r30, 0x04	; 4
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	90 81       	ld	r25, Z
    10fe:	9f 70       	andi	r25, 0x0F	; 15
    1100:	09 f4       	brne	.+2      	; 0x1104 <__stack+0x5>
    1102:	5c c0       	rjmp	.+184    	; 0x11bc <__stack+0xbd>
    1104:	e1 2c       	mov	r14, r1
    1106:	f1 2c       	mov	r15, r1
    1108:	8f 01       	movw	r16, r30
	if (obst->all_objects_array[i][ALL_LINEAR_WIDTH] < obst->smallest_obj_angular_size) {
    110a:	c7 01       	movw	r24, r14
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	fc 01       	movw	r30, r24
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	e8 1b       	sub	r30, r24
    1120:	f9 0b       	sbc	r31, r25
    1122:	ec 0f       	add	r30, r28
    1124:	fd 1f       	adc	r31, r29
    1126:	24 a5       	ldd	r18, Z+44	; 0x2c
    1128:	35 a5       	ldd	r19, Z+45	; 0x2d
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	8f 73       	andi	r24, 0x3F	; 63
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	28 17       	cp	r18, r24
    1132:	39 07       	cpc	r19, r25
    1134:	c4 f5       	brge	.+112    	; 0x11a6 <__stack+0xa7>
		obst->smallest_obj_angular_size = obst->all_objects_array[i][ALL_ANGULAR_WIDTH];
    1136:	c7 01       	movw	r24, r14
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	fc 01       	movw	r30, r24
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e8 1b       	sub	r30, r24
    114c:	f9 0b       	sbc	r31, r25
    114e:	ec 0f       	add	r30, r28
    1150:	fd 1f       	adc	r31, r29
    1152:	82 a5       	ldd	r24, Z+42	; 0x2a
    1154:	93 a5       	ldd	r25, Z+43	; 0x2b
    1156:	8f 73       	andi	r24, 0x3F	; 63
    1158:	9f 89       	ldd	r25, Y+23	; 0x17
    115a:	90 7c       	andi	r25, 0xC0	; 192
    115c:	89 2b       	or	r24, r25
    115e:	8f 8b       	std	Y+23, r24	; 0x17
		obst->smallest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
    1160:	84 a5       	ldd	r24, Z+44	; 0x2c
    1162:	95 a5       	ldd	r25, Z+45	; 0x2d
    1164:	8f 71       	andi	r24, 0x1F	; 31
    1166:	28 2f       	mov	r18, r24
    1168:	22 95       	swap	r18
    116a:	22 0f       	add	r18, r18
    116c:	22 0f       	add	r18, r18
    116e:	20 7c       	andi	r18, 0xC0	; 192
    1170:	9f 89       	ldd	r25, Y+23	; 0x17
    1172:	9f 73       	andi	r25, 0x3F	; 63
    1174:	92 2b       	or	r25, r18
    1176:	9f 8b       	std	Y+23, r25	; 0x17
    1178:	86 95       	lsr	r24
    117a:	86 95       	lsr	r24
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	98 7f       	andi	r25, 0xF8	; 248
    1180:	89 2b       	or	r24, r25
    1182:	88 8f       	std	Y+24, r24	; 0x18
		obst->smallest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
    1184:	86 a5       	ldd	r24, Z+46	; 0x2e
    1186:	97 a5       	ldd	r25, Z+47	; 0x2f
    1188:	89 8f       	std	Y+25, r24	; 0x19
		obst->smallest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
    118a:	80 a9       	ldd	r24, Z+48	; 0x30
    118c:	91 a9       	ldd	r25, Z+49	; 0x31
    118e:	8a 8f       	std	Y+26, r24	; 0x1a
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
    1190:	62 a9       	ldd	r22, Z+50	; 0x32
    1192:	73 a9       	ldd	r23, Z+51	; 0x33
    1194:	07 2e       	mov	r0, r23
    1196:	00 0c       	add	r0, r0
    1198:	88 0b       	sbc	r24, r24
    119a:	99 0b       	sbc	r25, r25
    119c:	c8 d5       	rcall	.+2960   	; 0x1d2e <__floatsisf>
    119e:	6b 8f       	std	Y+27, r22	; 0x1b
    11a0:	7c 8f       	std	Y+28, r23	; 0x1c
    11a2:	8d 8f       	std	Y+29, r24	; 0x1d
    11a4:	9e 8f       	std	Y+30, r25	; 0x1e
			obst->obst_array[i][WEST] = 1;
		}
	}
}*/
void find_smallest_obj(obstacle* obst) {
	for (int i = 0; i < obst->all_object_index; i++)
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	e8 1a       	sub	r14, r24
    11aa:	f8 0a       	sbc	r15, r24
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 70       	andi	r24, 0x0F	; 15
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	e8 16       	cp	r14, r24
    11b6:	f9 06       	cpc	r15, r25
    11b8:	0c f4       	brge	.+2      	; 0x11bc <__stack+0xbd>
    11ba:	a7 cf       	rjmp	.-178    	; 0x110a <__stack+0xb>
		obst->smallest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
		obst->smallest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
		obst->smallest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	08 95       	ret

000011ca <find_closest_obj>:

void find_closest_obj(obstacle* obst) {
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
	for (int i = 0; i < obst->all_object_index; i++)
    11d8:	fc 01       	movw	r30, r24
    11da:	e4 50       	subi	r30, 0x04	; 4
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	90 81       	ld	r25, Z
    11e0:	9f 70       	andi	r25, 0x0F	; 15
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <find_closest_obj+0x1c>
    11e4:	72 c0       	rjmp	.+228    	; 0x12ca <find_closest_obj+0x100>
    11e6:	e1 2c       	mov	r14, r1
    11e8:	f1 2c       	mov	r15, r1
    11ea:	8f 01       	movw	r16, r30
	if (obst->all_objects_array[i][ALL_DISTANCE_SONAR] < obst->closest_obj_dist_SONAR || obst->all_objects_array[i][ALL_DISTANCE_IR] < obst->closest_obj_dist_IR) {
    11ec:	c7 01       	movw	r24, r14
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	e8 1b       	sub	r30, r24
    1202:	f9 0b       	sbc	r31, r25
    1204:	ec 0f       	add	r30, r28
    1206:	fd 1f       	adc	r31, r29
    1208:	26 a5       	ldd	r18, Z+46	; 0x2e
    120a:	37 a5       	ldd	r19, Z+47	; 0x2f
    120c:	89 a1       	ldd	r24, Y+33	; 0x21
    120e:	9a a1       	ldd	r25, Y+34	; 0x22
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	ac f0       	brlt	.+42     	; 0x1240 <find_closest_obj+0x76>
    1216:	c7 01       	movw	r24, r14
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	e8 1b       	sub	r30, r24
    122c:	f9 0b       	sbc	r31, r25
    122e:	ec 0f       	add	r30, r28
    1230:	fd 1f       	adc	r31, r29
    1232:	20 a9       	ldd	r18, Z+48	; 0x30
    1234:	31 a9       	ldd	r19, Z+49	; 0x31
    1236:	8b a1       	ldd	r24, Y+35	; 0x23
    1238:	9c a1       	ldd	r25, Y+36	; 0x24
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	d4 f5       	brge	.+116    	; 0x12b4 <find_closest_obj+0xea>
		obst->closest_obj_angular_size = obst->all_objects_array[i][ALL_ANGULAR_WIDTH];
    1240:	c7 01       	movw	r24, r14
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	fc 01       	movw	r30, r24
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e8 1b       	sub	r30, r24
    1256:	f9 0b       	sbc	r31, r25
    1258:	ec 0f       	add	r30, r28
    125a:	fd 1f       	adc	r31, r29
    125c:	82 a5       	ldd	r24, Z+42	; 0x2a
    125e:	93 a5       	ldd	r25, Z+43	; 0x2b
    1260:	8f 73       	andi	r24, 0x3F	; 63
    1262:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1264:	90 7c       	andi	r25, 0xC0	; 192
    1266:	89 2b       	or	r24, r25
    1268:	8f 8f       	std	Y+31, r24	; 0x1f
		obst->closest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
    126a:	84 a5       	ldd	r24, Z+44	; 0x2c
    126c:	95 a5       	ldd	r25, Z+45	; 0x2d
    126e:	8f 71       	andi	r24, 0x1F	; 31
    1270:	28 2f       	mov	r18, r24
    1272:	22 95       	swap	r18
    1274:	22 0f       	add	r18, r18
    1276:	22 0f       	add	r18, r18
    1278:	20 7c       	andi	r18, 0xC0	; 192
    127a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    127c:	9f 73       	andi	r25, 0x3F	; 63
    127e:	92 2b       	or	r25, r18
    1280:	9f 8f       	std	Y+31, r25	; 0x1f
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	98 a1       	ldd	r25, Y+32	; 0x20
    1288:	98 7f       	andi	r25, 0xF8	; 248
    128a:	89 2b       	or	r24, r25
    128c:	88 a3       	std	Y+32, r24	; 0x20
		obst->closest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
    128e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1290:	97 a5       	ldd	r25, Z+47	; 0x2f
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
    1296:	80 a9       	ldd	r24, Z+48	; 0x30
    1298:	91 a9       	ldd	r25, Z+49	; 0x31
    129a:	9c a3       	std	Y+36, r25	; 0x24
    129c:	8b a3       	std	Y+35, r24	; 0x23
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
    129e:	62 a9       	ldd	r22, Z+50	; 0x32
    12a0:	73 a9       	ldd	r23, Z+51	; 0x33
    12a2:	07 2e       	mov	r0, r23
    12a4:	00 0c       	add	r0, r0
    12a6:	88 0b       	sbc	r24, r24
    12a8:	99 0b       	sbc	r25, r25
    12aa:	41 d5       	rcall	.+2690   	; 0x1d2e <__floatsisf>
    12ac:	6d a3       	std	Y+37, r22	; 0x25
    12ae:	7e a3       	std	Y+38, r23	; 0x26
    12b0:	8f a3       	std	Y+39, r24	; 0x27
    12b2:	98 a7       	std	Y+40, r25	; 0x28
		obst->smallest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}

void find_closest_obj(obstacle* obst) {
	for (int i = 0; i < obst->all_object_index; i++)
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	e8 1a       	sub	r14, r24
    12b8:	f8 0a       	sbc	r15, r24
    12ba:	f8 01       	movw	r30, r16
    12bc:	80 81       	ld	r24, Z
    12be:	8f 70       	andi	r24, 0x0F	; 15
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	e8 16       	cp	r14, r24
    12c4:	f9 06       	cpc	r15, r25
    12c6:	0c f4       	brge	.+2      	; 0x12ca <find_closest_obj+0x100>
    12c8:	91 cf       	rjmp	.-222    	; 0x11ec <find_closest_obj+0x22>
		obst->closest_obj_linear_size = obst->all_objects_array[i][ALL_LINEAR_WIDTH];
		obst->closest_obj_dist_SONAR = obst->all_objects_array[i][ALL_DISTANCE_SONAR];
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	08 95       	ret

000012d8 <sweep>:
	obst->obst_index = 0; // Amount of goal posts found. There are 4 posts total so 3 bits will suffice.*/
	
	// Note: Object array does not need to be initialized
}

void sweep(obstacle* obst, robot* bot) {
    12d8:	8f 92       	push	r8
    12da:	9f 92       	push	r9
    12dc:	af 92       	push	r10
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	e5 97       	sbiw	r28, 0x35	; 53
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	8c 01       	movw	r16, r24
    1302:	4b 01       	movw	r8, r22
	/* Clear PuTTY view and initialize columns */
	send_message("\f");
    1304:	87 e3       	ldi	r24, 0x37	; 55
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	d5 d3       	rcall	.+1962   	; 0x1ab4 <send_message>
	send_message("Degrees       IR Distance (cm)    Sonar Distance (cm)\r\n");
    130a:	89 e3       	ldi	r24, 0x39	; 57
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	d2 d3       	rcall	.+1956   	; 0x1ab4 <send_message>
    1310:	e1 2c       	mov	r14, r1
    1312:	f1 2c       	mov	r15, r1
		send_pulse();                                // Ping the SONAR sensor
		obst->cur_dist_IR = read_IR_distance();      // Get current IR distance measurement
		obst->cur_dist_SONAR = read_PING_distance(); // Get current SONAR distance measurement
		
		/* Prepare buffer for transmission */
		sprintf(buffer, "%-3d             %-4d                 %-3.4f\r\n", i, obst->cur_dist_IR, obst->cur_dist_SONAR);
    1314:	0f 2e       	mov	r0, r31
    1316:	f1 e7       	ldi	r31, 0x71	; 113
    1318:	af 2e       	mov	r10, r31
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	bf 2e       	mov	r11, r31
    131e:	f0 2d       	mov	r31, r0
    1320:	ce 01       	movw	r24, r28
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	6c 01       	movw	r12, r24
	/* Data to be Sent to Putty */
	char buffer[53];
	
	/* Perform 180 degree scan. Collect distance measurements every 1 degree. */
	for (char i = 0; i <= 180; i++) {
		send_pulse();                                // Ping the SONAR sensor
    1326:	da d2       	rcall	.+1460   	; 0x18dc <send_pulse>
		obst->cur_dist_IR = read_IR_distance();      // Get current IR distance measurement
    1328:	ab d2       	rcall	.+1366   	; 0x1880 <read_IR_distance>
    132a:	f8 01       	movw	r30, r16
    132c:	95 83       	std	Z+5, r25	; 0x05
    132e:	84 83       	std	Z+4, r24	; 0x04
		obst->cur_dist_SONAR = read_PING_distance(); // Get current SONAR distance measurement
    1330:	2b d3       	rcall	.+1622   	; 0x1988 <read_PING_distance>
    1332:	f8 01       	movw	r30, r16
    1334:	65 87       	std	Z+13, r22	; 0x0d
    1336:	76 87       	std	Z+14, r23	; 0x0e
    1338:	87 87       	std	Z+15, r24	; 0x0f
    133a:	90 8b       	std	Z+16, r25	; 0x10
		
		/* Prepare buffer for transmission */
		sprintf(buffer, "%-3d             %-4d                 %-3.4f\r\n", i, obst->cur_dist_IR, obst->cur_dist_SONAR);
    133c:	85 85       	ldd	r24, Z+13	; 0x0d
    133e:	96 85       	ldd	r25, Z+14	; 0x0e
    1340:	a7 85       	ldd	r26, Z+15	; 0x0f
    1342:	b0 89       	ldd	r27, Z+16	; 0x10
    1344:	24 81       	ldd	r18, Z+4	; 0x04
    1346:	35 81       	ldd	r19, Z+5	; 0x05
    1348:	bf 93       	push	r27
    134a:	af 93       	push	r26
    134c:	9f 93       	push	r25
    134e:	8f 93       	push	r24
    1350:	3f 93       	push	r19
    1352:	2f 93       	push	r18
    1354:	ff 92       	push	r15
    1356:	ef 92       	push	r14
    1358:	bf 92       	push	r11
    135a:	af 92       	push	r10
    135c:	df 92       	push	r13
    135e:	cf 92       	push	r12
    1360:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <sprintf>
		
		/* Send data to putty */
		send_message(buffer);
    1364:	c6 01       	movw	r24, r12
    1366:	a6 d3       	rcall	.+1868   	; 0x1ab4 <send_message>
		
		/* Find Objects IR */
		find_objs_IR(obst, bot);
    1368:	b4 01       	movw	r22, r8
    136a:	c8 01       	movw	r24, r16
    136c:	ef dc       	rcall	.-1570   	; 0xd4c <find_objs_IR>
		
		obst->degrees++;            // Increment degree by 1
    136e:	f8 01       	movw	r30, r16
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e8       	ldi	r20, 0x80	; 128
    137e:	5f e3       	ldi	r21, 0x3F	; 63
    1380:	a8 d3       	rcall	.+1872   	; 0x1ad2 <__addsf3>
    1382:	f8 01       	movw	r30, r16
    1384:	60 83       	st	Z, r22
    1386:	71 83       	std	Z+1, r23	; 0x01
    1388:	82 83       	std	Z+2, r24	; 0x02
    138a:	93 83       	std	Z+3, r25	; 0x03
		move_servo(&obst->degrees); // Move servo into next position
    138c:	c8 01       	movw	r24, r16
    138e:	25 d3       	rcall	.+1610   	; 0x19da <move_servo>
		wait_ms(10);          // Wait for servo to position itself
    1390:	8a e0       	ldi	r24, 0x0A	; 10
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	3a d2       	rcall	.+1140   	; 0x180a <wait_ms>
    1396:	ff ef       	ldi	r31, 0xFF	; 255
    1398:	ef 1a       	sub	r14, r31
    139a:	ff 0a       	sbc	r15, r31
	
	/* Data to be Sent to Putty */
	char buffer[53];
	
	/* Perform 180 degree scan. Collect distance measurements every 1 degree. */
	for (char i = 0; i <= 180; i++) {
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	95 eb       	ldi	r25, 0xB5	; 181
    13a8:	e9 16       	cp	r14, r25
    13aa:	f1 04       	cpc	r15, r1
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <sweep+0xd8>
    13ae:	bb cf       	rjmp	.-138    	; 0x1326 <sweep+0x4e>
	
	/* Analyze Found Objects */
	//analyze_found_objects(obst);
	
	/* Find Smallest Object */
	find_smallest_obj(obst);
    13b0:	c8 01       	movw	r24, r16
    13b2:	9a de       	rcall	.-716    	; 0x10e8 <find_smallest_obj>
	
	/* Find Closest Object */
	find_closest_obj(obst);
    13b4:	c8 01       	movw	r24, r16
    13b6:	09 df       	rcall	.-494    	; 0x11ca <find_closest_obj>
}
    13b8:	e5 96       	adiw	r28, 0x35	; 53
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	bf 90       	pop	r11
    13d6:	af 90       	pop	r10
    13d8:	9f 90       	pop	r9
    13da:	8f 90       	pop	r8
    13dc:	08 95       	ret

000013de <print_and_process_stats>:
		obst->closest_obj_dist_IR = obst->all_objects_array[i][ALL_DISTANCE_IR];
		obst->closest_obj_position = obst->all_objects_array[i][ALL_POSITION];
	}
}

void print_and_process_stats(obstacle* obst) {
    13de:	9f 92       	push	r9
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	c4 5f       	subi	r28, 0xF4	; 244
    13fa:	d1 40       	sbci	r29, 0x01	; 1
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	fc 01       	movw	r30, r24
	if (obst->all_object_index > 0) {
    1408:	dc 01       	movw	r26, r24
    140a:	a4 50       	subi	r26, 0x04	; 4
    140c:	bf 4f       	sbci	r27, 0xFF	; 255
    140e:	8c 91       	ld	r24, X
    1410:	8f 70       	andi	r24, 0x0F	; 15
    1412:	09 f4       	brne	.+2      	; 0x1416 <print_and_process_stats+0x38>
    1414:	5a c0       	rjmp	.+180    	; 0x14ca <print_and_process_stats+0xec>
		char buffer[500];
	
		/* Prepare buffer for transmission */
		sprintf(buffer, "\r\n\nObjects found: %d\r\n\nClosest Object Statistics:\r\nObject position: %.1f degrees\r\nSONAR distance (cm): %d\r\nIR distance (cm): %d\r\nAngular width: %d\r\nLinear width (cm): %d\r\n\nSmallest Object Statistics:\r\nObject position: %.1f degrees\r\nSONAR distance (cm): %d\r\nIR distance (cm): %d\r\nAngular width: %d\r\nLinear width (cm): %d\r\n", obst->all_object_index, obst->closest_obj_position, obst->closest_obj_dist_SONAR, obst->closest_obj_dist_IR, obst->closest_obj_angular_size, obst->closest_obj_linear_size, obst->smallest_obj_position, obst->smallest_obj_dist_SONAR, obst->smallest_obj_dist_IR, obst->smallest_obj_angular_size, obst->smallest_obj_linear_size);
    1416:	27 89       	ldd	r18, Z+23	; 0x17
    1418:	82 2f       	mov	r24, r18
    141a:	82 95       	swap	r24
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	83 70       	andi	r24, 0x03	; 3
    1422:	20 8d       	ldd	r18, Z+24	; 0x18
    1424:	27 70       	andi	r18, 0x07	; 7
    1426:	22 0f       	add	r18, r18
    1428:	22 0f       	add	r18, r18
    142a:	28 2b       	or	r18, r24
    142c:	37 89       	ldd	r19, Z+23	; 0x17
    142e:	3f 73       	andi	r19, 0x3F	; 63
    1430:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1432:	b1 8c       	ldd	r11, Z+25	; 0x19
    1434:	c3 8c       	ldd	r12, Z+27	; 0x1b
    1436:	d4 8c       	ldd	r13, Z+28	; 0x1c
    1438:	e5 8c       	ldd	r14, Z+29	; 0x1d
    143a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    143c:	97 8d       	ldd	r25, Z+31	; 0x1f
    143e:	89 2f       	mov	r24, r25
    1440:	82 95       	swap	r24
    1442:	86 95       	lsr	r24
    1444:	86 95       	lsr	r24
    1446:	83 70       	andi	r24, 0x03	; 3
    1448:	90 a1       	ldd	r25, Z+32	; 0x20
    144a:	97 70       	andi	r25, 0x07	; 7
    144c:	99 0f       	add	r25, r25
    144e:	99 0f       	add	r25, r25
    1450:	98 2b       	or	r25, r24
    1452:	87 8d       	ldd	r24, Z+31	; 0x1f
    1454:	8f 73       	andi	r24, 0x3F	; 63
    1456:	98 2e       	mov	r9, r24
    1458:	03 a1       	ldd	r16, Z+35	; 0x23
    145a:	14 a1       	ldd	r17, Z+36	; 0x24
    145c:	a1 a1       	ldd	r26, Z+33	; 0x21
    145e:	b2 a1       	ldd	r27, Z+34	; 0x22
    1460:	45 a1       	ldd	r20, Z+37	; 0x25
    1462:	56 a1       	ldd	r21, Z+38	; 0x26
    1464:	67 a1       	ldd	r22, Z+39	; 0x27
    1466:	70 a5       	ldd	r23, Z+40	; 0x28
    1468:	e4 50       	subi	r30, 0x04	; 4
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	80 81       	ld	r24, Z
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	1f 92       	push	r1
    1472:	2f 93       	push	r18
    1474:	1f 92       	push	r1
    1476:	3f 93       	push	r19
    1478:	1f 92       	push	r1
    147a:	af 92       	push	r10
    147c:	1f 92       	push	r1
    147e:	bf 92       	push	r11
    1480:	ff 92       	push	r15
    1482:	ef 92       	push	r14
    1484:	df 92       	push	r13
    1486:	cf 92       	push	r12
    1488:	1f 92       	push	r1
    148a:	9f 93       	push	r25
    148c:	1f 92       	push	r1
    148e:	9f 92       	push	r9
    1490:	1f 93       	push	r17
    1492:	0f 93       	push	r16
    1494:	bf 93       	push	r27
    1496:	af 93       	push	r26
    1498:	7f 93       	push	r23
    149a:	6f 93       	push	r22
    149c:	5f 93       	push	r21
    149e:	4f 93       	push	r20
    14a0:	1f 92       	push	r1
    14a2:	8f 93       	push	r24
    14a4:	80 ea       	ldi	r24, 0xA0	; 160
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	9f 93       	push	r25
    14aa:	8f 93       	push	r24
    14ac:	8e 01       	movw	r16, r28
    14ae:	0f 5f       	subi	r16, 0xFF	; 255
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	1f 93       	push	r17
    14b4:	0f 93       	push	r16
    14b6:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <sprintf>
		send_message(buffer);
    14ba:	c8 01       	movw	r24, r16
    14bc:	fb d2       	rcall	.+1526   	; 0x1ab4 <send_message>
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <print_and_process_stats+0xf2>
	} else {
		send_message("\r\nNo objects found\r\n");
    14ca:	82 ee       	ldi	r24, 0xE2	; 226
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	f2 d2       	rcall	.+1508   	; 0x1ab4 <send_message>
	}
    14d0:	cc 50       	subi	r28, 0x0C	; 12
    14d2:	de 4f       	sbci	r29, 0xFE	; 254
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	08 95       	ret

000014f6 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
    14f6:	64 e3       	ldi	r22, 0x34	; 52
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <calloc>
    1502:	08 95       	ret

00001504 <oi_byte_tx>:
    1504:	eb e9       	ldi	r30, 0x9B	; 155
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	90 81       	ld	r25, Z
    150a:	95 ff       	sbrs	r25, 5
    150c:	fd cf       	rjmp	.-6      	; 0x1508 <oi_byte_tx+0x4>
    150e:	80 93 9c 00 	sts	0x009C, r24
    1512:	08 95       	ret

00001514 <oi_set_leds>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	08 2f       	mov	r16, r24
    151e:	c6 2f       	mov	r28, r22
    1520:	14 2f       	mov	r17, r20
    1522:	d2 2f       	mov	r29, r18
    1524:	8b e8       	ldi	r24, 0x8B	; 139
    1526:	ee df       	rcall	.-36     	; 0x1504 <oi_byte_tx>
    1528:	88 e0       	ldi	r24, 0x08	; 8
    152a:	c8 9f       	mul	r28, r24
    152c:	f0 01       	movw	r30, r0
    152e:	11 24       	eor	r1, r1
    1530:	cc 23       	and	r28, r28
    1532:	29 f0       	breq	.+10     	; 0x153e <oi_set_leds+0x2a>
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	01 11       	cpse	r16, r1
    1538:	01 c0       	rjmp	.+2      	; 0x153c <oi_set_leds+0x28>
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	e9 2f       	mov	r30, r25
    153e:	8e 2f       	mov	r24, r30
    1540:	e1 df       	rcall	.-62     	; 0x1504 <oi_byte_tx>
    1542:	81 2f       	mov	r24, r17
    1544:	df df       	rcall	.-66     	; 0x1504 <oi_byte_tx>
    1546:	8d 2f       	mov	r24, r29
    1548:	dd df       	rcall	.-70     	; 0x1504 <oi_byte_tx>
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <oi_set_wheels>:
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	18 2f       	mov	r17, r24
    155e:	09 2f       	mov	r16, r25
    1560:	c6 2f       	mov	r28, r22
    1562:	d7 2f       	mov	r29, r23
    1564:	81 e9       	ldi	r24, 0x91	; 145
    1566:	ce df       	rcall	.-100    	; 0x1504 <oi_byte_tx>
    1568:	80 2f       	mov	r24, r16
    156a:	cc df       	rcall	.-104    	; 0x1504 <oi_byte_tx>
    156c:	81 2f       	mov	r24, r17
    156e:	ca df       	rcall	.-108    	; 0x1504 <oi_byte_tx>
    1570:	8d 2f       	mov	r24, r29
    1572:	c8 df       	rcall	.-112    	; 0x1504 <oi_byte_tx>
    1574:	8c 2f       	mov	r24, r28
    1576:	c6 df       	rcall	.-116    	; 0x1504 <oi_byte_tx>
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <oi_load_song>:
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	c8 2f       	mov	r28, r24
    1598:	7b 01       	movw	r14, r22
    159a:	6a 01       	movw	r12, r20
    159c:	a2 2e       	mov	r10, r18
    159e:	b3 2e       	mov	r11, r19
    15a0:	8c e8       	ldi	r24, 0x8C	; 140
    15a2:	b0 df       	rcall	.-160    	; 0x1504 <oi_byte_tx>
    15a4:	8c 2f       	mov	r24, r28
    15a6:	ae df       	rcall	.-164    	; 0x1504 <oi_byte_tx>
    15a8:	8e 2d       	mov	r24, r14
    15aa:	ac df       	rcall	.-168    	; 0x1504 <oi_byte_tx>
    15ac:	1e 14       	cp	r1, r14
    15ae:	1f 04       	cpc	r1, r15
    15b0:	74 f4       	brge	.+28     	; 0x15ce <oi_load_song+0x4c>
    15b2:	e6 01       	movw	r28, r12
    15b4:	0a 2d       	mov	r16, r10
    15b6:	1b 2d       	mov	r17, r11
    15b8:	ec 0c       	add	r14, r12
    15ba:	fd 1c       	adc	r15, r13
    15bc:	89 91       	ld	r24, Y+
    15be:	a2 df       	rcall	.-188    	; 0x1504 <oi_byte_tx>
    15c0:	f8 01       	movw	r30, r16
    15c2:	81 91       	ld	r24, Z+
    15c4:	8f 01       	movw	r16, r30
    15c6:	9e df       	rcall	.-196    	; 0x1504 <oi_byte_tx>
    15c8:	ce 15       	cp	r28, r14
    15ca:	df 05       	cpc	r29, r15
    15cc:	b9 f7       	brne	.-18     	; 0x15bc <oi_load_song+0x3a>
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	08 95       	ret

000015e4 <oi_play_song>:
    15e4:	cf 93       	push	r28
    15e6:	c8 2f       	mov	r28, r24
    15e8:	8d e8       	ldi	r24, 0x8D	; 141
    15ea:	8c df       	rcall	.-232    	; 0x1504 <oi_byte_tx>
    15ec:	8c 2f       	mov	r24, r28
    15ee:	8a df       	rcall	.-236    	; 0x1504 <oi_byte_tx>
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
    15f4:	eb e9       	ldi	r30, 0x9B	; 155
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 23       	and	r24, r24
    15fc:	ec f7       	brge	.-6      	; 0x15f8 <oi_byte_rx+0x4>

	return UDR1;
    15fe:	80 91 9c 00 	lds	r24, 0x009C
}
    1602:	08 95       	ret

00001604 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1612:	80 91 9b 00 	lds	r24, 0x009B
    1616:	88 23       	and	r24, r24
    1618:	44 f4       	brge	.+16     	; 0x162a <oi_update+0x26>
		i = UDR1;
    161a:	ac e9       	ldi	r26, 0x9C	; 156
    161c:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    161e:	eb e9       	ldi	r30, 0x9B	; 155
    1620:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
    1622:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1624:	80 81       	ld	r24, Z
    1626:	88 23       	and	r24, r24
    1628:	e4 f3       	brlt	.-8      	; 0x1622 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    162a:	8e e8       	ldi	r24, 0x8E	; 142
    162c:	6b df       	rcall	.-298    	; 0x1504 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	69 df       	rcall	.-302    	; 0x1504 <oi_byte_tx>
    1632:	e7 01       	movw	r28, r14
    1634:	87 01       	movw	r16, r14
    1636:	0c 5c       	subi	r16, 0xCC	; 204
    1638:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    163a:	dc df       	rcall	.-72     	; 0x15f4 <oi_byte_rx>
    163c:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    163e:	c0 17       	cp	r28, r16
    1640:	d1 07       	cpc	r29, r17
    1642:	d9 f7       	brne	.-10     	; 0x163a <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1644:	f7 01       	movw	r30, r14
    1646:	84 85       	ldd	r24, Z+12	; 0x0c
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	98 2f       	mov	r25, r24
    164c:	88 27       	eor	r24, r24
    164e:	25 85       	ldd	r18, Z+13	; 0x0d
    1650:	82 0f       	add	r24, r18
    1652:	91 1d       	adc	r25, r1
    1654:	95 87       	std	Z+13, r25	; 0x0d
    1656:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1658:	86 85       	ldd	r24, Z+14	; 0x0e
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	98 2f       	mov	r25, r24
    165e:	88 27       	eor	r24, r24
    1660:	27 85       	ldd	r18, Z+15	; 0x0f
    1662:	82 0f       	add	r24, r18
    1664:	91 1d       	adc	r25, r1
    1666:	97 87       	std	Z+15, r25	; 0x0f
    1668:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    166a:	81 89       	ldd	r24, Z+17	; 0x11
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	98 2f       	mov	r25, r24
    1670:	88 27       	eor	r24, r24
    1672:	22 89       	ldd	r18, Z+18	; 0x12
    1674:	82 0f       	add	r24, r18
    1676:	91 1d       	adc	r25, r1
    1678:	92 8b       	std	Z+18, r25	; 0x12
    167a:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    167c:	83 89       	ldd	r24, Z+19	; 0x13
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	98 2f       	mov	r25, r24
    1682:	88 27       	eor	r24, r24
    1684:	24 89       	ldd	r18, Z+20	; 0x14
    1686:	82 0f       	add	r24, r18
    1688:	91 1d       	adc	r25, r1
    168a:	94 8b       	std	Z+20, r25	; 0x14
    168c:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    168e:	86 89       	ldd	r24, Z+22	; 0x16
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	98 2f       	mov	r25, r24
    1694:	88 27       	eor	r24, r24
    1696:	27 89       	ldd	r18, Z+23	; 0x17
    1698:	82 0f       	add	r24, r18
    169a:	91 1d       	adc	r25, r1
    169c:	97 8b       	std	Z+23, r25	; 0x17
    169e:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    16a0:	80 8d       	ldd	r24, Z+24	; 0x18
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	98 2f       	mov	r25, r24
    16a6:	88 27       	eor	r24, r24
    16a8:	21 8d       	ldd	r18, Z+25	; 0x19
    16aa:	82 0f       	add	r24, r18
    16ac:	91 1d       	adc	r25, r1
    16ae:	91 8f       	std	Z+25, r25	; 0x19
    16b0:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    16b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	98 2f       	mov	r25, r24
    16b8:	88 27       	eor	r24, r24
    16ba:	23 8d       	ldd	r18, Z+27	; 0x1b
    16bc:	82 0f       	add	r24, r18
    16be:	91 1d       	adc	r25, r1
    16c0:	93 8f       	std	Z+27, r25	; 0x1b
    16c2:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    16c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	98 2f       	mov	r25, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	25 8d       	ldd	r18, Z+29	; 0x1d
    16ce:	82 0f       	add	r24, r18
    16d0:	91 1d       	adc	r25, r1
    16d2:	95 8f       	std	Z+29, r25	; 0x1d
    16d4:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
    16d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	98 2f       	mov	r25, r24
    16dc:	88 27       	eor	r24, r24
    16de:	27 8d       	ldd	r18, Z+31	; 0x1f
    16e0:	82 0f       	add	r24, r18
    16e2:	91 1d       	adc	r25, r1
    16e4:	97 8f       	std	Z+31, r25	; 0x1f
    16e6:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    16e8:	80 a1       	ldd	r24, Z+32	; 0x20
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	98 2f       	mov	r25, r24
    16ee:	88 27       	eor	r24, r24
    16f0:	21 a1       	ldd	r18, Z+33	; 0x21
    16f2:	82 0f       	add	r24, r18
    16f4:	91 1d       	adc	r25, r1
    16f6:	91 a3       	std	Z+33, r25	; 0x21
    16f8:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    16fa:	82 a1       	ldd	r24, Z+34	; 0x22
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	98 2f       	mov	r25, r24
    1700:	88 27       	eor	r24, r24
    1702:	23 a1       	ldd	r18, Z+35	; 0x23
    1704:	82 0f       	add	r24, r18
    1706:	91 1d       	adc	r25, r1
    1708:	93 a3       	std	Z+35, r25	; 0x23
    170a:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    170c:	82 a5       	ldd	r24, Z+42	; 0x2a
    170e:	48 2f       	mov	r20, r24
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	21 a5       	ldd	r18, Z+41	; 0x29
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	32 2f       	mov	r19, r18
    1718:	22 27       	eor	r18, r18
    171a:	24 0f       	add	r18, r20
    171c:	35 1f       	adc	r19, r21
    171e:	36 a3       	std	Z+38, r19	; 0x26
    1720:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    1722:	90 a9       	ldd	r25, Z+48	; 0x30
    1724:	89 2f       	mov	r24, r25
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	98 2f       	mov	r25, r24
    172a:	88 27       	eor	r24, r24
    172c:	84 0f       	add	r24, r20
    172e:	95 1f       	adc	r25, r21
    1730:	95 a7       	std	Z+45, r25	; 0x2d
    1732:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    1734:	82 a9       	ldd	r24, Z+50	; 0x32
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	98 2f       	mov	r25, r24
    173a:	88 27       	eor	r24, r24
    173c:	23 a9       	ldd	r18, Z+51	; 0x33
    173e:	82 0f       	add	r24, r18
    1740:	91 1d       	adc	r25, r1
    1742:	97 a7       	std	Z+47, r25	; 0x2f
    1744:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    1746:	84 a9       	ldd	r24, Z+52	; 0x34
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	98 2f       	mov	r25, r24
    174c:	88 27       	eor	r24, r24
    174e:	25 a9       	ldd	r18, Z+53	; 0x35
    1750:	82 0f       	add	r24, r18
    1752:	91 1d       	adc	r25, r1
    1754:	91 ab       	std	Z+49, r25	; 0x31
    1756:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    1758:	86 a9       	ldd	r24, Z+54	; 0x36
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	98 2f       	mov	r25, r24
    175e:	88 27       	eor	r24, r24
    1760:	27 a9       	ldd	r18, Z+55	; 0x37
    1762:	82 0f       	add	r24, r18
    1764:	91 1d       	adc	r25, r1
    1766:	93 ab       	std	Z+51, r25	; 0x33
    1768:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    176a:	83 e2       	ldi	r24, 0x23	; 35
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	4d d0       	rcall	.+154    	; 0x180a <wait_ms>
}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	08 95       	ret

0000177e <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	8c 01       	movw	r16, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1788:	c9 e9       	ldi	r28, 0x99	; 153
    178a:	d0 e0       	ldi	r29, 0x00	; 0
    178c:	80 e1       	ldi	r24, 0x10	; 16
    178e:	88 83       	st	Y, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    1790:	88 e1       	ldi	r24, 0x18	; 24
    1792:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    1796:	86 e0       	ldi	r24, 0x06	; 6
    1798:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    179c:	80 e8       	ldi	r24, 0x80	; 128
    179e:	b2 de       	rcall	.-668    	; 0x1504 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    17a0:	81 e8       	ldi	r24, 0x81	; 129
    17a2:	b0 de       	rcall	.-672    	; 0x1504 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    17a4:	88 e0       	ldi	r24, 0x08	; 8
    17a6:	ae de       	rcall	.-676    	; 0x1504 <oi_byte_tx>
	wait_ms(100);
    17a8:	84 e6       	ldi	r24, 0x64	; 100
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	2e d0       	rcall	.+92     	; 0x180a <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    17ae:	81 e2       	ldi	r24, 0x21	; 33
    17b0:	88 83       	st	Y, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    17b2:	84 e8       	ldi	r24, 0x84	; 132
    17b4:	a7 de       	rcall	.-690    	; 0x1504 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    17b6:	2f ef       	ldi	r18, 0xFF	; 255
    17b8:	47 e0       	ldi	r20, 0x07	; 7
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	aa de       	rcall	.-684    	; 0x1514 <oi_set_leds>
	
	oi_update(self);
    17c0:	c8 01       	movw	r24, r16
    17c2:	20 df       	rcall	.-448    	; 0x1604 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    17c4:	c8 01       	movw	r24, r16
    17c6:	1e df       	rcall	.-452    	; 0x1604 <oi_update>
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	08 95       	ret

000017d2 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    17d2:	10 92 ff 02 	sts	0x02FF, r1
    17d6:	10 92 fe 02 	sts	0x02FE, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    17da:	81 11       	cpse	r24, r1
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    17de:	8b e0       	ldi	r24, 0x0B	; 11
    17e0:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    17e2:	87 b7       	in	r24, 0x37	; 55
    17e4:	80 68       	ori	r24, 0x80	; 128
    17e6:	87 bf       	out	0x37, r24	; 55
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    17ee:	89 e0       	ldi	r24, 0x09	; 9
    17f0:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    17f2:	87 b7       	in	r24, 0x37	; 55
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    17f8:	78 94       	sei
    17fa:	08 95       	ret

000017fc <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    17fc:	87 b7       	in	r24, 0x37	; 55
    17fe:	8f 77       	andi	r24, 0x7F	; 127
    1800:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    1802:	85 b5       	in	r24, 0x25	; 37
    1804:	8f 77       	andi	r24, 0x7F	; 127
    1806:	85 bd       	out	0x25, r24	; 37
    1808:	08 95       	ret

0000180a <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    1810:	8a ef       	ldi	r24, 0xFA	; 250
    1812:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1814:	10 92 ff 02 	sts	0x02FF, r1
    1818:	10 92 fe 02 	sts	0x02FE, r1
	timer2_start(0);
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	d9 df       	rcall	.-78     	; 0x17d2 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    1820:	20 91 fe 02 	lds	r18, 0x02FE
    1824:	30 91 ff 02 	lds	r19, 0x02FF
    1828:	2c 17       	cp	r18, r28
    182a:	3d 07       	cpc	r19, r29
    182c:	c8 f3       	brcs	.-14     	; 0x1820 <wait_ms+0x16>

	timer2_stop();
    182e:	e6 df       	rcall	.-52     	; 0x17fc <timer2_stop>
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
	timer2_tick++;
    1844:	80 91 fe 02 	lds	r24, 0x02FE
    1848:	90 91 ff 02 	lds	r25, 0x02FF
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	90 93 ff 02 	sts	0x02FF, r25
    1852:	80 93 fe 02 	sts	0x02FE, r24
}
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <ADC_init>:
/* IR Program                                                           */
/************************************************************************/
void ADC_init()
{
	// REFS=11, ADLAR= 0, MUX don't care
	ADMUX |= (3<<REFS0) | (2<<MUX0); //(REFS1) | _BV(REFS0);
    1864:	87 b1       	in	r24, 0x07	; 7
    1866:	82 6c       	ori	r24, 0xC2	; 194
    1868:	87 b9       	out	0x07, r24	; 7
	
	// ADEN=1, ADFR=0, ADIE=0, ADPS=111, others don't care.
	//See page 246 of user guide
	ADCSRA |= (1<<ADEN) | (7<<ADPS0);
    186a:	86 b1       	in	r24, 0x06	; 6
    186c:	87 68       	ori	r24, 0x87	; 135
    186e:	86 b9       	out	0x06, r24	; 6
    1870:	08 95       	ret

00001872 <read_ADC>:
}

unsigned int read_ADC()
{
	ADMUX |= (PF2 & 0x1F);
    1872:	39 9a       	sbi	0x07, 1	; 7
	//Sets ADSC bit of ADCSRA, enabling ADC
	ADCSRA |= (1<<ADSC);
    1874:	36 9a       	sbi	0x06, 6	; 6
	//Waits for conversion to be done.
	while(ADCSRA & (1<<ADFR)){}
    1876:	35 99       	sbic	0x06, 5	; 6
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <read_ADC+0x4>
	//Sets conversion to temp var.
	return ADC;
    187a:	84 b1       	in	r24, 0x04	; 4
    187c:	95 b1       	in	r25, 0x05	; 5
}
    187e:	08 95       	ret

00001880 <read_IR_distance>:

int read_IR_distance() {
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	c5 e0       	ldi	r28, 0x05	; 5
    188a:	d0 e0       	ldi	r29, 0x00	; 0
	int sum = 0;
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 5; i++)
	sum += read_ADC();
    1890:	f0 df       	rcall	.-32     	; 0x1872 <read_ADC>
    1892:	08 0f       	add	r16, r24
    1894:	19 1f       	adc	r17, r25
    1896:	21 97       	sbiw	r28, 0x01	; 1
	return ADC;
}

int read_IR_distance() {
	int sum = 0;
	for (int i = 0; i < 5; i++)
    1898:	d9 f7       	brne	.-10     	; 0x1890 <read_IR_distance+0x10>
	sum += read_ADC();
	
	int quantVal = sum/5;
    189a:	c8 01       	movw	r24, r16
    189c:	65 e0       	ldi	r22, 0x05	; 5
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	0e 94 57 15 	call	0x2aae	; 0x2aae <__divmodhi4>
	
	return (pow(quantVal,-1.171) * 31427);
    18a4:	07 2e       	mov	r0, r23
    18a6:	00 0c       	add	r0, r0
    18a8:	88 0b       	sbc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	40 d2       	rcall	.+1152   	; 0x1d2e <__floatsisf>
    18ae:	24 e5       	ldi	r18, 0x54	; 84
    18b0:	33 ee       	ldi	r19, 0xE3	; 227
    18b2:	45 e9       	ldi	r20, 0x95	; 149
    18b4:	5f eb       	ldi	r21, 0xBF	; 191
    18b6:	b7 d3       	rcall	.+1902   	; 0x2026 <pow>
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	36 e8       	ldi	r19, 0x86	; 134
    18bc:	45 ef       	ldi	r20, 0xF5	; 245
    18be:	56 e4       	ldi	r21, 0x46	; 70
    18c0:	4f d3       	rcall	.+1694   	; 0x1f60 <__mulsf3>
    18c2:	02 d2       	rcall	.+1028   	; 0x1cc8 <__fixsfsi>
}
    18c4:	cb 01       	movw	r24, r22
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <ping_timer_init>:
volatile unsigned fall = 0;
volatile unsigned signal = 0;

void ping_timer_init()
{
	TCCR1A = 0x00;		// WGM1[1:0]=00
    18d0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b11000011; // Noise canceller ON, falling edge is trigger, prescaler of 64
    18d2:	83 ec       	ldi	r24, 0xC3	; 195
    18d4:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1 << TICIE1; // Enable TICIE1
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	87 bf       	out	0x37, r24	; 55
    18da:	08 95       	ret

000018dc <send_pulse>:
}

void send_pulse()
{
	TIMSK &= ~0b00100100;
    18dc:	87 b7       	in	r24, 0x37	; 55
    18de:	8b 7d       	andi	r24, 0xDB	; 219
    18e0:	87 bf       	out	0x37, r24	; 55
	DDRD |= 0x10;
    18e2:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
    18e4:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	8f df       	rcall	.-226    	; 0x180a <wait_ms>
	PORTD &= 0xEF;
    18ec:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF;
    18ee:	8c 98       	cbi	0x11, 4	; 17
	
	TIFR |= (1 << ICF1); // Clear flag
    18f0:	86 b7       	in	r24, 0x36	; 54
    18f2:	80 62       	ori	r24, 0x20	; 32
    18f4:	86 bf       	out	0x36, r24	; 54
	
	TIMSK |= 0b00100000;
    18f6:	87 b7       	in	r24, 0x37	; 55
    18f8:	80 62       	ori	r24, 0x20	; 32
    18fa:	87 bf       	out	0x37, r24	; 55
    18fc:	08 95       	ret

000018fe <__vector_11>:
}

/* Input Capture Event for Timer1 */
ISR(TIMER1_CAPT_vect)
{
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
	if (rise == 0)
    1910:	80 91 fc 02 	lds	r24, 0x02FC
    1914:	90 91 fd 02 	lds	r25, 0x02FD
    1918:	89 2b       	or	r24, r25
    191a:	39 f4       	brne	.+14     	; 0x192a <__vector_11+0x2c>
	{
		rise = ICR1;
    191c:	86 b5       	in	r24, 0x26	; 38
    191e:	97 b5       	in	r25, 0x27	; 39
    1920:	90 93 fd 02 	sts	0x02FD, r25
    1924:	80 93 fc 02 	sts	0x02FC, r24
    1928:	22 c0       	rjmp	.+68     	; 0x196e <__vector_11+0x70>
		
	}
	else if (fall == 0)
    192a:	80 91 fa 02 	lds	r24, 0x02FA
    192e:	90 91 fb 02 	lds	r25, 0x02FB
    1932:	89 2b       	or	r24, r25
    1934:	e1 f4       	brne	.+56     	; 0x196e <__vector_11+0x70>
	{
		fall = ICR1;
    1936:	86 b5       	in	r24, 0x26	; 38
    1938:	97 b5       	in	r25, 0x27	; 39
    193a:	90 93 fb 02 	sts	0x02FB, r25
    193e:	80 93 fa 02 	sts	0x02FA, r24
		signal = fall - rise;
    1942:	80 91 fa 02 	lds	r24, 0x02FA
    1946:	90 91 fb 02 	lds	r25, 0x02FB
    194a:	20 91 fc 02 	lds	r18, 0x02FC
    194e:	30 91 fd 02 	lds	r19, 0x02FD
    1952:	82 1b       	sub	r24, r18
    1954:	93 0b       	sbc	r25, r19
    1956:	90 93 f9 02 	sts	0x02F9, r25
    195a:	80 93 f8 02 	sts	0x02F8, r24
		
		rise = 0;
    195e:	10 92 fd 02 	sts	0x02FD, r1
    1962:	10 92 fc 02 	sts	0x02FC, r1
		fall = 0;
    1966:	10 92 fb 02 	sts	0x02FB, r1
    196a:	10 92 fa 02 	sts	0x02FA, r1
	}
	
	// Rising or falling?
	TCCR1B ^= 0b01000000;
    196e:	9e b5       	in	r25, 0x2e	; 46
    1970:	80 e4       	ldi	r24, 0x40	; 64
    1972:	89 27       	eor	r24, r25
    1974:	8e bd       	out	0x2e, r24	; 46
}
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <read_PING_distance>:

float read_PING_distance() {
	return ((signal/(16000000.0/64.0))*(34300.0/2.0)); // (delta/(Frequency/pre-scaler))*(speed of sound/2)
    1988:	60 91 f8 02 	lds	r22, 0x02F8
    198c:	70 91 f9 02 	lds	r23, 0x02F9
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	ca d1       	rcall	.+916    	; 0x1d2a <__floatunsisf>
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	34 e2       	ldi	r19, 0x24	; 36
    199a:	44 e7       	ldi	r20, 0x74	; 116
    199c:	58 e4       	ldi	r21, 0x48	; 72
    199e:	2c d1       	rcall	.+600    	; 0x1bf8 <__divsf3>
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3c ef       	ldi	r19, 0xFC	; 252
    19a4:	45 e8       	ldi	r20, 0x85	; 133
    19a6:	56 e4       	ldi	r21, 0x46	; 70
    19a8:	db c2       	rjmp	.+1462   	; 0x1f60 <__mulsf3>
}
    19aa:	08 95       	ret

000019ac <servo_timer_init>:
#define ZERO ((16000000/(8 * 1000)) * 1) * .5075         // 1 ms pulse - clockwise far end; ((16000000/(8 * 1000)) * 1ms) * .5075 (0.4 for Robot 3) calibration
#define NINTY ((16000000/(8 * 1000)) * 1.5) * .9397      // 1.5 ms pulse - center position; ((16000000/(8 * 1000)) * 1.5ms) * .9397 (0.816666 for Robot 3) calibration
#define ONE_EIGHTY ((16000000/(8 * 1000)) * 2) * 1.1362  // 2 ms pulse - counterclockwise far end; ((16000000/(8 * 1000)) * 2ms) * 1.1362 (1.0375 for Robot 3) calibration

void servo_timer_init() {
	TCCR3A = 0b00100011; //set COM and WGM
    19ac:	83 e2       	ldi	r24, 0x23	; 35
    19ae:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //set WGM and CS
    19b2:	8a e1       	ldi	r24, 0x1A	; 26
    19b4:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP;
    19b8:	88 ef       	ldi	r24, 0xF8	; 248
    19ba:	97 ea       	ldi	r25, 0xA7	; 167
    19bc:	90 93 87 00 	sts	0x0087, r25
    19c0:	80 93 86 00 	sts	0x0086, r24
	
	DDRE |= _BV(4); // Set PE4 as output
    19c4:	14 9a       	sbi	0x02, 4	; 2
	
	OCR3B = NINTY; // Initialize servo to center
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	9b e0       	ldi	r25, 0x0B	; 11
    19ca:	90 93 85 00 	sts	0x0085, r25
    19ce:	80 93 84 00 	sts	0x0084, r24
	wait_ms(500); // Wait for Servo to get into position
    19d2:	84 ef       	ldi	r24, 0xF4	; 244
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	19 cf       	rjmp	.-462    	; 0x180a <wait_ms>
    19d8:	08 95       	ret

000019da <move_servo>:
}

void move_servo(volatile float* degrees)
{
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
	if (*degrees <= 180 && *degrees >= 0) // Prevent servo from going out of range
    19e0:	68 81       	ld	r22, Y
    19e2:	79 81       	ldd	r23, Y+1	; 0x01
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	44 e3       	ldi	r20, 0x34	; 52
    19ee:	53 e4       	ldi	r21, 0x43	; 67
    19f0:	fc d0       	rcall	.+504    	; 0x1bea <__cmpsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	3c f1       	brlt	.+78     	; 0x1a44 <move_servo+0x6a>
    19f6:	68 81       	ld	r22, Y
    19f8:	79 81       	ldd	r23, Y+1	; 0x01
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	a2 d2       	rcall	.+1348   	; 0x1f4a <__gesf2>
    1a06:	88 23       	and	r24, r24
    1a08:	ec f0       	brlt	.+58     	; 0x1a44 <move_servo+0x6a>
	OCR3B = (ZERO + (*degrees/180) * (ONE_EIGHTY - ZERO)) - 1; // Convert values to degrees and store as pulse width
    1a0a:	68 81       	ld	r22, Y
    1a0c:	79 81       	ldd	r23, Y+1	; 0x01
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	44 e3       	ldi	r20, 0x34	; 52
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	ee d0       	rcall	.+476    	; 0x1bf8 <__divsf3>
    1a1c:	2c ec       	ldi	r18, 0xCC	; 204
    1a1e:	3c e9       	ldi	r19, 0x9C	; 156
    1a20:	4c e5       	ldi	r20, 0x5C	; 92
    1a22:	55 e4       	ldi	r21, 0x45	; 69
    1a24:	9d d2       	rcall	.+1338   	; 0x1f60 <__mulsf3>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 ec       	ldi	r19, 0xC0	; 192
    1a2a:	4d e7       	ldi	r20, 0x7D	; 125
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	51 d0       	rcall	.+162    	; 0x1ad2 <__addsf3>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	4b d0       	rcall	.+150    	; 0x1ad0 <__subsf3>
    1a3a:	4b d1       	rcall	.+662    	; 0x1cd2 <__fixunssfsi>
    1a3c:	70 93 85 00 	sts	0x0085, r23
    1a40:	60 93 84 00 	sts	0x0084, r22
	
	// Prevent angle from going out of bounds
	if (*degrees > 180)
    1a44:	68 81       	ld	r22, Y
    1a46:	79 81       	ldd	r23, Y+1	; 0x01
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	44 e3       	ldi	r20, 0x34	; 52
    1a52:	53 e4       	ldi	r21, 0x43	; 67
    1a54:	7a d2       	rcall	.+1268   	; 0x1f4a <__gesf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f4       	brge	.+18     	; 0x1a6c <move_servo+0x92>
	*degrees = 180;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a4 e3       	ldi	r26, 0x34	; 52
    1a60:	b3 e4       	ldi	r27, 0x43	; 67
    1a62:	88 83       	st	Y, r24
    1a64:	99 83       	std	Y+1, r25	; 0x01
    1a66:	aa 83       	std	Y+2, r26	; 0x02
    1a68:	bb 83       	std	Y+3, r27	; 0x03
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <move_servo+0xae>
	else if (*degrees < 0)
    1a6c:	68 81       	ld	r22, Y
    1a6e:	79 81       	ldd	r23, Y+1	; 0x01
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	9b 81       	ldd	r25, Y+3	; 0x03
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	a9 01       	movw	r20, r18
    1a7a:	b7 d0       	rcall	.+366    	; 0x1bea <__cmpsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	24 f4       	brge	.+8      	; 0x1a88 <move_servo+0xae>
	*degrees = 0;
    1a80:	18 82       	st	Y, r1
    1a82:	19 82       	std	Y+1, r1	; 0x01
    1a84:	1a 82       	std	Y+2, r1	; 0x02
    1a86:	1b 82       	std	Y+3, r1	; 0x03
}
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	08 95       	ret

00001a8e <USART_Init>:
/* See page 362 of User Guide for register summary                      */
/************************************************************************/
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate. Put the upper part of the baud number here (bits 8 to 11) */
	UBRR0H = (unsigned char) (ubrr >> 8);
    1a8e:	90 93 90 00 	sts	0x0090, r25
	
	/*Put the remaining part of the baud number here*/
	UBRR0L = (unsigned char) ubrr;
    1a92:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = (1 << U2X0); /* Steps Double Speed Asynchronous mode of communication */
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN); /* Enable receiver and transmitter */
    1a98:	88 e1       	ldi	r24, 0x18	; 24
    1a9a:	8a b9       	out	0x0a, r24	; 10

	UCSR0C = (1 << USBS0) | (3 << UCSZ00); /* Set frame format: 8data, 2stop bit */
    1a9c:	8e e0       	ldi	r24, 0x0E	; 14
    1a9e:	80 93 95 00 	sts	0x0095, r24
    1aa2:	08 95       	ret

00001aa4 <USART_Transmit>:
/* Enabled by USART_Init                                                */
/************************************************************************/
void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0))) ;
    1aa4:	5d 9b       	sbis	0x0b, 5	; 11
    1aa6:	fe cf       	rjmp	.-4      	; 0x1aa4 <USART_Transmit>
	UDR0 = data; /* Put data into buffer, sends the data */
    1aa8:	8c b9       	out	0x0c, r24	; 12
    1aaa:	08 95       	ret

00001aac <USART_Receive>:
/* Enabled by USART_Init                                                */
/************************************************************************/
unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0))) ;
    1aac:	5f 9b       	sbis	0x0b, 7	; 11
    1aae:	fe cf       	rjmp	.-4      	; 0x1aac <USART_Receive>
	
	return UDR0; /* Get and return received data from buffer */
    1ab0:	8c b1       	in	r24, 0x0c	; 12
}
    1ab2:	08 95       	ret

00001ab4 <send_message>:
/************************************************************************/
/* Calls USART_Transmit for each character in the array                 */
/************************************************************************/
void send_message(char *message)
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	ec 01       	movw	r28, r24
	for (int i = 0; message[i] != '\0'; i++)
    1aba:	88 81       	ld	r24, Y
    1abc:	88 23       	and	r24, r24
    1abe:	29 f0       	breq	.+10     	; 0x1aca <send_message+0x16>
    1ac0:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(message[i]);
    1ac2:	f0 df       	rcall	.-32     	; 0x1aa4 <USART_Transmit>
/************************************************************************/
/* Calls USART_Transmit for each character in the array                 */
/************************************************************************/
void send_message(char *message)
{
	for (int i = 0; message[i] != '\0'; i++)
    1ac4:	89 91       	ld	r24, Y+
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	fc cf       	rjmp	.-8      	; 0x1ac2 <send_message+0xe>
		USART_Transmit(message[i]);
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <__subsf3>:
    1ad0:	50 58       	subi	r21, 0x80	; 128

00001ad2 <__addsf3>:
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	0e d0       	rcall	.+28     	; 0x1af4 <__addsf3x>
    1ad8:	ed c1       	rjmp	.+986    	; 0x1eb4 <__fp_round>
    1ada:	b6 d1       	rcall	.+876    	; 0x1e48 <__fp_pscA>
    1adc:	30 f0       	brcs	.+12     	; 0x1aea <__addsf3+0x18>
    1ade:	bb d1       	rcall	.+886    	; 0x1e56 <__fp_pscB>
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__addsf3+0x18>
    1ae2:	31 f4       	brne	.+12     	; 0x1af0 <__addsf3+0x1e>
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <__addsf3+0x1a>
    1ae8:	1e f4       	brtc	.+6      	; 0x1af0 <__addsf3+0x1e>
    1aea:	86 c1       	rjmp	.+780    	; 0x1df8 <__fp_nan>
    1aec:	0e f4       	brtc	.+2      	; 0x1af0 <__addsf3+0x1e>
    1aee:	e0 95       	com	r30
    1af0:	e7 fb       	bst	r30, 7
    1af2:	7c c1       	rjmp	.+760    	; 0x1dec <__fp_inf>

00001af4 <__addsf3x>:
    1af4:	e9 2f       	mov	r30, r25
    1af6:	00 d2       	rcall	.+1024   	; 0x1ef8 <__fp_split3>
    1af8:	80 f3       	brcs	.-32     	; 0x1ada <__addsf3+0x8>
    1afa:	ba 17       	cp	r27, r26
    1afc:	62 07       	cpc	r22, r18
    1afe:	73 07       	cpc	r23, r19
    1b00:	84 07       	cpc	r24, r20
    1b02:	95 07       	cpc	r25, r21
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__addsf3x+0x18>
    1b06:	71 f4       	brne	.+28     	; 0x1b24 <__addsf3x+0x30>
    1b08:	9e f5       	brtc	.+102    	; 0x1b70 <__addsf3x+0x7c>
    1b0a:	18 c2       	rjmp	.+1072   	; 0x1f3c <__fp_zero>
    1b0c:	0e f4       	brtc	.+2      	; 0x1b10 <__addsf3x+0x1c>
    1b0e:	e0 95       	com	r30
    1b10:	0b 2e       	mov	r0, r27
    1b12:	ba 2f       	mov	r27, r26
    1b14:	a0 2d       	mov	r26, r0
    1b16:	0b 01       	movw	r0, r22
    1b18:	b9 01       	movw	r22, r18
    1b1a:	90 01       	movw	r18, r0
    1b1c:	0c 01       	movw	r0, r24
    1b1e:	ca 01       	movw	r24, r20
    1b20:	a0 01       	movw	r20, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	ff 27       	eor	r31, r31
    1b26:	59 1b       	sub	r21, r25
    1b28:	99 f0       	breq	.+38     	; 0x1b50 <__addsf3x+0x5c>
    1b2a:	59 3f       	cpi	r21, 0xF9	; 249
    1b2c:	50 f4       	brcc	.+20     	; 0x1b42 <__addsf3x+0x4e>
    1b2e:	50 3e       	cpi	r21, 0xE0	; 224
    1b30:	68 f1       	brcs	.+90     	; 0x1b8c <__addsf3x+0x98>
    1b32:	1a 16       	cp	r1, r26
    1b34:	f0 40       	sbci	r31, 0x00	; 0
    1b36:	a2 2f       	mov	r26, r18
    1b38:	23 2f       	mov	r18, r19
    1b3a:	34 2f       	mov	r19, r20
    1b3c:	44 27       	eor	r20, r20
    1b3e:	58 5f       	subi	r21, 0xF8	; 248
    1b40:	f3 cf       	rjmp	.-26     	; 0x1b28 <__addsf3x+0x34>
    1b42:	46 95       	lsr	r20
    1b44:	37 95       	ror	r19
    1b46:	27 95       	ror	r18
    1b48:	a7 95       	ror	r26
    1b4a:	f0 40       	sbci	r31, 0x00	; 0
    1b4c:	53 95       	inc	r21
    1b4e:	c9 f7       	brne	.-14     	; 0x1b42 <__addsf3x+0x4e>
    1b50:	7e f4       	brtc	.+30     	; 0x1b70 <__addsf3x+0x7c>
    1b52:	1f 16       	cp	r1, r31
    1b54:	ba 0b       	sbc	r27, r26
    1b56:	62 0b       	sbc	r22, r18
    1b58:	73 0b       	sbc	r23, r19
    1b5a:	84 0b       	sbc	r24, r20
    1b5c:	ba f0       	brmi	.+46     	; 0x1b8c <__addsf3x+0x98>
    1b5e:	91 50       	subi	r25, 0x01	; 1
    1b60:	a1 f0       	breq	.+40     	; 0x1b8a <__addsf3x+0x96>
    1b62:	ff 0f       	add	r31, r31
    1b64:	bb 1f       	adc	r27, r27
    1b66:	66 1f       	adc	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	c2 f7       	brpl	.-16     	; 0x1b5e <__addsf3x+0x6a>
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <__addsf3x+0x98>
    1b70:	ba 0f       	add	r27, r26
    1b72:	62 1f       	adc	r22, r18
    1b74:	73 1f       	adc	r23, r19
    1b76:	84 1f       	adc	r24, r20
    1b78:	48 f4       	brcc	.+18     	; 0x1b8c <__addsf3x+0x98>
    1b7a:	87 95       	ror	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b7 95       	ror	r27
    1b82:	f7 95       	ror	r31
    1b84:	9e 3f       	cpi	r25, 0xFE	; 254
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <__addsf3x+0x96>
    1b88:	b3 cf       	rjmp	.-154    	; 0x1af0 <__addsf3+0x1e>
    1b8a:	93 95       	inc	r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__addsf3x+0x9e>
    1b90:	99 27       	eor	r25, r25
    1b92:	ee 0f       	add	r30, r30
    1b94:	97 95       	ror	r25
    1b96:	87 95       	ror	r24
    1b98:	08 95       	ret

00001b9a <atan>:
    1b9a:	df 93       	push	r29
    1b9c:	dd 27       	eor	r29, r29
    1b9e:	b9 2f       	mov	r27, r25
    1ba0:	bf 77       	andi	r27, 0x7F	; 127
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	16 16       	cp	r1, r22
    1ba8:	17 06       	cpc	r1, r23
    1baa:	48 07       	cpc	r20, r24
    1bac:	5b 07       	cpc	r21, r27
    1bae:	10 f4       	brcc	.+4      	; 0x1bb4 <atan+0x1a>
    1bb0:	d9 2f       	mov	r29, r25
    1bb2:	cf d1       	rcall	.+926    	; 0x1f52 <inverse>
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	7f 93       	push	r23
    1bba:	6f 93       	push	r22
    1bbc:	c8 d2       	rcall	.+1424   	; 0x214e <square>
    1bbe:	ec e8       	ldi	r30, 0x8C	; 140
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	1d d1       	rcall	.+570    	; 0x1dfe <__fp_powser>
    1bc4:	77 d1       	rcall	.+750    	; 0x1eb4 <__fp_round>
    1bc6:	2f 91       	pop	r18
    1bc8:	3f 91       	pop	r19
    1bca:	4f 91       	pop	r20
    1bcc:	5f 91       	pop	r21
    1bce:	d4 d1       	rcall	.+936    	; 0x1f78 <__mulsf3x>
    1bd0:	dd 23       	and	r29, r29
    1bd2:	49 f0       	breq	.+18     	; 0x1be6 <atan+0x4c>
    1bd4:	90 58       	subi	r25, 0x80	; 128
    1bd6:	a2 ea       	ldi	r26, 0xA2	; 162
    1bd8:	2a ed       	ldi	r18, 0xDA	; 218
    1bda:	3f e0       	ldi	r19, 0x0F	; 15
    1bdc:	49 ec       	ldi	r20, 0xC9	; 201
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	d0 78       	andi	r29, 0x80	; 128
    1be2:	5d 27       	eor	r21, r29
    1be4:	87 df       	rcall	.-242    	; 0x1af4 <__addsf3x>
    1be6:	df 91       	pop	r29
    1be8:	65 c1       	rjmp	.+714    	; 0x1eb4 <__fp_round>

00001bea <__cmpsf2>:
    1bea:	dc d0       	rcall	.+440    	; 0x1da4 <__fp_cmp>
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <__cmpsf2+0x6>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	08 95       	ret

00001bf2 <cos>:
    1bf2:	39 d1       	rcall	.+626    	; 0x1e66 <__fp_rempio2>
    1bf4:	e3 95       	inc	r30
    1bf6:	6f c1       	rjmp	.+734    	; 0x1ed6 <__fp_sinus>

00001bf8 <__divsf3>:
    1bf8:	0c d0       	rcall	.+24     	; 0x1c12 <__divsf3x>
    1bfa:	5c c1       	rjmp	.+696    	; 0x1eb4 <__fp_round>
    1bfc:	2c d1       	rcall	.+600    	; 0x1e56 <__fp_pscB>
    1bfe:	40 f0       	brcs	.+16     	; 0x1c10 <__divsf3+0x18>
    1c00:	23 d1       	rcall	.+582    	; 0x1e48 <__fp_pscA>
    1c02:	30 f0       	brcs	.+12     	; 0x1c10 <__divsf3+0x18>
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <__divsf3+0x16>
    1c06:	5f 3f       	cpi	r21, 0xFF	; 255
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <__divsf3+0x18>
    1c0a:	f0 c0       	rjmp	.+480    	; 0x1dec <__fp_inf>
    1c0c:	51 11       	cpse	r21, r1
    1c0e:	97 c1       	rjmp	.+814    	; 0x1f3e <__fp_szero>
    1c10:	f3 c0       	rjmp	.+486    	; 0x1df8 <__fp_nan>

00001c12 <__divsf3x>:
    1c12:	72 d1       	rcall	.+740    	; 0x1ef8 <__fp_split3>
    1c14:	98 f3       	brcs	.-26     	; 0x1bfc <__divsf3+0x4>

00001c16 <__divsf3_pse>:
    1c16:	99 23       	and	r25, r25
    1c18:	c9 f3       	breq	.-14     	; 0x1c0c <__divsf3+0x14>
    1c1a:	55 23       	and	r21, r21
    1c1c:	b1 f3       	breq	.-20     	; 0x1c0a <__divsf3+0x12>
    1c1e:	95 1b       	sub	r25, r21
    1c20:	55 0b       	sbc	r21, r21
    1c22:	bb 27       	eor	r27, r27
    1c24:	aa 27       	eor	r26, r26
    1c26:	62 17       	cp	r22, r18
    1c28:	73 07       	cpc	r23, r19
    1c2a:	84 07       	cpc	r24, r20
    1c2c:	38 f0       	brcs	.+14     	; 0x1c3c <__divsf3_pse+0x26>
    1c2e:	9f 5f       	subi	r25, 0xFF	; 255
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	44 1f       	adc	r20, r20
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	a9 f3       	breq	.-22     	; 0x1c26 <__divsf3_pse+0x10>
    1c3c:	33 d0       	rcall	.+102    	; 0x1ca4 <__divsf3_pse+0x8e>
    1c3e:	0e 2e       	mov	r0, r30
    1c40:	3a f0       	brmi	.+14     	; 0x1c50 <__divsf3_pse+0x3a>
    1c42:	e0 e8       	ldi	r30, 0x80	; 128
    1c44:	30 d0       	rcall	.+96     	; 0x1ca6 <__divsf3_pse+0x90>
    1c46:	91 50       	subi	r25, 0x01	; 1
    1c48:	50 40       	sbci	r21, 0x00	; 0
    1c4a:	e6 95       	lsr	r30
    1c4c:	00 1c       	adc	r0, r0
    1c4e:	ca f7       	brpl	.-14     	; 0x1c42 <__divsf3_pse+0x2c>
    1c50:	29 d0       	rcall	.+82     	; 0x1ca4 <__divsf3_pse+0x8e>
    1c52:	fe 2f       	mov	r31, r30
    1c54:	27 d0       	rcall	.+78     	; 0x1ca4 <__divsf3_pse+0x8e>
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	26 17       	cp	r18, r22
    1c60:	37 07       	cpc	r19, r23
    1c62:	48 07       	cpc	r20, r24
    1c64:	ab 07       	cpc	r26, r27
    1c66:	b0 e8       	ldi	r27, 0x80	; 128
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <__divsf3_pse+0x56>
    1c6a:	bb 0b       	sbc	r27, r27
    1c6c:	80 2d       	mov	r24, r0
    1c6e:	bf 01       	movw	r22, r30
    1c70:	ff 27       	eor	r31, r31
    1c72:	93 58       	subi	r25, 0x83	; 131
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	2a f0       	brmi	.+10     	; 0x1c82 <__divsf3_pse+0x6c>
    1c78:	9e 3f       	cpi	r25, 0xFE	; 254
    1c7a:	51 05       	cpc	r21, r1
    1c7c:	68 f0       	brcs	.+26     	; 0x1c98 <__divsf3_pse+0x82>
    1c7e:	b6 c0       	rjmp	.+364    	; 0x1dec <__fp_inf>
    1c80:	5e c1       	rjmp	.+700    	; 0x1f3e <__fp_szero>
    1c82:	5f 3f       	cpi	r21, 0xFF	; 255
    1c84:	ec f3       	brlt	.-6      	; 0x1c80 <__divsf3_pse+0x6a>
    1c86:	98 3e       	cpi	r25, 0xE8	; 232
    1c88:	dc f3       	brlt	.-10     	; 0x1c80 <__divsf3_pse+0x6a>
    1c8a:	86 95       	lsr	r24
    1c8c:	77 95       	ror	r23
    1c8e:	67 95       	ror	r22
    1c90:	b7 95       	ror	r27
    1c92:	f7 95       	ror	r31
    1c94:	9f 5f       	subi	r25, 0xFF	; 255
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__divsf3_pse+0x74>
    1c98:	88 0f       	add	r24, r24
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	97 f9       	bld	r25, 7
    1ca2:	08 95       	ret
    1ca4:	e1 e0       	ldi	r30, 0x01	; 1
    1ca6:	66 0f       	add	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	bb 1f       	adc	r27, r27
    1cae:	62 17       	cp	r22, r18
    1cb0:	73 07       	cpc	r23, r19
    1cb2:	84 07       	cpc	r24, r20
    1cb4:	ba 07       	cpc	r27, r26
    1cb6:	20 f0       	brcs	.+8      	; 0x1cc0 <__divsf3_pse+0xaa>
    1cb8:	62 1b       	sub	r22, r18
    1cba:	73 0b       	sbc	r23, r19
    1cbc:	84 0b       	sbc	r24, r20
    1cbe:	ba 0b       	sbc	r27, r26
    1cc0:	ee 1f       	adc	r30, r30
    1cc2:	88 f7       	brcc	.-30     	; 0x1ca6 <__divsf3_pse+0x90>
    1cc4:	e0 95       	com	r30
    1cc6:	08 95       	ret

00001cc8 <__fixsfsi>:
    1cc8:	04 d0       	rcall	.+8      	; 0x1cd2 <__fixunssfsi>
    1cca:	68 94       	set
    1ccc:	b1 11       	cpse	r27, r1
    1cce:	37 c1       	rjmp	.+622    	; 0x1f3e <__fp_szero>
    1cd0:	08 95       	ret

00001cd2 <__fixunssfsi>:
    1cd2:	1a d1       	rcall	.+564    	; 0x1f08 <__fp_splitA>
    1cd4:	88 f0       	brcs	.+34     	; 0x1cf8 <__fixunssfsi+0x26>
    1cd6:	9f 57       	subi	r25, 0x7F	; 127
    1cd8:	90 f0       	brcs	.+36     	; 0x1cfe <__fixunssfsi+0x2c>
    1cda:	b9 2f       	mov	r27, r25
    1cdc:	99 27       	eor	r25, r25
    1cde:	b7 51       	subi	r27, 0x17	; 23
    1ce0:	a0 f0       	brcs	.+40     	; 0x1d0a <__fixunssfsi+0x38>
    1ce2:	d1 f0       	breq	.+52     	; 0x1d18 <__fixunssfsi+0x46>
    1ce4:	66 0f       	add	r22, r22
    1ce6:	77 1f       	adc	r23, r23
    1ce8:	88 1f       	adc	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	1a f0       	brmi	.+6      	; 0x1cf4 <__fixunssfsi+0x22>
    1cee:	ba 95       	dec	r27
    1cf0:	c9 f7       	brne	.-14     	; 0x1ce4 <__fixunssfsi+0x12>
    1cf2:	12 c0       	rjmp	.+36     	; 0x1d18 <__fixunssfsi+0x46>
    1cf4:	b1 30       	cpi	r27, 0x01	; 1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <__fixunssfsi+0x46>
    1cf8:	21 d1       	rcall	.+578    	; 0x1f3c <__fp_zero>
    1cfa:	b1 e0       	ldi	r27, 0x01	; 1
    1cfc:	08 95       	ret
    1cfe:	1e c1       	rjmp	.+572    	; 0x1f3c <__fp_zero>
    1d00:	67 2f       	mov	r22, r23
    1d02:	78 2f       	mov	r23, r24
    1d04:	88 27       	eor	r24, r24
    1d06:	b8 5f       	subi	r27, 0xF8	; 248
    1d08:	39 f0       	breq	.+14     	; 0x1d18 <__fixunssfsi+0x46>
    1d0a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d0c:	cc f3       	brlt	.-14     	; 0x1d00 <__fixunssfsi+0x2e>
    1d0e:	86 95       	lsr	r24
    1d10:	77 95       	ror	r23
    1d12:	67 95       	ror	r22
    1d14:	b3 95       	inc	r27
    1d16:	d9 f7       	brne	.-10     	; 0x1d0e <__fixunssfsi+0x3c>
    1d18:	3e f4       	brtc	.+14     	; 0x1d28 <__fixunssfsi+0x56>
    1d1a:	90 95       	com	r25
    1d1c:	80 95       	com	r24
    1d1e:	70 95       	com	r23
    1d20:	61 95       	neg	r22
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	8f 4f       	sbci	r24, 0xFF	; 255
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	08 95       	ret

00001d2a <__floatunsisf>:
    1d2a:	e8 94       	clt
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <__floatsisf+0x12>

00001d2e <__floatsisf>:
    1d2e:	97 fb       	bst	r25, 7
    1d30:	3e f4       	brtc	.+14     	; 0x1d40 <__floatsisf+0x12>
    1d32:	90 95       	com	r25
    1d34:	80 95       	com	r24
    1d36:	70 95       	com	r23
    1d38:	61 95       	neg	r22
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	99 23       	and	r25, r25
    1d42:	a9 f0       	breq	.+42     	; 0x1d6e <__floatsisf+0x40>
    1d44:	f9 2f       	mov	r31, r25
    1d46:	96 e9       	ldi	r25, 0x96	; 150
    1d48:	bb 27       	eor	r27, r27
    1d4a:	93 95       	inc	r25
    1d4c:	f6 95       	lsr	r31
    1d4e:	87 95       	ror	r24
    1d50:	77 95       	ror	r23
    1d52:	67 95       	ror	r22
    1d54:	b7 95       	ror	r27
    1d56:	f1 11       	cpse	r31, r1
    1d58:	f8 cf       	rjmp	.-16     	; 0x1d4a <__floatsisf+0x1c>
    1d5a:	fa f4       	brpl	.+62     	; 0x1d9a <__floatsisf+0x6c>
    1d5c:	bb 0f       	add	r27, r27
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__floatsisf+0x36>
    1d60:	60 ff       	sbrs	r22, 0
    1d62:	1b c0       	rjmp	.+54     	; 0x1d9a <__floatsisf+0x6c>
    1d64:	6f 5f       	subi	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	16 c0       	rjmp	.+44     	; 0x1d9a <__floatsisf+0x6c>
    1d6e:	88 23       	and	r24, r24
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <__floatsisf+0x48>
    1d72:	96 e9       	ldi	r25, 0x96	; 150
    1d74:	11 c0       	rjmp	.+34     	; 0x1d98 <__floatsisf+0x6a>
    1d76:	77 23       	and	r23, r23
    1d78:	21 f0       	breq	.+8      	; 0x1d82 <__floatsisf+0x54>
    1d7a:	9e e8       	ldi	r25, 0x8E	; 142
    1d7c:	87 2f       	mov	r24, r23
    1d7e:	76 2f       	mov	r23, r22
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <__floatsisf+0x5e>
    1d82:	66 23       	and	r22, r22
    1d84:	71 f0       	breq	.+28     	; 0x1da2 <__floatsisf+0x74>
    1d86:	96 e8       	ldi	r25, 0x86	; 134
    1d88:	86 2f       	mov	r24, r22
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	2a f0       	brmi	.+10     	; 0x1d9a <__floatsisf+0x6c>
    1d90:	9a 95       	dec	r25
    1d92:	66 0f       	add	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	da f7       	brpl	.-10     	; 0x1d90 <__floatsisf+0x62>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	96 95       	lsr	r25
    1d9e:	87 95       	ror	r24
    1da0:	97 f9       	bld	r25, 7
    1da2:	08 95       	ret

00001da4 <__fp_cmp>:
    1da4:	99 0f       	add	r25, r25
    1da6:	00 08       	sbc	r0, r0
    1da8:	55 0f       	add	r21, r21
    1daa:	aa 0b       	sbc	r26, r26
    1dac:	e0 e8       	ldi	r30, 0x80	; 128
    1dae:	fe ef       	ldi	r31, 0xFE	; 254
    1db0:	16 16       	cp	r1, r22
    1db2:	17 06       	cpc	r1, r23
    1db4:	e8 07       	cpc	r30, r24
    1db6:	f9 07       	cpc	r31, r25
    1db8:	c0 f0       	brcs	.+48     	; 0x1dea <__fp_cmp+0x46>
    1dba:	12 16       	cp	r1, r18
    1dbc:	13 06       	cpc	r1, r19
    1dbe:	e4 07       	cpc	r30, r20
    1dc0:	f5 07       	cpc	r31, r21
    1dc2:	98 f0       	brcs	.+38     	; 0x1dea <__fp_cmp+0x46>
    1dc4:	62 1b       	sub	r22, r18
    1dc6:	73 0b       	sbc	r23, r19
    1dc8:	84 0b       	sbc	r24, r20
    1dca:	95 0b       	sbc	r25, r21
    1dcc:	39 f4       	brne	.+14     	; 0x1ddc <__fp_cmp+0x38>
    1dce:	0a 26       	eor	r0, r26
    1dd0:	61 f0       	breq	.+24     	; 0x1dea <__fp_cmp+0x46>
    1dd2:	23 2b       	or	r18, r19
    1dd4:	24 2b       	or	r18, r20
    1dd6:	25 2b       	or	r18, r21
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <__fp_cmp+0x3e>
    1dda:	08 95       	ret
    1ddc:	0a 26       	eor	r0, r26
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__fp_cmp+0x3e>
    1de0:	a1 40       	sbci	r26, 0x01	; 1
    1de2:	a6 95       	lsr	r26
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	81 1d       	adc	r24, r1
    1de8:	81 1d       	adc	r24, r1
    1dea:	08 95       	ret

00001dec <__fp_inf>:
    1dec:	97 f9       	bld	r25, 7
    1dee:	9f 67       	ori	r25, 0x7F	; 127
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	08 95       	ret

00001df8 <__fp_nan>:
    1df8:	9f ef       	ldi	r25, 0xFF	; 255
    1dfa:	80 ec       	ldi	r24, 0xC0	; 192
    1dfc:	08 95       	ret

00001dfe <__fp_powser>:
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	1f 93       	push	r17
    1e04:	0f 93       	push	r16
    1e06:	ff 92       	push	r15
    1e08:	ef 92       	push	r14
    1e0a:	df 92       	push	r13
    1e0c:	7b 01       	movw	r14, r22
    1e0e:	8c 01       	movw	r16, r24
    1e10:	68 94       	set
    1e12:	05 c0       	rjmp	.+10     	; 0x1e1e <__fp_powser+0x20>
    1e14:	da 2e       	mov	r13, r26
    1e16:	ef 01       	movw	r28, r30
    1e18:	af d0       	rcall	.+350    	; 0x1f78 <__mulsf3x>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e8 94       	clt
    1e1e:	a5 91       	lpm	r26, Z+
    1e20:	25 91       	lpm	r18, Z+
    1e22:	35 91       	lpm	r19, Z+
    1e24:	45 91       	lpm	r20, Z+
    1e26:	55 91       	lpm	r21, Z+
    1e28:	ae f3       	brts	.-22     	; 0x1e14 <__fp_powser+0x16>
    1e2a:	ef 01       	movw	r28, r30
    1e2c:	63 de       	rcall	.-826    	; 0x1af4 <__addsf3x>
    1e2e:	fe 01       	movw	r30, r28
    1e30:	97 01       	movw	r18, r14
    1e32:	a8 01       	movw	r20, r16
    1e34:	da 94       	dec	r13
    1e36:	79 f7       	brne	.-34     	; 0x1e16 <__fp_powser+0x18>
    1e38:	df 90       	pop	r13
    1e3a:	ef 90       	pop	r14
    1e3c:	ff 90       	pop	r15
    1e3e:	0f 91       	pop	r16
    1e40:	1f 91       	pop	r17
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <__fp_pscA>:
    1e48:	00 24       	eor	r0, r0
    1e4a:	0a 94       	dec	r0
    1e4c:	16 16       	cp	r1, r22
    1e4e:	17 06       	cpc	r1, r23
    1e50:	18 06       	cpc	r1, r24
    1e52:	09 06       	cpc	r0, r25
    1e54:	08 95       	ret

00001e56 <__fp_pscB>:
    1e56:	00 24       	eor	r0, r0
    1e58:	0a 94       	dec	r0
    1e5a:	12 16       	cp	r1, r18
    1e5c:	13 06       	cpc	r1, r19
    1e5e:	14 06       	cpc	r1, r20
    1e60:	05 06       	cpc	r0, r21
    1e62:	08 95       	ret
    1e64:	c9 cf       	rjmp	.-110    	; 0x1df8 <__fp_nan>

00001e66 <__fp_rempio2>:
    1e66:	50 d0       	rcall	.+160    	; 0x1f08 <__fp_splitA>
    1e68:	e8 f3       	brcs	.-6      	; 0x1e64 <__fp_pscB+0xe>
    1e6a:	e8 94       	clt
    1e6c:	e0 e0       	ldi	r30, 0x00	; 0
    1e6e:	bb 27       	eor	r27, r27
    1e70:	9f 57       	subi	r25, 0x7F	; 127
    1e72:	f0 f0       	brcs	.+60     	; 0x1eb0 <__fp_rempio2+0x4a>
    1e74:	2a ed       	ldi	r18, 0xDA	; 218
    1e76:	3f e0       	ldi	r19, 0x0F	; 15
    1e78:	49 ec       	ldi	r20, 0xC9	; 201
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <__fp_rempio2+0x22>
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	bb 0f       	add	r27, r27
    1e80:	66 1f       	adc	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	28 f0       	brcs	.+10     	; 0x1e92 <__fp_rempio2+0x2c>
    1e88:	b2 3a       	cpi	r27, 0xA2	; 162
    1e8a:	62 07       	cpc	r22, r18
    1e8c:	73 07       	cpc	r23, r19
    1e8e:	84 07       	cpc	r24, r20
    1e90:	28 f0       	brcs	.+10     	; 0x1e9c <__fp_rempio2+0x36>
    1e92:	b2 5a       	subi	r27, 0xA2	; 162
    1e94:	62 0b       	sbc	r22, r18
    1e96:	73 0b       	sbc	r23, r19
    1e98:	84 0b       	sbc	r24, r20
    1e9a:	e3 95       	inc	r30
    1e9c:	9a 95       	dec	r25
    1e9e:	72 f7       	brpl	.-36     	; 0x1e7c <__fp_rempio2+0x16>
    1ea0:	80 38       	cpi	r24, 0x80	; 128
    1ea2:	30 f4       	brcc	.+12     	; 0x1eb0 <__fp_rempio2+0x4a>
    1ea4:	9a 95       	dec	r25
    1ea6:	bb 0f       	add	r27, r27
    1ea8:	66 1f       	adc	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	d2 f7       	brpl	.-12     	; 0x1ea4 <__fp_rempio2+0x3e>
    1eb0:	90 48       	sbci	r25, 0x80	; 128
    1eb2:	a3 c1       	rjmp	.+838    	; 0x21fa <__fp_mpack_finite>

00001eb4 <__fp_round>:
    1eb4:	09 2e       	mov	r0, r25
    1eb6:	03 94       	inc	r0
    1eb8:	00 0c       	add	r0, r0
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <__fp_round+0xc>
    1ebc:	88 23       	and	r24, r24
    1ebe:	52 f0       	brmi	.+20     	; 0x1ed4 <__fp_round+0x20>
    1ec0:	bb 0f       	add	r27, r27
    1ec2:	40 f4       	brcc	.+16     	; 0x1ed4 <__fp_round+0x20>
    1ec4:	bf 2b       	or	r27, r31
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc <__fp_round+0x18>
    1ec8:	60 ff       	sbrs	r22, 0
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <__fp_round+0x20>
    1ecc:	6f 5f       	subi	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed4:	08 95       	ret

00001ed6 <__fp_sinus>:
    1ed6:	ef 93       	push	r30
    1ed8:	e0 ff       	sbrs	r30, 0
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <__fp_sinus+0x12>
    1edc:	a2 ea       	ldi	r26, 0xA2	; 162
    1ede:	2a ed       	ldi	r18, 0xDA	; 218
    1ee0:	3f e0       	ldi	r19, 0x0F	; 15
    1ee2:	49 ec       	ldi	r20, 0xC9	; 201
    1ee4:	5f eb       	ldi	r21, 0xBF	; 191
    1ee6:	06 de       	rcall	.-1012   	; 0x1af4 <__addsf3x>
    1ee8:	e5 df       	rcall	.-54     	; 0x1eb4 <__fp_round>
    1eea:	0f 90       	pop	r0
    1eec:	03 94       	inc	r0
    1eee:	01 fc       	sbrc	r0, 1
    1ef0:	90 58       	subi	r25, 0x80	; 128
    1ef2:	e9 eb       	ldi	r30, 0xB9	; 185
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	94 c1       	rjmp	.+808    	; 0x2220 <__fp_powsodd>

00001ef8 <__fp_split3>:
    1ef8:	57 fd       	sbrc	r21, 7
    1efa:	90 58       	subi	r25, 0x80	; 128
    1efc:	44 0f       	add	r20, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	59 f0       	breq	.+22     	; 0x1f18 <__fp_splitA+0x10>
    1f02:	5f 3f       	cpi	r21, 0xFF	; 255
    1f04:	71 f0       	breq	.+28     	; 0x1f22 <__fp_splitA+0x1a>
    1f06:	47 95       	ror	r20

00001f08 <__fp_splitA>:
    1f08:	88 0f       	add	r24, r24
    1f0a:	97 fb       	bst	r25, 7
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <__fp_splitA+0x20>
    1f10:	9f 3f       	cpi	r25, 0xFF	; 255
    1f12:	79 f0       	breq	.+30     	; 0x1f32 <__fp_splitA+0x2a>
    1f14:	87 95       	ror	r24
    1f16:	08 95       	ret
    1f18:	12 16       	cp	r1, r18
    1f1a:	13 06       	cpc	r1, r19
    1f1c:	14 06       	cpc	r1, r20
    1f1e:	55 1f       	adc	r21, r21
    1f20:	f2 cf       	rjmp	.-28     	; 0x1f06 <__fp_split3+0xe>
    1f22:	46 95       	lsr	r20
    1f24:	f1 df       	rcall	.-30     	; 0x1f08 <__fp_splitA>
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <__fp_splitA+0x30>
    1f28:	16 16       	cp	r1, r22
    1f2a:	17 06       	cpc	r1, r23
    1f2c:	18 06       	cpc	r1, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	f1 cf       	rjmp	.-30     	; 0x1f14 <__fp_splitA+0xc>
    1f32:	86 95       	lsr	r24
    1f34:	71 05       	cpc	r23, r1
    1f36:	61 05       	cpc	r22, r1
    1f38:	08 94       	sec
    1f3a:	08 95       	ret

00001f3c <__fp_zero>:
    1f3c:	e8 94       	clt

00001f3e <__fp_szero>:
    1f3e:	bb 27       	eor	r27, r27
    1f40:	66 27       	eor	r22, r22
    1f42:	77 27       	eor	r23, r23
    1f44:	cb 01       	movw	r24, r22
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret

00001f4a <__gesf2>:
    1f4a:	2c df       	rcall	.-424    	; 0x1da4 <__fp_cmp>
    1f4c:	08 f4       	brcc	.+2      	; 0x1f50 <__gesf2+0x6>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	08 95       	ret

00001f52 <inverse>:
    1f52:	9b 01       	movw	r18, r22
    1f54:	ac 01       	movw	r20, r24
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	80 e8       	ldi	r24, 0x80	; 128
    1f5c:	9f e3       	ldi	r25, 0x3F	; 63
    1f5e:	4c ce       	rjmp	.-872    	; 0x1bf8 <__divsf3>

00001f60 <__mulsf3>:
    1f60:	0b d0       	rcall	.+22     	; 0x1f78 <__mulsf3x>
    1f62:	a8 cf       	rjmp	.-176    	; 0x1eb4 <__fp_round>
    1f64:	71 df       	rcall	.-286    	; 0x1e48 <__fp_pscA>
    1f66:	28 f0       	brcs	.+10     	; 0x1f72 <__mulsf3+0x12>
    1f68:	76 df       	rcall	.-276    	; 0x1e56 <__fp_pscB>
    1f6a:	18 f0       	brcs	.+6      	; 0x1f72 <__mulsf3+0x12>
    1f6c:	95 23       	and	r25, r21
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <__mulsf3+0x12>
    1f70:	3d cf       	rjmp	.-390    	; 0x1dec <__fp_inf>
    1f72:	42 cf       	rjmp	.-380    	; 0x1df8 <__fp_nan>
    1f74:	11 24       	eor	r1, r1
    1f76:	e3 cf       	rjmp	.-58     	; 0x1f3e <__fp_szero>

00001f78 <__mulsf3x>:
    1f78:	bf df       	rcall	.-130    	; 0x1ef8 <__fp_split3>
    1f7a:	a0 f3       	brcs	.-24     	; 0x1f64 <__mulsf3+0x4>

00001f7c <__mulsf3_pse>:
    1f7c:	95 9f       	mul	r25, r21
    1f7e:	d1 f3       	breq	.-12     	; 0x1f74 <__mulsf3+0x14>
    1f80:	95 0f       	add	r25, r21
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	55 1f       	adc	r21, r21
    1f86:	62 9f       	mul	r22, r18
    1f88:	f0 01       	movw	r30, r0
    1f8a:	72 9f       	mul	r23, r18
    1f8c:	bb 27       	eor	r27, r27
    1f8e:	f0 0d       	add	r31, r0
    1f90:	b1 1d       	adc	r27, r1
    1f92:	63 9f       	mul	r22, r19
    1f94:	aa 27       	eor	r26, r26
    1f96:	f0 0d       	add	r31, r0
    1f98:	b1 1d       	adc	r27, r1
    1f9a:	aa 1f       	adc	r26, r26
    1f9c:	64 9f       	mul	r22, r20
    1f9e:	66 27       	eor	r22, r22
    1fa0:	b0 0d       	add	r27, r0
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	82 9f       	mul	r24, r18
    1fa8:	22 27       	eor	r18, r18
    1faa:	b0 0d       	add	r27, r0
    1fac:	a1 1d       	adc	r26, r1
    1fae:	62 1f       	adc	r22, r18
    1fb0:	73 9f       	mul	r23, r19
    1fb2:	b0 0d       	add	r27, r0
    1fb4:	a1 1d       	adc	r26, r1
    1fb6:	62 1f       	adc	r22, r18
    1fb8:	83 9f       	mul	r24, r19
    1fba:	a0 0d       	add	r26, r0
    1fbc:	61 1d       	adc	r22, r1
    1fbe:	22 1f       	adc	r18, r18
    1fc0:	74 9f       	mul	r23, r20
    1fc2:	33 27       	eor	r19, r19
    1fc4:	a0 0d       	add	r26, r0
    1fc6:	61 1d       	adc	r22, r1
    1fc8:	23 1f       	adc	r18, r19
    1fca:	84 9f       	mul	r24, r20
    1fcc:	60 0d       	add	r22, r0
    1fce:	21 1d       	adc	r18, r1
    1fd0:	82 2f       	mov	r24, r18
    1fd2:	76 2f       	mov	r23, r22
    1fd4:	6a 2f       	mov	r22, r26
    1fd6:	11 24       	eor	r1, r1
    1fd8:	9f 57       	subi	r25, 0x7F	; 127
    1fda:	50 40       	sbci	r21, 0x00	; 0
    1fdc:	8a f0       	brmi	.+34     	; 0x2000 <__mulsf3_pse+0x84>
    1fde:	e1 f0       	breq	.+56     	; 0x2018 <__mulsf3_pse+0x9c>
    1fe0:	88 23       	and	r24, r24
    1fe2:	4a f0       	brmi	.+18     	; 0x1ff6 <__mulsf3_pse+0x7a>
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	66 1f       	adc	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	91 50       	subi	r25, 0x01	; 1
    1ff2:	50 40       	sbci	r21, 0x00	; 0
    1ff4:	a9 f7       	brne	.-22     	; 0x1fe0 <__mulsf3_pse+0x64>
    1ff6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ff8:	51 05       	cpc	r21, r1
    1ffa:	70 f0       	brcs	.+28     	; 0x2018 <__mulsf3_pse+0x9c>
    1ffc:	f7 ce       	rjmp	.-530    	; 0x1dec <__fp_inf>
    1ffe:	9f cf       	rjmp	.-194    	; 0x1f3e <__fp_szero>
    2000:	5f 3f       	cpi	r21, 0xFF	; 255
    2002:	ec f3       	brlt	.-6      	; 0x1ffe <__mulsf3_pse+0x82>
    2004:	98 3e       	cpi	r25, 0xE8	; 232
    2006:	dc f3       	brlt	.-10     	; 0x1ffe <__mulsf3_pse+0x82>
    2008:	86 95       	lsr	r24
    200a:	77 95       	ror	r23
    200c:	67 95       	ror	r22
    200e:	b7 95       	ror	r27
    2010:	f7 95       	ror	r31
    2012:	e7 95       	ror	r30
    2014:	9f 5f       	subi	r25, 0xFF	; 255
    2016:	c1 f7       	brne	.-16     	; 0x2008 <__mulsf3_pse+0x8c>
    2018:	fe 2b       	or	r31, r30
    201a:	88 0f       	add	r24, r24
    201c:	91 1d       	adc	r25, r1
    201e:	96 95       	lsr	r25
    2020:	87 95       	ror	r24
    2022:	97 f9       	bld	r25, 7
    2024:	08 95       	ret

00002026 <pow>:
    2026:	fa 01       	movw	r30, r20
    2028:	ee 0f       	add	r30, r30
    202a:	ff 1f       	adc	r31, r31
    202c:	30 96       	adiw	r30, 0x00	; 0
    202e:	21 05       	cpc	r18, r1
    2030:	31 05       	cpc	r19, r1
    2032:	99 f1       	breq	.+102    	; 0x209a <pow+0x74>
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	61 f4       	brne	.+24     	; 0x2052 <pow+0x2c>
    203a:	80 38       	cpi	r24, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	9b 07       	cpc	r25, r27
    2040:	49 f1       	breq	.+82     	; 0x2094 <pow+0x6e>
    2042:	68 94       	set
    2044:	90 38       	cpi	r25, 0x80	; 128
    2046:	81 05       	cpc	r24, r1
    2048:	61 f0       	breq	.+24     	; 0x2062 <pow+0x3c>
    204a:	80 38       	cpi	r24, 0x80	; 128
    204c:	bf ef       	ldi	r27, 0xFF	; 255
    204e:	9b 07       	cpc	r25, r27
    2050:	41 f0       	breq	.+16     	; 0x2062 <pow+0x3c>
    2052:	99 23       	and	r25, r25
    2054:	42 f5       	brpl	.+80     	; 0x20a6 <pow+0x80>
    2056:	ff 3f       	cpi	r31, 0xFF	; 255
    2058:	e1 05       	cpc	r30, r1
    205a:	31 05       	cpc	r19, r1
    205c:	21 05       	cpc	r18, r1
    205e:	11 f1       	breq	.+68     	; 0x20a4 <pow+0x7e>
    2060:	e8 94       	clt
    2062:	08 94       	sec
    2064:	e7 95       	ror	r30
    2066:	d9 01       	movw	r26, r18
    2068:	aa 23       	and	r26, r26
    206a:	29 f4       	brne	.+10     	; 0x2076 <pow+0x50>
    206c:	ab 2f       	mov	r26, r27
    206e:	be 2f       	mov	r27, r30
    2070:	f8 5f       	subi	r31, 0xF8	; 248
    2072:	d0 f3       	brcs	.-12     	; 0x2068 <pow+0x42>
    2074:	10 c0       	rjmp	.+32     	; 0x2096 <pow+0x70>
    2076:	ff 5f       	subi	r31, 0xFF	; 255
    2078:	70 f4       	brcc	.+28     	; 0x2096 <pow+0x70>
    207a:	a6 95       	lsr	r26
    207c:	e0 f7       	brcc	.-8      	; 0x2076 <pow+0x50>
    207e:	f7 39       	cpi	r31, 0x97	; 151
    2080:	50 f0       	brcs	.+20     	; 0x2096 <pow+0x70>
    2082:	19 f0       	breq	.+6      	; 0x208a <pow+0x64>
    2084:	ff 3a       	cpi	r31, 0xAF	; 175
    2086:	38 f4       	brcc	.+14     	; 0x2096 <pow+0x70>
    2088:	9f 77       	andi	r25, 0x7F	; 127
    208a:	9f 93       	push	r25
    208c:	0c d0       	rcall	.+24     	; 0x20a6 <pow+0x80>
    208e:	0f 90       	pop	r0
    2090:	07 fc       	sbrc	r0, 7
    2092:	90 58       	subi	r25, 0x80	; 128
    2094:	08 95       	ret
    2096:	3e f0       	brts	.+14     	; 0x20a6 <pow+0x80>
    2098:	af ce       	rjmp	.-674    	; 0x1df8 <__fp_nan>
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	80 e8       	ldi	r24, 0x80	; 128
    20a0:	9f e3       	ldi	r25, 0x3F	; 63
    20a2:	08 95       	ret
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	9f 77       	andi	r25, 0x7F	; 127
    20a8:	5f 93       	push	r21
    20aa:	4f 93       	push	r20
    20ac:	3f 93       	push	r19
    20ae:	2f 93       	push	r18
    20b0:	03 d1       	rcall	.+518    	; 0x22b8 <log>
    20b2:	2f 91       	pop	r18
    20b4:	3f 91       	pop	r19
    20b6:	4f 91       	pop	r20
    20b8:	5f 91       	pop	r21
    20ba:	52 df       	rcall	.-348    	; 0x1f60 <__mulsf3>
    20bc:	70 c0       	rjmp	.+224    	; 0x219e <exp>

000020be <sin>:
    20be:	9f 93       	push	r25
    20c0:	d2 de       	rcall	.-604    	; 0x1e66 <__fp_rempio2>
    20c2:	0f 90       	pop	r0
    20c4:	07 fc       	sbrc	r0, 7
    20c6:	ee 5f       	subi	r30, 0xFE	; 254
    20c8:	06 cf       	rjmp	.-500    	; 0x1ed6 <__fp_sinus>
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <sin+0x12>
    20cc:	0e f4       	brtc	.+2      	; 0x20d0 <sin+0x12>
    20ce:	94 ce       	rjmp	.-728    	; 0x1df8 <__fp_nan>
    20d0:	92 c0       	rjmp	.+292    	; 0x21f6 <__fp_mpack>

000020d2 <sqrt>:
    20d2:	1a df       	rcall	.-460    	; 0x1f08 <__fp_splitA>
    20d4:	d0 f3       	brcs	.-12     	; 0x20ca <sin+0xc>
    20d6:	99 23       	and	r25, r25
    20d8:	d9 f3       	breq	.-10     	; 0x20d0 <sin+0x12>
    20da:	ce f3       	brts	.-14     	; 0x20ce <sin+0x10>
    20dc:	9f 57       	subi	r25, 0x7F	; 127
    20de:	55 0b       	sbc	r21, r21
    20e0:	87 ff       	sbrs	r24, 7
    20e2:	97 d0       	rcall	.+302    	; 0x2212 <__fp_norm2>
    20e4:	00 24       	eor	r0, r0
    20e6:	a0 e6       	ldi	r26, 0x60	; 96
    20e8:	40 ea       	ldi	r20, 0xA0	; 160
    20ea:	90 01       	movw	r18, r0
    20ec:	80 58       	subi	r24, 0x80	; 128
    20ee:	56 95       	lsr	r21
    20f0:	97 95       	ror	r25
    20f2:	28 f4       	brcc	.+10     	; 0x20fe <sqrt+0x2c>
    20f4:	80 5c       	subi	r24, 0xC0	; 192
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	88 1f       	adc	r24, r24
    20fc:	20 f0       	brcs	.+8      	; 0x2106 <sqrt+0x34>
    20fe:	26 17       	cp	r18, r22
    2100:	37 07       	cpc	r19, r23
    2102:	48 07       	cpc	r20, r24
    2104:	30 f4       	brcc	.+12     	; 0x2112 <sqrt+0x40>
    2106:	62 1b       	sub	r22, r18
    2108:	73 0b       	sbc	r23, r19
    210a:	84 0b       	sbc	r24, r20
    210c:	20 29       	or	r18, r0
    210e:	31 29       	or	r19, r1
    2110:	4a 2b       	or	r20, r26
    2112:	a6 95       	lsr	r26
    2114:	17 94       	ror	r1
    2116:	07 94       	ror	r0
    2118:	20 25       	eor	r18, r0
    211a:	31 25       	eor	r19, r1
    211c:	4a 27       	eor	r20, r26
    211e:	58 f7       	brcc	.-42     	; 0x20f6 <sqrt+0x24>
    2120:	66 0f       	add	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	20 f0       	brcs	.+8      	; 0x2130 <sqrt+0x5e>
    2128:	26 17       	cp	r18, r22
    212a:	37 07       	cpc	r19, r23
    212c:	48 07       	cpc	r20, r24
    212e:	30 f4       	brcc	.+12     	; 0x213c <sqrt+0x6a>
    2130:	62 0b       	sbc	r22, r18
    2132:	73 0b       	sbc	r23, r19
    2134:	84 0b       	sbc	r24, r20
    2136:	20 0d       	add	r18, r0
    2138:	31 1d       	adc	r19, r1
    213a:	41 1d       	adc	r20, r1
    213c:	a0 95       	com	r26
    213e:	81 f7       	brne	.-32     	; 0x2120 <sqrt+0x4e>
    2140:	b9 01       	movw	r22, r18
    2142:	84 2f       	mov	r24, r20
    2144:	91 58       	subi	r25, 0x81	; 129
    2146:	88 0f       	add	r24, r24
    2148:	96 95       	lsr	r25
    214a:	87 95       	ror	r24
    214c:	08 95       	ret

0000214e <square>:
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	06 cf       	rjmp	.-500    	; 0x1f60 <__mulsf3>

00002154 <tan>:
    2154:	df 93       	push	r29
    2156:	d9 2f       	mov	r29, r25
    2158:	86 de       	rcall	.-756    	; 0x1e66 <__fp_rempio2>
    215a:	e6 95       	lsr	r30
    215c:	d7 95       	ror	r29
    215e:	2a ed       	ldi	r18, 0xDA	; 218
    2160:	3f e0       	ldi	r19, 0x0F	; 15
    2162:	49 e4       	ldi	r20, 0x49	; 73
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	b3 3a       	cpi	r27, 0xA3	; 163
    2168:	62 07       	cpc	r22, r18
    216a:	73 07       	cpc	r23, r19
    216c:	84 07       	cpc	r24, r20
    216e:	95 07       	cpc	r25, r21
    2170:	d7 95       	ror	r29
    2172:	2a f0       	brmi	.+10     	; 0x217e <tan+0x2a>
    2174:	a2 ea       	ldi	r26, 0xA2	; 162
    2176:	49 ec       	ldi	r20, 0xC9	; 201
    2178:	90 68       	ori	r25, 0x80	; 128
    217a:	bc dc       	rcall	.-1672   	; 0x1af4 <__addsf3x>
    217c:	9b de       	rcall	.-714    	; 0x1eb4 <__fp_round>
    217e:	e7 ed       	ldi	r30, 0xD7	; 215
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	4e d0       	rcall	.+156    	; 0x2220 <__fp_powsodd>
    2184:	dd 0f       	add	r29, r29
    2186:	0b f0       	brvs	.+2      	; 0x218a <tan+0x36>
    2188:	e4 de       	rcall	.-568    	; 0x1f52 <inverse>
    218a:	dd 0f       	add	r29, r29
    218c:	0b f4       	brvc	.+2      	; 0x2190 <tan+0x3c>
    218e:	90 58       	subi	r25, 0x80	; 128
    2190:	df 91       	pop	r29
    2192:	08 95       	ret
    2194:	19 f4       	brne	.+6      	; 0x219c <tan+0x48>
    2196:	0e f0       	brts	.+2      	; 0x219a <tan+0x46>
    2198:	29 ce       	rjmp	.-942    	; 0x1dec <__fp_inf>
    219a:	d0 ce       	rjmp	.-608    	; 0x1f3c <__fp_zero>
    219c:	2d ce       	rjmp	.-934    	; 0x1df8 <__fp_nan>

0000219e <exp>:
    219e:	b4 de       	rcall	.-664    	; 0x1f08 <__fp_splitA>
    21a0:	c8 f3       	brcs	.-14     	; 0x2194 <tan+0x40>
    21a2:	96 38       	cpi	r25, 0x86	; 134
    21a4:	c0 f7       	brcc	.-16     	; 0x2196 <tan+0x42>
    21a6:	07 f8       	bld	r0, 7
    21a8:	0f 92       	push	r0
    21aa:	e8 94       	clt
    21ac:	2b e3       	ldi	r18, 0x3B	; 59
    21ae:	3a ea       	ldi	r19, 0xAA	; 170
    21b0:	48 eb       	ldi	r20, 0xB8	; 184
    21b2:	5f e7       	ldi	r21, 0x7F	; 127
    21b4:	e3 de       	rcall	.-570    	; 0x1f7c <__mulsf3_pse>
    21b6:	0f 92       	push	r0
    21b8:	0f 92       	push	r0
    21ba:	0f 92       	push	r0
    21bc:	4d b7       	in	r20, 0x3d	; 61
    21be:	5e b7       	in	r21, 0x3e	; 62
    21c0:	0f 92       	push	r0
    21c2:	ba d0       	rcall	.+372    	; 0x2338 <modf>
    21c4:	ea ef       	ldi	r30, 0xFA	; 250
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	1a de       	rcall	.-972    	; 0x1dfe <__fp_powser>
    21ca:	4f 91       	pop	r20
    21cc:	5f 91       	pop	r21
    21ce:	ef 91       	pop	r30
    21d0:	ff 91       	pop	r31
    21d2:	e5 95       	asr	r30
    21d4:	ee 1f       	adc	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	49 f0       	breq	.+18     	; 0x21ec <exp+0x4e>
    21da:	fe 57       	subi	r31, 0x7E	; 126
    21dc:	e0 68       	ori	r30, 0x80	; 128
    21de:	44 27       	eor	r20, r20
    21e0:	ee 0f       	add	r30, r30
    21e2:	44 1f       	adc	r20, r20
    21e4:	fa 95       	dec	r31
    21e6:	e1 f7       	brne	.-8      	; 0x21e0 <exp+0x42>
    21e8:	41 95       	neg	r20
    21ea:	55 0b       	sbc	r21, r21
    21ec:	2c d0       	rcall	.+88     	; 0x2246 <ldexp>
    21ee:	0f 90       	pop	r0
    21f0:	07 fe       	sbrs	r0, 7
    21f2:	af ce       	rjmp	.-674    	; 0x1f52 <inverse>
    21f4:	08 95       	ret

000021f6 <__fp_mpack>:
    21f6:	9f 3f       	cpi	r25, 0xFF	; 255
    21f8:	31 f0       	breq	.+12     	; 0x2206 <__fp_mpack_finite+0xc>

000021fa <__fp_mpack_finite>:
    21fa:	91 50       	subi	r25, 0x01	; 1
    21fc:	20 f4       	brcc	.+8      	; 0x2206 <__fp_mpack_finite+0xc>
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	b7 95       	ror	r27
    2206:	88 0f       	add	r24, r24
    2208:	91 1d       	adc	r25, r1
    220a:	96 95       	lsr	r25
    220c:	87 95       	ror	r24
    220e:	97 f9       	bld	r25, 7
    2210:	08 95       	ret

00002212 <__fp_norm2>:
    2212:	91 50       	subi	r25, 0x01	; 1
    2214:	50 40       	sbci	r21, 0x00	; 0
    2216:	66 0f       	add	r22, r22
    2218:	77 1f       	adc	r23, r23
    221a:	88 1f       	adc	r24, r24
    221c:	d2 f7       	brpl	.-12     	; 0x2212 <__fp_norm2>
    221e:	08 95       	ret

00002220 <__fp_powsodd>:
    2220:	9f 93       	push	r25
    2222:	8f 93       	push	r24
    2224:	7f 93       	push	r23
    2226:	6f 93       	push	r22
    2228:	ff 93       	push	r31
    222a:	ef 93       	push	r30
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	97 de       	rcall	.-722    	; 0x1f60 <__mulsf3>
    2232:	ef 91       	pop	r30
    2234:	ff 91       	pop	r31
    2236:	e3 dd       	rcall	.-1082   	; 0x1dfe <__fp_powser>
    2238:	2f 91       	pop	r18
    223a:	3f 91       	pop	r19
    223c:	4f 91       	pop	r20
    223e:	5f 91       	pop	r21
    2240:	8f ce       	rjmp	.-738    	; 0x1f60 <__mulsf3>
    2242:	d4 cd       	rjmp	.-1112   	; 0x1dec <__fp_inf>
    2244:	d8 cf       	rjmp	.-80     	; 0x21f6 <__fp_mpack>

00002246 <ldexp>:
    2246:	60 de       	rcall	.-832    	; 0x1f08 <__fp_splitA>
    2248:	e8 f3       	brcs	.-6      	; 0x2244 <__fp_powsodd+0x24>
    224a:	99 23       	and	r25, r25
    224c:	d9 f3       	breq	.-10     	; 0x2244 <__fp_powsodd+0x24>
    224e:	94 0f       	add	r25, r20
    2250:	51 1d       	adc	r21, r1
    2252:	bb f3       	brvs	.-18     	; 0x2242 <__fp_powsodd+0x22>
    2254:	91 50       	subi	r25, 0x01	; 1
    2256:	50 40       	sbci	r21, 0x00	; 0
    2258:	94 f0       	brlt	.+36     	; 0x227e <ldexp+0x38>
    225a:	59 f0       	breq	.+22     	; 0x2272 <ldexp+0x2c>
    225c:	88 23       	and	r24, r24
    225e:	32 f0       	brmi	.+12     	; 0x226c <ldexp+0x26>
    2260:	66 0f       	add	r22, r22
    2262:	77 1f       	adc	r23, r23
    2264:	88 1f       	adc	r24, r24
    2266:	91 50       	subi	r25, 0x01	; 1
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	c1 f7       	brne	.-16     	; 0x225c <ldexp+0x16>
    226c:	9e 3f       	cpi	r25, 0xFE	; 254
    226e:	51 05       	cpc	r21, r1
    2270:	44 f7       	brge	.-48     	; 0x2242 <__fp_powsodd+0x22>
    2272:	88 0f       	add	r24, r24
    2274:	91 1d       	adc	r25, r1
    2276:	96 95       	lsr	r25
    2278:	87 95       	ror	r24
    227a:	97 f9       	bld	r25, 7
    227c:	08 95       	ret
    227e:	5f 3f       	cpi	r21, 0xFF	; 255
    2280:	ac f0       	brlt	.+42     	; 0x22ac <ldexp+0x66>
    2282:	98 3e       	cpi	r25, 0xE8	; 232
    2284:	9c f0       	brlt	.+38     	; 0x22ac <ldexp+0x66>
    2286:	bb 27       	eor	r27, r27
    2288:	86 95       	lsr	r24
    228a:	77 95       	ror	r23
    228c:	67 95       	ror	r22
    228e:	b7 95       	ror	r27
    2290:	08 f4       	brcc	.+2      	; 0x2294 <ldexp+0x4e>
    2292:	b1 60       	ori	r27, 0x01	; 1
    2294:	93 95       	inc	r25
    2296:	c1 f7       	brne	.-16     	; 0x2288 <ldexp+0x42>
    2298:	bb 0f       	add	r27, r27
    229a:	58 f7       	brcc	.-42     	; 0x2272 <ldexp+0x2c>
    229c:	11 f4       	brne	.+4      	; 0x22a2 <ldexp+0x5c>
    229e:	60 ff       	sbrs	r22, 0
    22a0:	e8 cf       	rjmp	.-48     	; 0x2272 <ldexp+0x2c>
    22a2:	6f 5f       	subi	r22, 0xFF	; 255
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	8f 4f       	sbci	r24, 0xFF	; 255
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	e3 cf       	rjmp	.-58     	; 0x2272 <ldexp+0x2c>
    22ac:	48 ce       	rjmp	.-880    	; 0x1f3e <__fp_szero>
    22ae:	0e f0       	brts	.+2      	; 0x22b2 <ldexp+0x6c>
    22b0:	a2 cf       	rjmp	.-188    	; 0x21f6 <__fp_mpack>
    22b2:	a2 cd       	rjmp	.-1212   	; 0x1df8 <__fp_nan>
    22b4:	68 94       	set
    22b6:	9a cd       	rjmp	.-1228   	; 0x1dec <__fp_inf>

000022b8 <log>:
    22b8:	27 de       	rcall	.-946    	; 0x1f08 <__fp_splitA>
    22ba:	c8 f3       	brcs	.-14     	; 0x22ae <ldexp+0x68>
    22bc:	99 23       	and	r25, r25
    22be:	d1 f3       	breq	.-12     	; 0x22b4 <ldexp+0x6e>
    22c0:	c6 f3       	brts	.-16     	; 0x22b2 <ldexp+0x6c>
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	1f 93       	push	r17
    22c8:	0f 93       	push	r16
    22ca:	ff 92       	push	r15
    22cc:	c9 2f       	mov	r28, r25
    22ce:	dd 27       	eor	r29, r29
    22d0:	88 23       	and	r24, r24
    22d2:	2a f0       	brmi	.+10     	; 0x22de <log+0x26>
    22d4:	21 97       	sbiw	r28, 0x01	; 1
    22d6:	66 0f       	add	r22, r22
    22d8:	77 1f       	adc	r23, r23
    22da:	88 1f       	adc	r24, r24
    22dc:	da f7       	brpl	.-10     	; 0x22d4 <log+0x1c>
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f eb       	ldi	r21, 0xBF	; 191
    22e6:	9f e3       	ldi	r25, 0x3F	; 63
    22e8:	88 39       	cpi	r24, 0x98	; 152
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <log+0x3c>
    22ec:	80 3e       	cpi	r24, 0xE0	; 224
    22ee:	30 f0       	brcs	.+12     	; 0x22fc <log+0x44>
    22f0:	21 96       	adiw	r28, 0x01	; 1
    22f2:	8f 77       	andi	r24, 0x7F	; 127
    22f4:	ee db       	rcall	.-2084   	; 0x1ad2 <__addsf3>
    22f6:	e2 e2       	ldi	r30, 0x22	; 34
    22f8:	f1 e0       	ldi	r31, 0x01	; 1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <log+0x4a>
    22fc:	ea db       	rcall	.-2092   	; 0x1ad2 <__addsf3>
    22fe:	ef e4       	ldi	r30, 0x4F	; 79
    2300:	f1 e0       	ldi	r31, 0x01	; 1
    2302:	7d dd       	rcall	.-1286   	; 0x1dfe <__fp_powser>
    2304:	8b 01       	movw	r16, r22
    2306:	be 01       	movw	r22, r28
    2308:	ec 01       	movw	r28, r24
    230a:	fb 2e       	mov	r15, r27
    230c:	6f 57       	subi	r22, 0x7F	; 127
    230e:	71 09       	sbc	r23, r1
    2310:	75 95       	asr	r23
    2312:	77 1f       	adc	r23, r23
    2314:	88 0b       	sbc	r24, r24
    2316:	99 0b       	sbc	r25, r25
    2318:	0a dd       	rcall	.-1516   	; 0x1d2e <__floatsisf>
    231a:	28 e1       	ldi	r18, 0x18	; 24
    231c:	32 e7       	ldi	r19, 0x72	; 114
    231e:	41 e3       	ldi	r20, 0x31	; 49
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	2a de       	rcall	.-940    	; 0x1f78 <__mulsf3x>
    2324:	af 2d       	mov	r26, r15
    2326:	98 01       	movw	r18, r16
    2328:	ae 01       	movw	r20, r28
    232a:	ff 90       	pop	r15
    232c:	0f 91       	pop	r16
    232e:	1f 91       	pop	r17
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	df db       	rcall	.-2114   	; 0x1af4 <__addsf3x>
    2336:	be cd       	rjmp	.-1156   	; 0x1eb4 <__fp_round>

00002338 <modf>:
    2338:	fa 01       	movw	r30, r20
    233a:	dc 01       	movw	r26, r24
    233c:	aa 0f       	add	r26, r26
    233e:	bb 1f       	adc	r27, r27
    2340:	9b 01       	movw	r18, r22
    2342:	ac 01       	movw	r20, r24
    2344:	bf 57       	subi	r27, 0x7F	; 127
    2346:	28 f4       	brcc	.+10     	; 0x2352 <modf+0x1a>
    2348:	22 27       	eor	r18, r18
    234a:	33 27       	eor	r19, r19
    234c:	44 27       	eor	r20, r20
    234e:	50 78       	andi	r21, 0x80	; 128
    2350:	1f c0       	rjmp	.+62     	; 0x2390 <modf+0x58>
    2352:	b7 51       	subi	r27, 0x17	; 23
    2354:	88 f4       	brcc	.+34     	; 0x2378 <modf+0x40>
    2356:	ab 2f       	mov	r26, r27
    2358:	00 24       	eor	r0, r0
    235a:	46 95       	lsr	r20
    235c:	37 95       	ror	r19
    235e:	27 95       	ror	r18
    2360:	01 1c       	adc	r0, r1
    2362:	a3 95       	inc	r26
    2364:	d2 f3       	brmi	.-12     	; 0x235a <modf+0x22>
    2366:	00 20       	and	r0, r0
    2368:	69 f0       	breq	.+26     	; 0x2384 <modf+0x4c>
    236a:	22 0f       	add	r18, r18
    236c:	33 1f       	adc	r19, r19
    236e:	44 1f       	adc	r20, r20
    2370:	b3 95       	inc	r27
    2372:	da f3       	brmi	.-10     	; 0x236a <modf+0x32>
    2374:	0d d0       	rcall	.+26     	; 0x2390 <modf+0x58>
    2376:	ac cb       	rjmp	.-2216   	; 0x1ad0 <__subsf3>
    2378:	61 30       	cpi	r22, 0x01	; 1
    237a:	71 05       	cpc	r23, r1
    237c:	a0 e8       	ldi	r26, 0x80	; 128
    237e:	8a 07       	cpc	r24, r26
    2380:	b9 46       	sbci	r27, 0x69	; 105
    2382:	30 f4       	brcc	.+12     	; 0x2390 <modf+0x58>
    2384:	9b 01       	movw	r18, r22
    2386:	ac 01       	movw	r20, r24
    2388:	66 27       	eor	r22, r22
    238a:	77 27       	eor	r23, r23
    238c:	88 27       	eor	r24, r24
    238e:	90 78       	andi	r25, 0x80	; 128
    2390:	30 96       	adiw	r30, 0x00	; 0
    2392:	21 f0       	breq	.+8      	; 0x239c <modf+0x64>
    2394:	20 83       	st	Z, r18
    2396:	31 83       	std	Z+1, r19	; 0x01
    2398:	42 83       	std	Z+2, r20	; 0x02
    239a:	53 83       	std	Z+3, r21	; 0x03
    239c:	08 95       	ret

0000239e <vfprintf>:
    239e:	2f 92       	push	r2
    23a0:	3f 92       	push	r3
    23a2:	4f 92       	push	r4
    23a4:	5f 92       	push	r5
    23a6:	6f 92       	push	r6
    23a8:	7f 92       	push	r7
    23aa:	8f 92       	push	r8
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	63 97       	sbiw	r28, 0x13	; 19
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	6c 01       	movw	r12, r24
    23d4:	4b 01       	movw	r8, r22
    23d6:	2a 01       	movw	r4, r20
    23d8:	fc 01       	movw	r30, r24
    23da:	17 82       	std	Z+7, r1	; 0x07
    23dc:	16 82       	std	Z+6, r1	; 0x06
    23de:	83 81       	ldd	r24, Z+3	; 0x03
    23e0:	81 ff       	sbrs	r24, 1
    23e2:	29 c3       	rjmp	.+1618   	; 0x2a36 <vfprintf+0x698>
    23e4:	ae 01       	movw	r20, r28
    23e6:	4f 5f       	subi	r20, 0xFF	; 255
    23e8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ea:	3a 01       	movw	r6, r20
    23ec:	f6 01       	movw	r30, r12
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	f4 01       	movw	r30, r8
    23f2:	93 fd       	sbrc	r25, 3
    23f4:	85 91       	lpm	r24, Z+
    23f6:	93 ff       	sbrs	r25, 3
    23f8:	81 91       	ld	r24, Z+
    23fa:	4f 01       	movw	r8, r30
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <vfprintf+0x64>
    2400:	16 c3       	rjmp	.+1580   	; 0x2a2e <vfprintf+0x690>
    2402:	85 32       	cpi	r24, 0x25	; 37
    2404:	39 f4       	brne	.+14     	; 0x2414 <vfprintf+0x76>
    2406:	93 fd       	sbrc	r25, 3
    2408:	85 91       	lpm	r24, Z+
    240a:	93 ff       	sbrs	r25, 3
    240c:	81 91       	ld	r24, Z+
    240e:	4f 01       	movw	r8, r30
    2410:	85 32       	cpi	r24, 0x25	; 37
    2412:	31 f4       	brne	.+12     	; 0x2420 <vfprintf+0x82>
    2414:	b6 01       	movw	r22, r12
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	ad d5       	rcall	.+2906   	; 0x2f74 <fputc>
    241a:	52 01       	movw	r10, r4
    241c:	25 01       	movw	r4, r10
    241e:	e6 cf       	rjmp	.-52     	; 0x23ec <vfprintf+0x4e>
    2420:	10 e0       	ldi	r17, 0x00	; 0
    2422:	f1 2c       	mov	r15, r1
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	20 32       	cpi	r18, 0x20	; 32
    2428:	a0 f4       	brcc	.+40     	; 0x2452 <vfprintf+0xb4>
    242a:	8b 32       	cpi	r24, 0x2B	; 43
    242c:	69 f0       	breq	.+26     	; 0x2448 <vfprintf+0xaa>
    242e:	30 f4       	brcc	.+12     	; 0x243c <vfprintf+0x9e>
    2430:	80 32       	cpi	r24, 0x20	; 32
    2432:	59 f0       	breq	.+22     	; 0x244a <vfprintf+0xac>
    2434:	83 32       	cpi	r24, 0x23	; 35
    2436:	69 f4       	brne	.+26     	; 0x2452 <vfprintf+0xb4>
    2438:	20 61       	ori	r18, 0x10	; 16
    243a:	2c c0       	rjmp	.+88     	; 0x2494 <vfprintf+0xf6>
    243c:	8d 32       	cpi	r24, 0x2D	; 45
    243e:	39 f0       	breq	.+14     	; 0x244e <vfprintf+0xb0>
    2440:	80 33       	cpi	r24, 0x30	; 48
    2442:	39 f4       	brne	.+14     	; 0x2452 <vfprintf+0xb4>
    2444:	21 60       	ori	r18, 0x01	; 1
    2446:	26 c0       	rjmp	.+76     	; 0x2494 <vfprintf+0xf6>
    2448:	22 60       	ori	r18, 0x02	; 2
    244a:	24 60       	ori	r18, 0x04	; 4
    244c:	23 c0       	rjmp	.+70     	; 0x2494 <vfprintf+0xf6>
    244e:	28 60       	ori	r18, 0x08	; 8
    2450:	21 c0       	rjmp	.+66     	; 0x2494 <vfprintf+0xf6>
    2452:	27 fd       	sbrc	r18, 7
    2454:	27 c0       	rjmp	.+78     	; 0x24a4 <vfprintf+0x106>
    2456:	30 ed       	ldi	r19, 0xD0	; 208
    2458:	38 0f       	add	r19, r24
    245a:	3a 30       	cpi	r19, 0x0A	; 10
    245c:	78 f4       	brcc	.+30     	; 0x247c <vfprintf+0xde>
    245e:	26 ff       	sbrs	r18, 6
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfprintf+0xd0>
    2462:	fa e0       	ldi	r31, 0x0A	; 10
    2464:	1f 9f       	mul	r17, r31
    2466:	30 0d       	add	r19, r0
    2468:	11 24       	eor	r1, r1
    246a:	13 2f       	mov	r17, r19
    246c:	13 c0       	rjmp	.+38     	; 0x2494 <vfprintf+0xf6>
    246e:	4a e0       	ldi	r20, 0x0A	; 10
    2470:	f4 9e       	mul	r15, r20
    2472:	30 0d       	add	r19, r0
    2474:	11 24       	eor	r1, r1
    2476:	f3 2e       	mov	r15, r19
    2478:	20 62       	ori	r18, 0x20	; 32
    247a:	0c c0       	rjmp	.+24     	; 0x2494 <vfprintf+0xf6>
    247c:	8e 32       	cpi	r24, 0x2E	; 46
    247e:	21 f4       	brne	.+8      	; 0x2488 <vfprintf+0xea>
    2480:	26 fd       	sbrc	r18, 6
    2482:	d5 c2       	rjmp	.+1450   	; 0x2a2e <vfprintf+0x690>
    2484:	20 64       	ori	r18, 0x40	; 64
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <vfprintf+0xf6>
    2488:	8c 36       	cpi	r24, 0x6C	; 108
    248a:	11 f4       	brne	.+4      	; 0x2490 <vfprintf+0xf2>
    248c:	20 68       	ori	r18, 0x80	; 128
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0xf6>
    2490:	88 36       	cpi	r24, 0x68	; 104
    2492:	41 f4       	brne	.+16     	; 0x24a4 <vfprintf+0x106>
    2494:	f4 01       	movw	r30, r8
    2496:	93 fd       	sbrc	r25, 3
    2498:	85 91       	lpm	r24, Z+
    249a:	93 ff       	sbrs	r25, 3
    249c:	81 91       	ld	r24, Z+
    249e:	4f 01       	movw	r8, r30
    24a0:	81 11       	cpse	r24, r1
    24a2:	c1 cf       	rjmp	.-126    	; 0x2426 <vfprintf+0x88>
    24a4:	9b eb       	ldi	r25, 0xBB	; 187
    24a6:	98 0f       	add	r25, r24
    24a8:	93 30       	cpi	r25, 0x03	; 3
    24aa:	18 f4       	brcc	.+6      	; 0x24b2 <vfprintf+0x114>
    24ac:	20 61       	ori	r18, 0x10	; 16
    24ae:	80 5e       	subi	r24, 0xE0	; 224
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <vfprintf+0x120>
    24b2:	9b e9       	ldi	r25, 0x9B	; 155
    24b4:	98 0f       	add	r25, r24
    24b6:	93 30       	cpi	r25, 0x03	; 3
    24b8:	08 f0       	brcs	.+2      	; 0x24bc <vfprintf+0x11e>
    24ba:	64 c1       	rjmp	.+712    	; 0x2784 <vfprintf+0x3e6>
    24bc:	2f 7e       	andi	r18, 0xEF	; 239
    24be:	26 ff       	sbrs	r18, 6
    24c0:	16 e0       	ldi	r17, 0x06	; 6
    24c2:	2f 73       	andi	r18, 0x3F	; 63
    24c4:	32 2e       	mov	r3, r18
    24c6:	85 36       	cpi	r24, 0x65	; 101
    24c8:	19 f4       	brne	.+6      	; 0x24d0 <vfprintf+0x132>
    24ca:	20 64       	ori	r18, 0x40	; 64
    24cc:	32 2e       	mov	r3, r18
    24ce:	08 c0       	rjmp	.+16     	; 0x24e0 <vfprintf+0x142>
    24d0:	86 36       	cpi	r24, 0x66	; 102
    24d2:	21 f4       	brne	.+8      	; 0x24dc <vfprintf+0x13e>
    24d4:	f2 2f       	mov	r31, r18
    24d6:	f0 68       	ori	r31, 0x80	; 128
    24d8:	3f 2e       	mov	r3, r31
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <vfprintf+0x142>
    24dc:	11 11       	cpse	r17, r1
    24de:	11 50       	subi	r17, 0x01	; 1
    24e0:	37 fe       	sbrs	r3, 7
    24e2:	07 c0       	rjmp	.+14     	; 0x24f2 <vfprintf+0x154>
    24e4:	1c 33       	cpi	r17, 0x3C	; 60
    24e6:	50 f4       	brcc	.+20     	; 0x24fc <vfprintf+0x15e>
    24e8:	ee 24       	eor	r14, r14
    24ea:	e3 94       	inc	r14
    24ec:	e1 0e       	add	r14, r17
    24ee:	27 e0       	ldi	r18, 0x07	; 7
    24f0:	0b c0       	rjmp	.+22     	; 0x2508 <vfprintf+0x16a>
    24f2:	18 30       	cpi	r17, 0x08	; 8
    24f4:	38 f0       	brcs	.+14     	; 0x2504 <vfprintf+0x166>
    24f6:	27 e0       	ldi	r18, 0x07	; 7
    24f8:	17 e0       	ldi	r17, 0x07	; 7
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <vfprintf+0x168>
    24fc:	27 e0       	ldi	r18, 0x07	; 7
    24fe:	4c e3       	ldi	r20, 0x3C	; 60
    2500:	e4 2e       	mov	r14, r20
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <vfprintf+0x16a>
    2504:	21 2f       	mov	r18, r17
    2506:	e1 2c       	mov	r14, r1
    2508:	52 01       	movw	r10, r4
    250a:	44 e0       	ldi	r20, 0x04	; 4
    250c:	a4 0e       	add	r10, r20
    250e:	b1 1c       	adc	r11, r1
    2510:	f2 01       	movw	r30, r4
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 2d       	mov	r16, r14
    251c:	a3 01       	movw	r20, r6
    251e:	35 d4       	rcall	.+2154   	; 0x2d8a <__ftoa_engine>
    2520:	2c 01       	movw	r4, r24
    2522:	09 81       	ldd	r16, Y+1	; 0x01
    2524:	00 ff       	sbrs	r16, 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <vfprintf+0x18e>
    2528:	03 ff       	sbrs	r16, 3
    252a:	07 c0       	rjmp	.+14     	; 0x253a <vfprintf+0x19c>
    252c:	31 fc       	sbrc	r3, 1
    252e:	08 c0       	rjmp	.+16     	; 0x2540 <vfprintf+0x1a2>
    2530:	32 fe       	sbrs	r3, 2
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <vfprintf+0x1a8>
    2534:	30 e2       	ldi	r19, 0x20	; 32
    2536:	23 2e       	mov	r2, r19
    2538:	07 c0       	rjmp	.+14     	; 0x2548 <vfprintf+0x1aa>
    253a:	2d e2       	ldi	r18, 0x2D	; 45
    253c:	22 2e       	mov	r2, r18
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <vfprintf+0x1aa>
    2540:	9b e2       	ldi	r25, 0x2B	; 43
    2542:	29 2e       	mov	r2, r25
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <vfprintf+0x1aa>
    2546:	21 2c       	mov	r2, r1
    2548:	80 2f       	mov	r24, r16
    254a:	8c 70       	andi	r24, 0x0C	; 12
    254c:	19 f0       	breq	.+6      	; 0x2554 <vfprintf+0x1b6>
    254e:	21 10       	cpse	r2, r1
    2550:	51 c2       	rjmp	.+1186   	; 0x29f4 <vfprintf+0x656>
    2552:	8d c2       	rjmp	.+1306   	; 0x2a6e <vfprintf+0x6d0>
    2554:	37 fe       	sbrs	r3, 7
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <vfprintf+0x1d8>
    2558:	e4 0c       	add	r14, r4
    255a:	04 ff       	sbrs	r16, 4
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <vfprintf+0x1c8>
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	81 33       	cpi	r24, 0x31	; 49
    2562:	09 f4       	brne	.+2      	; 0x2566 <vfprintf+0x1c8>
    2564:	ea 94       	dec	r14
    2566:	1e 14       	cp	r1, r14
    2568:	74 f5       	brge	.+92     	; 0x25c6 <vfprintf+0x228>
    256a:	f8 e0       	ldi	r31, 0x08	; 8
    256c:	fe 15       	cp	r31, r14
    256e:	78 f5       	brcc	.+94     	; 0x25ce <vfprintf+0x230>
    2570:	88 e0       	ldi	r24, 0x08	; 8
    2572:	e8 2e       	mov	r14, r24
    2574:	2c c0       	rjmp	.+88     	; 0x25ce <vfprintf+0x230>
    2576:	36 fc       	sbrc	r3, 6
    2578:	2a c0       	rjmp	.+84     	; 0x25ce <vfprintf+0x230>
    257a:	81 2f       	mov	r24, r17
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	84 15       	cp	r24, r4
    2580:	95 05       	cpc	r25, r5
    2582:	9c f0       	brlt	.+38     	; 0x25aa <vfprintf+0x20c>
    2584:	2c ef       	ldi	r18, 0xFC	; 252
    2586:	42 16       	cp	r4, r18
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	52 06       	cpc	r5, r18
    258c:	74 f0       	brlt	.+28     	; 0x25aa <vfprintf+0x20c>
    258e:	43 2d       	mov	r20, r3
    2590:	40 68       	ori	r20, 0x80	; 128
    2592:	34 2e       	mov	r3, r20
    2594:	0a c0       	rjmp	.+20     	; 0x25aa <vfprintf+0x20c>
    2596:	e2 e0       	ldi	r30, 0x02	; 2
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ec 0f       	add	r30, r28
    259c:	fd 1f       	adc	r31, r29
    259e:	e1 0f       	add	r30, r17
    25a0:	f1 1d       	adc	r31, r1
    25a2:	80 81       	ld	r24, Z
    25a4:	80 33       	cpi	r24, 0x30	; 48
    25a6:	19 f4       	brne	.+6      	; 0x25ae <vfprintf+0x210>
    25a8:	11 50       	subi	r17, 0x01	; 1
    25aa:	11 11       	cpse	r17, r1
    25ac:	f4 cf       	rjmp	.-24     	; 0x2596 <vfprintf+0x1f8>
    25ae:	37 fe       	sbrs	r3, 7
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <vfprintf+0x230>
    25b2:	ee 24       	eor	r14, r14
    25b4:	e3 94       	inc	r14
    25b6:	e1 0e       	add	r14, r17
    25b8:	81 2f       	mov	r24, r17
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	48 16       	cp	r4, r24
    25be:	59 06       	cpc	r5, r25
    25c0:	2c f4       	brge	.+10     	; 0x25cc <vfprintf+0x22e>
    25c2:	14 19       	sub	r17, r4
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <vfprintf+0x230>
    25c6:	ee 24       	eor	r14, r14
    25c8:	e3 94       	inc	r14
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <vfprintf+0x230>
    25cc:	10 e0       	ldi	r17, 0x00	; 0
    25ce:	37 fe       	sbrs	r3, 7
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <vfprintf+0x240>
    25d2:	14 14       	cp	r1, r4
    25d4:	15 04       	cpc	r1, r5
    25d6:	34 f4       	brge	.+12     	; 0x25e4 <vfprintf+0x246>
    25d8:	c2 01       	movw	r24, r4
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <vfprintf+0x24a>
    25de:	85 e0       	ldi	r24, 0x05	; 5
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <vfprintf+0x24a>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	21 10       	cpse	r2, r1
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	11 23       	and	r17, r17
    25ee:	31 f0       	breq	.+12     	; 0x25fc <vfprintf+0x25e>
    25f0:	21 2f       	mov	r18, r17
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	2f 5f       	subi	r18, 0xFF	; 255
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	82 0f       	add	r24, r18
    25fa:	93 1f       	adc	r25, r19
    25fc:	2f 2d       	mov	r18, r15
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	82 17       	cp	r24, r18
    2602:	93 07       	cpc	r25, r19
    2604:	14 f4       	brge	.+4      	; 0x260a <vfprintf+0x26c>
    2606:	f8 1a       	sub	r15, r24
    2608:	01 c0       	rjmp	.+2      	; 0x260c <vfprintf+0x26e>
    260a:	f1 2c       	mov	r15, r1
    260c:	83 2d       	mov	r24, r3
    260e:	89 70       	andi	r24, 0x09	; 9
    2610:	41 f4       	brne	.+16     	; 0x2622 <vfprintf+0x284>
    2612:	ff 20       	and	r15, r15
    2614:	31 f0       	breq	.+12     	; 0x2622 <vfprintf+0x284>
    2616:	b6 01       	movw	r22, r12
    2618:	80 e2       	ldi	r24, 0x20	; 32
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	ab d4       	rcall	.+2390   	; 0x2f74 <fputc>
    261e:	fa 94       	dec	r15
    2620:	f8 cf       	rjmp	.-16     	; 0x2612 <vfprintf+0x274>
    2622:	22 20       	and	r2, r2
    2624:	21 f0       	breq	.+8      	; 0x262e <vfprintf+0x290>
    2626:	b6 01       	movw	r22, r12
    2628:	82 2d       	mov	r24, r2
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a3 d4       	rcall	.+2374   	; 0x2f74 <fputc>
    262e:	33 fc       	sbrc	r3, 3
    2630:	08 c0       	rjmp	.+16     	; 0x2642 <vfprintf+0x2a4>
    2632:	ff 20       	and	r15, r15
    2634:	31 f0       	breq	.+12     	; 0x2642 <vfprintf+0x2a4>
    2636:	b6 01       	movw	r22, r12
    2638:	80 e3       	ldi	r24, 0x30	; 48
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9b d4       	rcall	.+2358   	; 0x2f74 <fputc>
    263e:	fa 94       	dec	r15
    2640:	f8 cf       	rjmp	.-16     	; 0x2632 <vfprintf+0x294>
    2642:	37 fe       	sbrs	r3, 7
    2644:	58 c0       	rjmp	.+176    	; 0x26f6 <vfprintf+0x358>
    2646:	94 2d       	mov	r25, r4
    2648:	85 2d       	mov	r24, r5
    264a:	57 fe       	sbrs	r5, 7
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <vfprintf+0x2b4>
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	29 2e       	mov	r2, r25
    2654:	38 2e       	mov	r3, r24
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	a2 01       	movw	r20, r4
    265c:	4e 19       	sub	r20, r14
    265e:	51 09       	sbc	r21, r1
    2660:	5d 87       	std	Y+13, r21	; 0x0d
    2662:	4c 87       	std	Y+12, r20	; 0x0c
    2664:	a2 01       	movw	r20, r4
    2666:	42 19       	sub	r20, r2
    2668:	53 09       	sbc	r21, r3
    266a:	5f 87       	std	Y+15, r21	; 0x0f
    266c:	4e 87       	std	Y+14, r20	; 0x0e
    266e:	61 2f       	mov	r22, r17
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	44 27       	eor	r20, r20
    2674:	55 27       	eor	r21, r21
    2676:	46 1b       	sub	r20, r22
    2678:	57 0b       	sbc	r21, r23
    267a:	59 8b       	std	Y+17, r21	; 0x11
    267c:	48 8b       	std	Y+16, r20	; 0x10
    267e:	5f ef       	ldi	r21, 0xFF	; 255
    2680:	25 16       	cp	r2, r21
    2682:	35 06       	cpc	r3, r21
    2684:	41 f4       	brne	.+16     	; 0x2696 <vfprintf+0x2f8>
    2686:	b6 01       	movw	r22, r12
    2688:	8e e2       	ldi	r24, 0x2E	; 46
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	2a 8b       	std	Y+18, r18	; 0x12
    268e:	3b 8b       	std	Y+19, r19	; 0x13
    2690:	71 d4       	rcall	.+2274   	; 0x2f74 <fputc>
    2692:	3b 89       	ldd	r19, Y+19	; 0x13
    2694:	2a 89       	ldd	r18, Y+18	; 0x12
    2696:	42 14       	cp	r4, r2
    2698:	53 04       	cpc	r5, r3
    269a:	6c f0       	brlt	.+26     	; 0x26b6 <vfprintf+0x318>
    269c:	4c 85       	ldd	r20, Y+12	; 0x0c
    269e:	5d 85       	ldd	r21, Y+13	; 0x0d
    26a0:	42 15       	cp	r20, r2
    26a2:	53 05       	cpc	r21, r3
    26a4:	44 f4       	brge	.+16     	; 0x26b6 <vfprintf+0x318>
    26a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    26a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	e6 0d       	add	r30, r6
    26b0:	f7 1d       	adc	r31, r7
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <vfprintf+0x31a>
    26b6:	80 e3       	ldi	r24, 0x30	; 48
    26b8:	51 e0       	ldi	r21, 0x01	; 1
    26ba:	25 1a       	sub	r2, r21
    26bc:	31 08       	sbc	r3, r1
    26be:	2f 5f       	subi	r18, 0xFF	; 255
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	48 89       	ldd	r20, Y+16	; 0x10
    26c4:	59 89       	ldd	r21, Y+17	; 0x11
    26c6:	24 16       	cp	r2, r20
    26c8:	35 06       	cpc	r3, r21
    26ca:	44 f0       	brlt	.+16     	; 0x26dc <vfprintf+0x33e>
    26cc:	b6 01       	movw	r22, r12
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	2a 8b       	std	Y+18, r18	; 0x12
    26d2:	3b 8b       	std	Y+19, r19	; 0x13
    26d4:	4f d4       	rcall	.+2206   	; 0x2f74 <fputc>
    26d6:	2a 89       	ldd	r18, Y+18	; 0x12
    26d8:	3b 89       	ldd	r19, Y+19	; 0x13
    26da:	d1 cf       	rjmp	.-94     	; 0x267e <vfprintf+0x2e0>
    26dc:	24 14       	cp	r2, r4
    26de:	35 04       	cpc	r3, r5
    26e0:	39 f4       	brne	.+14     	; 0x26f0 <vfprintf+0x352>
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	96 33       	cpi	r25, 0x36	; 54
    26e6:	18 f4       	brcc	.+6      	; 0x26ee <vfprintf+0x350>
    26e8:	95 33       	cpi	r25, 0x35	; 53
    26ea:	11 f4       	brne	.+4      	; 0x26f0 <vfprintf+0x352>
    26ec:	04 ff       	sbrs	r16, 4
    26ee:	81 e3       	ldi	r24, 0x31	; 49
    26f0:	b6 01       	movw	r22, r12
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	45 c0       	rjmp	.+138    	; 0x2780 <vfprintf+0x3e2>
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	81 33       	cpi	r24, 0x31	; 49
    26fa:	09 f0       	breq	.+2      	; 0x26fe <vfprintf+0x360>
    26fc:	0f 7e       	andi	r16, 0xEF	; 239
    26fe:	b6 01       	movw	r22, r12
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	38 d4       	rcall	.+2160   	; 0x2f74 <fputc>
    2704:	11 11       	cpse	r17, r1
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <vfprintf+0x374>
    2708:	34 fc       	sbrc	r3, 4
    270a:	16 c0       	rjmp	.+44     	; 0x2738 <vfprintf+0x39a>
    270c:	85 e6       	ldi	r24, 0x65	; 101
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	15 c0       	rjmp	.+42     	; 0x273c <vfprintf+0x39e>
    2712:	b6 01       	movw	r22, r12
    2714:	8e e2       	ldi	r24, 0x2E	; 46
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	2d d4       	rcall	.+2138   	; 0x2f74 <fputc>
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	ee 24       	eor	r14, r14
    271e:	e3 94       	inc	r14
    2720:	e8 0e       	add	r14, r24
    2722:	f3 01       	movw	r30, r6
    2724:	e8 0f       	add	r30, r24
    2726:	f1 1d       	adc	r31, r1
    2728:	80 81       	ld	r24, Z
    272a:	b6 01       	movw	r22, r12
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	22 d4       	rcall	.+2116   	; 0x2f74 <fputc>
    2730:	11 50       	subi	r17, 0x01	; 1
    2732:	8e 2d       	mov	r24, r14
    2734:	99 f7       	brne	.-26     	; 0x271c <vfprintf+0x37e>
    2736:	e8 cf       	rjmp	.-48     	; 0x2708 <vfprintf+0x36a>
    2738:	85 e4       	ldi	r24, 0x45	; 69
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	b6 01       	movw	r22, r12
    273e:	1a d4       	rcall	.+2100   	; 0x2f74 <fputc>
    2740:	57 fc       	sbrc	r5, 7
    2742:	05 c0       	rjmp	.+10     	; 0x274e <vfprintf+0x3b0>
    2744:	41 14       	cp	r4, r1
    2746:	51 04       	cpc	r5, r1
    2748:	39 f4       	brne	.+14     	; 0x2758 <vfprintf+0x3ba>
    274a:	04 ff       	sbrs	r16, 4
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <vfprintf+0x3ba>
    274e:	51 94       	neg	r5
    2750:	41 94       	neg	r4
    2752:	51 08       	sbc	r5, r1
    2754:	8d e2       	ldi	r24, 0x2D	; 45
    2756:	01 c0       	rjmp	.+2      	; 0x275a <vfprintf+0x3bc>
    2758:	8b e2       	ldi	r24, 0x2B	; 43
    275a:	b6 01       	movw	r22, r12
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0a d4       	rcall	.+2068   	; 0x2f74 <fputc>
    2760:	80 e3       	ldi	r24, 0x30	; 48
    2762:	9a e0       	ldi	r25, 0x0A	; 10
    2764:	49 16       	cp	r4, r25
    2766:	51 04       	cpc	r5, r1
    2768:	2c f0       	brlt	.+10     	; 0x2774 <vfprintf+0x3d6>
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	5a e0       	ldi	r21, 0x0A	; 10
    276e:	45 1a       	sub	r4, r21
    2770:	51 08       	sbc	r5, r1
    2772:	f7 cf       	rjmp	.-18     	; 0x2762 <vfprintf+0x3c4>
    2774:	b6 01       	movw	r22, r12
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	fd d3       	rcall	.+2042   	; 0x2f74 <fputc>
    277a:	b6 01       	movw	r22, r12
    277c:	c2 01       	movw	r24, r4
    277e:	c0 96       	adiw	r24, 0x30	; 48
    2780:	f9 d3       	rcall	.+2034   	; 0x2f74 <fputc>
    2782:	4c c1       	rjmp	.+664    	; 0x2a1c <vfprintf+0x67e>
    2784:	83 36       	cpi	r24, 0x63	; 99
    2786:	31 f0       	breq	.+12     	; 0x2794 <vfprintf+0x3f6>
    2788:	83 37       	cpi	r24, 0x73	; 115
    278a:	79 f0       	breq	.+30     	; 0x27aa <vfprintf+0x40c>
    278c:	83 35       	cpi	r24, 0x53	; 83
    278e:	09 f0       	breq	.+2      	; 0x2792 <vfprintf+0x3f4>
    2790:	54 c0       	rjmp	.+168    	; 0x283a <vfprintf+0x49c>
    2792:	20 c0       	rjmp	.+64     	; 0x27d4 <vfprintf+0x436>
    2794:	52 01       	movw	r10, r4
    2796:	e2 e0       	ldi	r30, 0x02	; 2
    2798:	ae 0e       	add	r10, r30
    279a:	b1 1c       	adc	r11, r1
    279c:	f2 01       	movw	r30, r4
    279e:	80 81       	ld	r24, Z
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	01 e0       	ldi	r16, 0x01	; 1
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	23 01       	movw	r4, r6
    27a8:	13 c0       	rjmp	.+38     	; 0x27d0 <vfprintf+0x432>
    27aa:	52 01       	movw	r10, r4
    27ac:	f2 e0       	ldi	r31, 0x02	; 2
    27ae:	af 0e       	add	r10, r31
    27b0:	b1 1c       	adc	r11, r1
    27b2:	f2 01       	movw	r30, r4
    27b4:	40 80       	ld	r4, Z
    27b6:	51 80       	ldd	r5, Z+1	; 0x01
    27b8:	26 ff       	sbrs	r18, 6
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <vfprintf+0x424>
    27bc:	61 2f       	mov	r22, r17
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vfprintf+0x428>
    27c2:	6f ef       	ldi	r22, 0xFF	; 255
    27c4:	7f ef       	ldi	r23, 0xFF	; 255
    27c6:	c2 01       	movw	r24, r4
    27c8:	2a 8b       	std	Y+18, r18	; 0x12
    27ca:	c9 d3       	rcall	.+1938   	; 0x2f5e <strnlen>
    27cc:	8c 01       	movw	r16, r24
    27ce:	2a 89       	ldd	r18, Y+18	; 0x12
    27d0:	2f 77       	andi	r18, 0x7F	; 127
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <vfprintf+0x45e>
    27d4:	52 01       	movw	r10, r4
    27d6:	f2 e0       	ldi	r31, 0x02	; 2
    27d8:	af 0e       	add	r10, r31
    27da:	b1 1c       	adc	r11, r1
    27dc:	f2 01       	movw	r30, r4
    27de:	40 80       	ld	r4, Z
    27e0:	51 80       	ldd	r5, Z+1	; 0x01
    27e2:	26 ff       	sbrs	r18, 6
    27e4:	03 c0       	rjmp	.+6      	; 0x27ec <vfprintf+0x44e>
    27e6:	61 2f       	mov	r22, r17
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <vfprintf+0x452>
    27ec:	6f ef       	ldi	r22, 0xFF	; 255
    27ee:	7f ef       	ldi	r23, 0xFF	; 255
    27f0:	c2 01       	movw	r24, r4
    27f2:	2a 8b       	std	Y+18, r18	; 0x12
    27f4:	a2 d3       	rcall	.+1860   	; 0x2f3a <strnlen_P>
    27f6:	8c 01       	movw	r16, r24
    27f8:	2a 89       	ldd	r18, Y+18	; 0x12
    27fa:	20 68       	ori	r18, 0x80	; 128
    27fc:	32 2e       	mov	r3, r18
    27fe:	23 fd       	sbrc	r18, 3
    2800:	18 c0       	rjmp	.+48     	; 0x2832 <vfprintf+0x494>
    2802:	8f 2d       	mov	r24, r15
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	08 17       	cp	r16, r24
    2808:	19 07       	cpc	r17, r25
    280a:	98 f4       	brcc	.+38     	; 0x2832 <vfprintf+0x494>
    280c:	b6 01       	movw	r22, r12
    280e:	80 e2       	ldi	r24, 0x20	; 32
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	b0 d3       	rcall	.+1888   	; 0x2f74 <fputc>
    2814:	fa 94       	dec	r15
    2816:	f5 cf       	rjmp	.-22     	; 0x2802 <vfprintf+0x464>
    2818:	f2 01       	movw	r30, r4
    281a:	37 fc       	sbrc	r3, 7
    281c:	85 91       	lpm	r24, Z+
    281e:	37 fe       	sbrs	r3, 7
    2820:	81 91       	ld	r24, Z+
    2822:	2f 01       	movw	r4, r30
    2824:	b6 01       	movw	r22, r12
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a5 d3       	rcall	.+1866   	; 0x2f74 <fputc>
    282a:	f1 10       	cpse	r15, r1
    282c:	fa 94       	dec	r15
    282e:	01 50       	subi	r16, 0x01	; 1
    2830:	11 09       	sbc	r17, r1
    2832:	01 15       	cp	r16, r1
    2834:	11 05       	cpc	r17, r1
    2836:	81 f7       	brne	.-32     	; 0x2818 <vfprintf+0x47a>
    2838:	f1 c0       	rjmp	.+482    	; 0x2a1c <vfprintf+0x67e>
    283a:	84 36       	cpi	r24, 0x64	; 100
    283c:	11 f0       	breq	.+4      	; 0x2842 <vfprintf+0x4a4>
    283e:	89 36       	cpi	r24, 0x69	; 105
    2840:	51 f5       	brne	.+84     	; 0x2896 <vfprintf+0x4f8>
    2842:	52 01       	movw	r10, r4
    2844:	27 ff       	sbrs	r18, 7
    2846:	09 c0       	rjmp	.+18     	; 0x285a <vfprintf+0x4bc>
    2848:	f4 e0       	ldi	r31, 0x04	; 4
    284a:	af 0e       	add	r10, r31
    284c:	b1 1c       	adc	r11, r1
    284e:	f2 01       	movw	r30, r4
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	0a c0       	rjmp	.+20     	; 0x286e <vfprintf+0x4d0>
    285a:	f2 e0       	ldi	r31, 0x02	; 2
    285c:	af 0e       	add	r10, r31
    285e:	b1 1c       	adc	r11, r1
    2860:	f2 01       	movw	r30, r4
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	07 2e       	mov	r0, r23
    2868:	00 0c       	add	r0, r0
    286a:	88 0b       	sbc	r24, r24
    286c:	99 0b       	sbc	r25, r25
    286e:	2f 76       	andi	r18, 0x6F	; 111
    2870:	32 2e       	mov	r3, r18
    2872:	97 ff       	sbrs	r25, 7
    2874:	09 c0       	rjmp	.+18     	; 0x2888 <vfprintf+0x4ea>
    2876:	90 95       	com	r25
    2878:	80 95       	com	r24
    287a:	70 95       	com	r23
    287c:	61 95       	neg	r22
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	8f 4f       	sbci	r24, 0xFF	; 255
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	20 68       	ori	r18, 0x80	; 128
    2886:	32 2e       	mov	r3, r18
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	a3 01       	movw	r20, r6
    288e:	d9 d3       	rcall	.+1970   	; 0x3042 <__ultoa_invert>
    2890:	e8 2e       	mov	r14, r24
    2892:	e6 18       	sub	r14, r6
    2894:	3e c0       	rjmp	.+124    	; 0x2912 <vfprintf+0x574>
    2896:	02 2f       	mov	r16, r18
    2898:	85 37       	cpi	r24, 0x75	; 117
    289a:	21 f4       	brne	.+8      	; 0x28a4 <vfprintf+0x506>
    289c:	0f 7e       	andi	r16, 0xEF	; 239
    289e:	2a e0       	ldi	r18, 0x0A	; 10
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	1d c0       	rjmp	.+58     	; 0x28de <vfprintf+0x540>
    28a4:	09 7f       	andi	r16, 0xF9	; 249
    28a6:	8f 36       	cpi	r24, 0x6F	; 111
    28a8:	91 f0       	breq	.+36     	; 0x28ce <vfprintf+0x530>
    28aa:	18 f4       	brcc	.+6      	; 0x28b2 <vfprintf+0x514>
    28ac:	88 35       	cpi	r24, 0x58	; 88
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <vfprintf+0x528>
    28b0:	be c0       	rjmp	.+380    	; 0x2a2e <vfprintf+0x690>
    28b2:	80 37       	cpi	r24, 0x70	; 112
    28b4:	19 f0       	breq	.+6      	; 0x28bc <vfprintf+0x51e>
    28b6:	88 37       	cpi	r24, 0x78	; 120
    28b8:	11 f0       	breq	.+4      	; 0x28be <vfprintf+0x520>
    28ba:	b9 c0       	rjmp	.+370    	; 0x2a2e <vfprintf+0x690>
    28bc:	00 61       	ori	r16, 0x10	; 16
    28be:	04 ff       	sbrs	r16, 4
    28c0:	09 c0       	rjmp	.+18     	; 0x28d4 <vfprintf+0x536>
    28c2:	04 60       	ori	r16, 0x04	; 4
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <vfprintf+0x536>
    28c6:	24 ff       	sbrs	r18, 4
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <vfprintf+0x53c>
    28ca:	06 60       	ori	r16, 0x06	; 6
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <vfprintf+0x53c>
    28ce:	28 e0       	ldi	r18, 0x08	; 8
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <vfprintf+0x540>
    28d4:	20 e1       	ldi	r18, 0x10	; 16
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x540>
    28da:	20 e1       	ldi	r18, 0x10	; 16
    28dc:	32 e0       	ldi	r19, 0x02	; 2
    28de:	52 01       	movw	r10, r4
    28e0:	07 ff       	sbrs	r16, 7
    28e2:	09 c0       	rjmp	.+18     	; 0x28f6 <vfprintf+0x558>
    28e4:	f4 e0       	ldi	r31, 0x04	; 4
    28e6:	af 0e       	add	r10, r31
    28e8:	b1 1c       	adc	r11, r1
    28ea:	f2 01       	movw	r30, r4
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	08 c0       	rjmp	.+16     	; 0x2906 <vfprintf+0x568>
    28f6:	f2 e0       	ldi	r31, 0x02	; 2
    28f8:	af 0e       	add	r10, r31
    28fa:	b1 1c       	adc	r11, r1
    28fc:	f2 01       	movw	r30, r4
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a3 01       	movw	r20, r6
    2908:	9c d3       	rcall	.+1848   	; 0x3042 <__ultoa_invert>
    290a:	e8 2e       	mov	r14, r24
    290c:	e6 18       	sub	r14, r6
    290e:	0f 77       	andi	r16, 0x7F	; 127
    2910:	30 2e       	mov	r3, r16
    2912:	36 fe       	sbrs	r3, 6
    2914:	0b c0       	rjmp	.+22     	; 0x292c <vfprintf+0x58e>
    2916:	33 2d       	mov	r19, r3
    2918:	3e 7f       	andi	r19, 0xFE	; 254
    291a:	e1 16       	cp	r14, r17
    291c:	50 f4       	brcc	.+20     	; 0x2932 <vfprintf+0x594>
    291e:	34 fe       	sbrs	r3, 4
    2920:	0a c0       	rjmp	.+20     	; 0x2936 <vfprintf+0x598>
    2922:	32 fc       	sbrc	r3, 2
    2924:	08 c0       	rjmp	.+16     	; 0x2936 <vfprintf+0x598>
    2926:	33 2d       	mov	r19, r3
    2928:	3e 7e       	andi	r19, 0xEE	; 238
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <vfprintf+0x598>
    292c:	0e 2d       	mov	r16, r14
    292e:	33 2d       	mov	r19, r3
    2930:	03 c0       	rjmp	.+6      	; 0x2938 <vfprintf+0x59a>
    2932:	0e 2d       	mov	r16, r14
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <vfprintf+0x59a>
    2936:	01 2f       	mov	r16, r17
    2938:	34 ff       	sbrs	r19, 4
    293a:	0c c0       	rjmp	.+24     	; 0x2954 <vfprintf+0x5b6>
    293c:	fe 01       	movw	r30, r28
    293e:	ee 0d       	add	r30, r14
    2940:	f1 1d       	adc	r31, r1
    2942:	80 81       	ld	r24, Z
    2944:	80 33       	cpi	r24, 0x30	; 48
    2946:	11 f4       	brne	.+4      	; 0x294c <vfprintf+0x5ae>
    2948:	39 7e       	andi	r19, 0xE9	; 233
    294a:	08 c0       	rjmp	.+16     	; 0x295c <vfprintf+0x5be>
    294c:	32 ff       	sbrs	r19, 2
    294e:	05 c0       	rjmp	.+10     	; 0x295a <vfprintf+0x5bc>
    2950:	0e 5f       	subi	r16, 0xFE	; 254
    2952:	04 c0       	rjmp	.+8      	; 0x295c <vfprintf+0x5be>
    2954:	83 2f       	mov	r24, r19
    2956:	86 78       	andi	r24, 0x86	; 134
    2958:	09 f0       	breq	.+2      	; 0x295c <vfprintf+0x5be>
    295a:	0f 5f       	subi	r16, 0xFF	; 255
    295c:	33 fd       	sbrc	r19, 3
    295e:	12 c0       	rjmp	.+36     	; 0x2984 <vfprintf+0x5e6>
    2960:	30 ff       	sbrs	r19, 0
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <vfprintf+0x5d2>
    2964:	1e 2d       	mov	r17, r14
    2966:	0f 15       	cp	r16, r15
    2968:	18 f4       	brcc	.+6      	; 0x2970 <vfprintf+0x5d2>
    296a:	1f 0d       	add	r17, r15
    296c:	10 1b       	sub	r17, r16
    296e:	0f 2d       	mov	r16, r15
    2970:	0f 15       	cp	r16, r15
    2972:	60 f4       	brcc	.+24     	; 0x298c <vfprintf+0x5ee>
    2974:	b6 01       	movw	r22, r12
    2976:	80 e2       	ldi	r24, 0x20	; 32
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	3b 8b       	std	Y+19, r19	; 0x13
    297c:	fb d2       	rcall	.+1526   	; 0x2f74 <fputc>
    297e:	0f 5f       	subi	r16, 0xFF	; 255
    2980:	3b 89       	ldd	r19, Y+19	; 0x13
    2982:	f6 cf       	rjmp	.-20     	; 0x2970 <vfprintf+0x5d2>
    2984:	0f 15       	cp	r16, r15
    2986:	10 f4       	brcc	.+4      	; 0x298c <vfprintf+0x5ee>
    2988:	f0 1a       	sub	r15, r16
    298a:	01 c0       	rjmp	.+2      	; 0x298e <vfprintf+0x5f0>
    298c:	f1 2c       	mov	r15, r1
    298e:	34 ff       	sbrs	r19, 4
    2990:	11 c0       	rjmp	.+34     	; 0x29b4 <vfprintf+0x616>
    2992:	b6 01       	movw	r22, r12
    2994:	80 e3       	ldi	r24, 0x30	; 48
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	3b 8b       	std	Y+19, r19	; 0x13
    299a:	ec d2       	rcall	.+1496   	; 0x2f74 <fputc>
    299c:	3b 89       	ldd	r19, Y+19	; 0x13
    299e:	32 ff       	sbrs	r19, 2
    29a0:	16 c0       	rjmp	.+44     	; 0x29ce <vfprintf+0x630>
    29a2:	31 fd       	sbrc	r19, 1
    29a4:	03 c0       	rjmp	.+6      	; 0x29ac <vfprintf+0x60e>
    29a6:	88 e7       	ldi	r24, 0x78	; 120
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <vfprintf+0x612>
    29ac:	88 e5       	ldi	r24, 0x58	; 88
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	b6 01       	movw	r22, r12
    29b2:	0c c0       	rjmp	.+24     	; 0x29cc <vfprintf+0x62e>
    29b4:	83 2f       	mov	r24, r19
    29b6:	86 78       	andi	r24, 0x86	; 134
    29b8:	51 f0       	breq	.+20     	; 0x29ce <vfprintf+0x630>
    29ba:	31 ff       	sbrs	r19, 1
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <vfprintf+0x624>
    29be:	8b e2       	ldi	r24, 0x2B	; 43
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <vfprintf+0x626>
    29c2:	80 e2       	ldi	r24, 0x20	; 32
    29c4:	37 fd       	sbrc	r19, 7
    29c6:	8d e2       	ldi	r24, 0x2D	; 45
    29c8:	b6 01       	movw	r22, r12
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	d3 d2       	rcall	.+1446   	; 0x2f74 <fputc>
    29ce:	e1 16       	cp	r14, r17
    29d0:	30 f4       	brcc	.+12     	; 0x29de <vfprintf+0x640>
    29d2:	b6 01       	movw	r22, r12
    29d4:	80 e3       	ldi	r24, 0x30	; 48
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	cd d2       	rcall	.+1434   	; 0x2f74 <fputc>
    29da:	11 50       	subi	r17, 0x01	; 1
    29dc:	f8 cf       	rjmp	.-16     	; 0x29ce <vfprintf+0x630>
    29de:	ea 94       	dec	r14
    29e0:	f3 01       	movw	r30, r6
    29e2:	ee 0d       	add	r30, r14
    29e4:	f1 1d       	adc	r31, r1
    29e6:	80 81       	ld	r24, Z
    29e8:	b6 01       	movw	r22, r12
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	c3 d2       	rcall	.+1414   	; 0x2f74 <fputc>
    29ee:	e1 10       	cpse	r14, r1
    29f0:	f6 cf       	rjmp	.-20     	; 0x29de <vfprintf+0x640>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <vfprintf+0x67e>
    29f4:	f4 e0       	ldi	r31, 0x04	; 4
    29f6:	ff 15       	cp	r31, r15
    29f8:	48 f5       	brcc	.+82     	; 0x2a4c <vfprintf+0x6ae>
    29fa:	84 e0       	ldi	r24, 0x04	; 4
    29fc:	f8 1a       	sub	r15, r24
    29fe:	33 fe       	sbrs	r3, 3
    2a00:	1d c0       	rjmp	.+58     	; 0x2a3c <vfprintf+0x69e>
    2a02:	21 10       	cpse	r2, r1
    2a04:	24 c0       	rjmp	.+72     	; 0x2a4e <vfprintf+0x6b0>
    2a06:	03 ff       	sbrs	r16, 3
    2a08:	27 c0       	rjmp	.+78     	; 0x2a58 <vfprintf+0x6ba>
    2a0a:	0c e7       	ldi	r16, 0x7C	; 124
    2a0c:	11 e0       	ldi	r17, 0x01	; 1
    2a0e:	f3 2d       	mov	r31, r3
    2a10:	f0 71       	andi	r31, 0x10	; 16
    2a12:	3f 2e       	mov	r3, r31
    2a14:	f8 01       	movw	r30, r16
    2a16:	84 91       	lpm	r24, Z
    2a18:	81 11       	cpse	r24, r1
    2a1a:	21 c0       	rjmp	.+66     	; 0x2a5e <vfprintf+0x6c0>
    2a1c:	ff 20       	and	r15, r15
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <vfprintf+0x684>
    2a20:	fd cc       	rjmp	.-1542   	; 0x241c <vfprintf+0x7e>
    2a22:	b6 01       	movw	r22, r12
    2a24:	80 e2       	ldi	r24, 0x20	; 32
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a5 d2       	rcall	.+1354   	; 0x2f74 <fputc>
    2a2a:	fa 94       	dec	r15
    2a2c:	f7 cf       	rjmp	.-18     	; 0x2a1c <vfprintf+0x67e>
    2a2e:	f6 01       	movw	r30, r12
    2a30:	86 81       	ldd	r24, Z+6	; 0x06
    2a32:	97 81       	ldd	r25, Z+7	; 0x07
    2a34:	23 c0       	rjmp	.+70     	; 0x2a7c <vfprintf+0x6de>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	20 c0       	rjmp	.+64     	; 0x2a7c <vfprintf+0x6de>
    2a3c:	b6 01       	movw	r22, r12
    2a3e:	80 e2       	ldi	r24, 0x20	; 32
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	98 d2       	rcall	.+1328   	; 0x2f74 <fputc>
    2a44:	fa 94       	dec	r15
    2a46:	f1 10       	cpse	r15, r1
    2a48:	f9 cf       	rjmp	.-14     	; 0x2a3c <vfprintf+0x69e>
    2a4a:	db cf       	rjmp	.-74     	; 0x2a02 <vfprintf+0x664>
    2a4c:	f1 2c       	mov	r15, r1
    2a4e:	b6 01       	movw	r22, r12
    2a50:	82 2d       	mov	r24, r2
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	8f d2       	rcall	.+1310   	; 0x2f74 <fputc>
    2a56:	d7 cf       	rjmp	.-82     	; 0x2a06 <vfprintf+0x668>
    2a58:	00 e8       	ldi	r16, 0x80	; 128
    2a5a:	11 e0       	ldi	r17, 0x01	; 1
    2a5c:	d8 cf       	rjmp	.-80     	; 0x2a0e <vfprintf+0x670>
    2a5e:	31 10       	cpse	r3, r1
    2a60:	80 52       	subi	r24, 0x20	; 32
    2a62:	b6 01       	movw	r22, r12
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	86 d2       	rcall	.+1292   	; 0x2f74 <fputc>
    2a68:	0f 5f       	subi	r16, 0xFF	; 255
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	d3 cf       	rjmp	.-90     	; 0x2a14 <vfprintf+0x676>
    2a6e:	23 e0       	ldi	r18, 0x03	; 3
    2a70:	2f 15       	cp	r18, r15
    2a72:	10 f4       	brcc	.+4      	; 0x2a78 <vfprintf+0x6da>
    2a74:	83 e0       	ldi	r24, 0x03	; 3
    2a76:	c2 cf       	rjmp	.-124    	; 0x29fc <vfprintf+0x65e>
    2a78:	f1 2c       	mov	r15, r1
    2a7a:	c5 cf       	rjmp	.-118    	; 0x2a06 <vfprintf+0x668>
    2a7c:	63 96       	adiw	r28, 0x13	; 19
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
    2a9c:	9f 90       	pop	r9
    2a9e:	8f 90       	pop	r8
    2aa0:	7f 90       	pop	r7
    2aa2:	6f 90       	pop	r6
    2aa4:	5f 90       	pop	r5
    2aa6:	4f 90       	pop	r4
    2aa8:	3f 90       	pop	r3
    2aaa:	2f 90       	pop	r2
    2aac:	08 95       	ret

00002aae <__divmodhi4>:
    2aae:	97 fb       	bst	r25, 7
    2ab0:	07 2e       	mov	r0, r23
    2ab2:	16 f4       	brtc	.+4      	; 0x2ab8 <__divmodhi4+0xa>
    2ab4:	00 94       	com	r0
    2ab6:	06 d0       	rcall	.+12     	; 0x2ac4 <__divmodhi4_neg1>
    2ab8:	77 fd       	sbrc	r23, 7
    2aba:	08 d0       	rcall	.+16     	; 0x2acc <__divmodhi4_neg2>
    2abc:	0b d0       	rcall	.+22     	; 0x2ad4 <__udivmodhi4>
    2abe:	07 fc       	sbrc	r0, 7
    2ac0:	05 d0       	rcall	.+10     	; 0x2acc <__divmodhi4_neg2>
    2ac2:	3e f4       	brtc	.+14     	; 0x2ad2 <__divmodhi4_exit>

00002ac4 <__divmodhi4_neg1>:
    2ac4:	90 95       	com	r25
    2ac6:	81 95       	neg	r24
    2ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aca:	08 95       	ret

00002acc <__divmodhi4_neg2>:
    2acc:	70 95       	com	r23
    2ace:	61 95       	neg	r22
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00002ad2 <__divmodhi4_exit>:
    2ad2:	08 95       	ret

00002ad4 <__udivmodhi4>:
    2ad4:	aa 1b       	sub	r26, r26
    2ad6:	bb 1b       	sub	r27, r27
    2ad8:	51 e1       	ldi	r21, 0x11	; 17
    2ada:	07 c0       	rjmp	.+14     	; 0x2aea <__udivmodhi4_ep>

00002adc <__udivmodhi4_loop>:
    2adc:	aa 1f       	adc	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	a6 17       	cp	r26, r22
    2ae2:	b7 07       	cpc	r27, r23
    2ae4:	10 f0       	brcs	.+4      	; 0x2aea <__udivmodhi4_ep>
    2ae6:	a6 1b       	sub	r26, r22
    2ae8:	b7 0b       	sbc	r27, r23

00002aea <__udivmodhi4_ep>:
    2aea:	88 1f       	adc	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	5a 95       	dec	r21
    2af0:	a9 f7       	brne	.-22     	; 0x2adc <__udivmodhi4_loop>
    2af2:	80 95       	com	r24
    2af4:	90 95       	com	r25
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	08 95       	ret

00002afc <calloc>:
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	86 9f       	mul	r24, r22
    2b06:	80 01       	movw	r16, r0
    2b08:	87 9f       	mul	r24, r23
    2b0a:	10 0d       	add	r17, r0
    2b0c:	96 9f       	mul	r25, r22
    2b0e:	10 0d       	add	r17, r0
    2b10:	11 24       	eor	r1, r1
    2b12:	c8 01       	movw	r24, r16
    2b14:	0d d0       	rcall	.+26     	; 0x2b30 <malloc>
    2b16:	ec 01       	movw	r28, r24
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	21 f0       	breq	.+8      	; 0x2b24 <calloc+0x28>
    2b1c:	a8 01       	movw	r20, r16
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	16 d2       	rcall	.+1068   	; 0x2f50 <memset>
    2b24:	ce 01       	movw	r24, r28
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	08 95       	ret

00002b30 <malloc>:
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	91 05       	cpc	r25, r1
    2b38:	10 f4       	brcc	.+4      	; 0x2b3e <malloc+0xe>
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	e0 91 02 03 	lds	r30, 0x0302
    2b42:	f0 91 03 03 	lds	r31, 0x0303
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	c0 e0       	ldi	r28, 0x00	; 0
    2b4c:	d0 e0       	ldi	r29, 0x00	; 0
    2b4e:	30 97       	sbiw	r30, 0x00	; 0
    2b50:	11 f1       	breq	.+68     	; 0x2b96 <malloc+0x66>
    2b52:	40 81       	ld	r20, Z
    2b54:	51 81       	ldd	r21, Z+1	; 0x01
    2b56:	48 17       	cp	r20, r24
    2b58:	59 07       	cpc	r21, r25
    2b5a:	c0 f0       	brcs	.+48     	; 0x2b8c <malloc+0x5c>
    2b5c:	48 17       	cp	r20, r24
    2b5e:	59 07       	cpc	r21, r25
    2b60:	61 f4       	brne	.+24     	; 0x2b7a <malloc+0x4a>
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 97       	sbiw	r28, 0x00	; 0
    2b68:	19 f0       	breq	.+6      	; 0x2b70 <malloc+0x40>
    2b6a:	9b 83       	std	Y+3, r25	; 0x03
    2b6c:	8a 83       	std	Y+2, r24	; 0x02
    2b6e:	2b c0       	rjmp	.+86     	; 0x2bc6 <malloc+0x96>
    2b70:	90 93 03 03 	sts	0x0303, r25
    2b74:	80 93 02 03 	sts	0x0302, r24
    2b78:	26 c0       	rjmp	.+76     	; 0x2bc6 <malloc+0x96>
    2b7a:	21 15       	cp	r18, r1
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	19 f0       	breq	.+6      	; 0x2b86 <malloc+0x56>
    2b80:	42 17       	cp	r20, r18
    2b82:	53 07       	cpc	r21, r19
    2b84:	18 f4       	brcc	.+6      	; 0x2b8c <malloc+0x5c>
    2b86:	9a 01       	movw	r18, r20
    2b88:	be 01       	movw	r22, r28
    2b8a:	df 01       	movw	r26, r30
    2b8c:	ef 01       	movw	r28, r30
    2b8e:	02 80       	ldd	r0, Z+2	; 0x02
    2b90:	f3 81       	ldd	r31, Z+3	; 0x03
    2b92:	e0 2d       	mov	r30, r0
    2b94:	dc cf       	rjmp	.-72     	; 0x2b4e <malloc+0x1e>
    2b96:	21 15       	cp	r18, r1
    2b98:	31 05       	cpc	r19, r1
    2b9a:	09 f1       	breq	.+66     	; 0x2bde <malloc+0xae>
    2b9c:	28 1b       	sub	r18, r24
    2b9e:	39 0b       	sbc	r19, r25
    2ba0:	24 30       	cpi	r18, 0x04	; 4
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	90 f4       	brcc	.+36     	; 0x2bca <malloc+0x9a>
    2ba6:	12 96       	adiw	r26, 0x02	; 2
    2ba8:	8d 91       	ld	r24, X+
    2baa:	9c 91       	ld	r25, X
    2bac:	13 97       	sbiw	r26, 0x03	; 3
    2bae:	61 15       	cp	r22, r1
    2bb0:	71 05       	cpc	r23, r1
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <malloc+0x8c>
    2bb4:	fb 01       	movw	r30, r22
    2bb6:	93 83       	std	Z+3, r25	; 0x03
    2bb8:	82 83       	std	Z+2, r24	; 0x02
    2bba:	04 c0       	rjmp	.+8      	; 0x2bc4 <malloc+0x94>
    2bbc:	90 93 03 03 	sts	0x0303, r25
    2bc0:	80 93 02 03 	sts	0x0302, r24
    2bc4:	fd 01       	movw	r30, r26
    2bc6:	32 96       	adiw	r30, 0x02	; 2
    2bc8:	44 c0       	rjmp	.+136    	; 0x2c52 <malloc+0x122>
    2bca:	fd 01       	movw	r30, r26
    2bcc:	e2 0f       	add	r30, r18
    2bce:	f3 1f       	adc	r31, r19
    2bd0:	81 93       	st	Z+, r24
    2bd2:	91 93       	st	Z+, r25
    2bd4:	22 50       	subi	r18, 0x02	; 2
    2bd6:	31 09       	sbc	r19, r1
    2bd8:	2d 93       	st	X+, r18
    2bda:	3c 93       	st	X, r19
    2bdc:	3a c0       	rjmp	.+116    	; 0x2c52 <malloc+0x122>
    2bde:	20 91 00 03 	lds	r18, 0x0300
    2be2:	30 91 01 03 	lds	r19, 0x0301
    2be6:	23 2b       	or	r18, r19
    2be8:	41 f4       	brne	.+16     	; 0x2bfa <malloc+0xca>
    2bea:	20 91 02 01 	lds	r18, 0x0102
    2bee:	30 91 03 01 	lds	r19, 0x0103
    2bf2:	30 93 01 03 	sts	0x0301, r19
    2bf6:	20 93 00 03 	sts	0x0300, r18
    2bfa:	20 91 00 01 	lds	r18, 0x0100
    2bfe:	30 91 01 01 	lds	r19, 0x0101
    2c02:	21 15       	cp	r18, r1
    2c04:	31 05       	cpc	r19, r1
    2c06:	41 f4       	brne	.+16     	; 0x2c18 <malloc+0xe8>
    2c08:	2d b7       	in	r18, 0x3d	; 61
    2c0a:	3e b7       	in	r19, 0x3e	; 62
    2c0c:	40 91 04 01 	lds	r20, 0x0104
    2c10:	50 91 05 01 	lds	r21, 0x0105
    2c14:	24 1b       	sub	r18, r20
    2c16:	35 0b       	sbc	r19, r21
    2c18:	e0 91 00 03 	lds	r30, 0x0300
    2c1c:	f0 91 01 03 	lds	r31, 0x0301
    2c20:	e2 17       	cp	r30, r18
    2c22:	f3 07       	cpc	r31, r19
    2c24:	a0 f4       	brcc	.+40     	; 0x2c4e <malloc+0x11e>
    2c26:	2e 1b       	sub	r18, r30
    2c28:	3f 0b       	sbc	r19, r31
    2c2a:	28 17       	cp	r18, r24
    2c2c:	39 07       	cpc	r19, r25
    2c2e:	78 f0       	brcs	.+30     	; 0x2c4e <malloc+0x11e>
    2c30:	ac 01       	movw	r20, r24
    2c32:	4e 5f       	subi	r20, 0xFE	; 254
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	24 17       	cp	r18, r20
    2c38:	35 07       	cpc	r19, r21
    2c3a:	48 f0       	brcs	.+18     	; 0x2c4e <malloc+0x11e>
    2c3c:	4e 0f       	add	r20, r30
    2c3e:	5f 1f       	adc	r21, r31
    2c40:	50 93 01 03 	sts	0x0301, r21
    2c44:	40 93 00 03 	sts	0x0300, r20
    2c48:	81 93       	st	Z+, r24
    2c4a:	91 93       	st	Z+, r25
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <malloc+0x122>
    2c4e:	e0 e0       	ldi	r30, 0x00	; 0
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	cf 01       	movw	r24, r30
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	08 95       	ret

00002c5a <free>:
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <free+0xe>
    2c66:	8c c0       	rjmp	.+280    	; 0x2d80 <free+0x126>
    2c68:	fc 01       	movw	r30, r24
    2c6a:	32 97       	sbiw	r30, 0x02	; 2
    2c6c:	13 82       	std	Z+3, r1	; 0x03
    2c6e:	12 82       	std	Z+2, r1	; 0x02
    2c70:	00 91 02 03 	lds	r16, 0x0302
    2c74:	10 91 03 03 	lds	r17, 0x0303
    2c78:	01 15       	cp	r16, r1
    2c7a:	11 05       	cpc	r17, r1
    2c7c:	81 f4       	brne	.+32     	; 0x2c9e <free+0x44>
    2c7e:	20 81       	ld	r18, Z
    2c80:	31 81       	ldd	r19, Z+1	; 0x01
    2c82:	82 0f       	add	r24, r18
    2c84:	93 1f       	adc	r25, r19
    2c86:	20 91 00 03 	lds	r18, 0x0300
    2c8a:	30 91 01 03 	lds	r19, 0x0301
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	79 f5       	brne	.+94     	; 0x2cf2 <free+0x98>
    2c94:	f0 93 01 03 	sts	0x0301, r31
    2c98:	e0 93 00 03 	sts	0x0300, r30
    2c9c:	71 c0       	rjmp	.+226    	; 0x2d80 <free+0x126>
    2c9e:	d8 01       	movw	r26, r16
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	ae 17       	cp	r26, r30
    2ca6:	bf 07       	cpc	r27, r31
    2ca8:	50 f4       	brcc	.+20     	; 0x2cbe <free+0x64>
    2caa:	12 96       	adiw	r26, 0x02	; 2
    2cac:	2d 91       	ld	r18, X+
    2cae:	3c 91       	ld	r19, X
    2cb0:	13 97       	sbiw	r26, 0x03	; 3
    2cb2:	ad 01       	movw	r20, r26
    2cb4:	21 15       	cp	r18, r1
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	09 f1       	breq	.+66     	; 0x2cfc <free+0xa2>
    2cba:	d9 01       	movw	r26, r18
    2cbc:	f3 cf       	rjmp	.-26     	; 0x2ca4 <free+0x4a>
    2cbe:	9d 01       	movw	r18, r26
    2cc0:	da 01       	movw	r26, r20
    2cc2:	33 83       	std	Z+3, r19	; 0x03
    2cc4:	22 83       	std	Z+2, r18	; 0x02
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	86 0f       	add	r24, r22
    2ccc:	97 1f       	adc	r25, r23
    2cce:	82 17       	cp	r24, r18
    2cd0:	93 07       	cpc	r25, r19
    2cd2:	69 f4       	brne	.+26     	; 0x2cee <free+0x94>
    2cd4:	ec 01       	movw	r28, r24
    2cd6:	28 81       	ld	r18, Y
    2cd8:	39 81       	ldd	r19, Y+1	; 0x01
    2cda:	26 0f       	add	r18, r22
    2cdc:	37 1f       	adc	r19, r23
    2cde:	2e 5f       	subi	r18, 0xFE	; 254
    2ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce2:	31 83       	std	Z+1, r19	; 0x01
    2ce4:	20 83       	st	Z, r18
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cea:	93 83       	std	Z+3, r25	; 0x03
    2cec:	82 83       	std	Z+2, r24	; 0x02
    2cee:	45 2b       	or	r20, r21
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <free+0xa2>
    2cf2:	f0 93 03 03 	sts	0x0303, r31
    2cf6:	e0 93 02 03 	sts	0x0302, r30
    2cfa:	42 c0       	rjmp	.+132    	; 0x2d80 <free+0x126>
    2cfc:	13 96       	adiw	r26, 0x03	; 3
    2cfe:	fc 93       	st	X, r31
    2d00:	ee 93       	st	-X, r30
    2d02:	12 97       	sbiw	r26, 0x02	; 2
    2d04:	ed 01       	movw	r28, r26
    2d06:	49 91       	ld	r20, Y+
    2d08:	59 91       	ld	r21, Y+
    2d0a:	9e 01       	movw	r18, r28
    2d0c:	24 0f       	add	r18, r20
    2d0e:	35 1f       	adc	r19, r21
    2d10:	e2 17       	cp	r30, r18
    2d12:	f3 07       	cpc	r31, r19
    2d14:	71 f4       	brne	.+28     	; 0x2d32 <free+0xd8>
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	84 0f       	add	r24, r20
    2d1c:	95 1f       	adc	r25, r21
    2d1e:	02 96       	adiw	r24, 0x02	; 2
    2d20:	11 96       	adiw	r26, 0x01	; 1
    2d22:	9c 93       	st	X, r25
    2d24:	8e 93       	st	-X, r24
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	13 96       	adiw	r26, 0x03	; 3
    2d2c:	9c 93       	st	X, r25
    2d2e:	8e 93       	st	-X, r24
    2d30:	12 97       	sbiw	r26, 0x02	; 2
    2d32:	e0 e0       	ldi	r30, 0x00	; 0
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	d8 01       	movw	r26, r16
    2d38:	12 96       	adiw	r26, 0x02	; 2
    2d3a:	8d 91       	ld	r24, X+
    2d3c:	9c 91       	ld	r25, X
    2d3e:	13 97       	sbiw	r26, 0x03	; 3
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	19 f0       	breq	.+6      	; 0x2d4a <free+0xf0>
    2d44:	f8 01       	movw	r30, r16
    2d46:	8c 01       	movw	r16, r24
    2d48:	f6 cf       	rjmp	.-20     	; 0x2d36 <free+0xdc>
    2d4a:	8d 91       	ld	r24, X+
    2d4c:	9c 91       	ld	r25, X
    2d4e:	98 01       	movw	r18, r16
    2d50:	2e 5f       	subi	r18, 0xFE	; 254
    2d52:	3f 4f       	sbci	r19, 0xFF	; 255
    2d54:	82 0f       	add	r24, r18
    2d56:	93 1f       	adc	r25, r19
    2d58:	20 91 00 03 	lds	r18, 0x0300
    2d5c:	30 91 01 03 	lds	r19, 0x0301
    2d60:	28 17       	cp	r18, r24
    2d62:	39 07       	cpc	r19, r25
    2d64:	69 f4       	brne	.+26     	; 0x2d80 <free+0x126>
    2d66:	30 97       	sbiw	r30, 0x00	; 0
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <free+0x11a>
    2d6a:	10 92 03 03 	sts	0x0303, r1
    2d6e:	10 92 02 03 	sts	0x0302, r1
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <free+0x11e>
    2d74:	13 82       	std	Z+3, r1	; 0x03
    2d76:	12 82       	std	Z+2, r1	; 0x02
    2d78:	10 93 01 03 	sts	0x0301, r17
    2d7c:	00 93 00 03 	sts	0x0300, r16
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	08 95       	ret

00002d8a <__ftoa_engine>:
    2d8a:	28 30       	cpi	r18, 0x08	; 8
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <__ftoa_engine+0x6>
    2d8e:	27 e0       	ldi	r18, 0x07	; 7
    2d90:	33 27       	eor	r19, r19
    2d92:	da 01       	movw	r26, r20
    2d94:	99 0f       	add	r25, r25
    2d96:	31 1d       	adc	r19, r1
    2d98:	87 fd       	sbrc	r24, 7
    2d9a:	91 60       	ori	r25, 0x01	; 1
    2d9c:	00 96       	adiw	r24, 0x00	; 0
    2d9e:	61 05       	cpc	r22, r1
    2da0:	71 05       	cpc	r23, r1
    2da2:	39 f4       	brne	.+14     	; 0x2db2 <__ftoa_engine+0x28>
    2da4:	32 60       	ori	r19, 0x02	; 2
    2da6:	2e 5f       	subi	r18, 0xFE	; 254
    2da8:	3d 93       	st	X+, r19
    2daa:	30 e3       	ldi	r19, 0x30	; 48
    2dac:	2a 95       	dec	r18
    2dae:	e1 f7       	brne	.-8      	; 0x2da8 <__ftoa_engine+0x1e>
    2db0:	08 95       	ret
    2db2:	9f 3f       	cpi	r25, 0xFF	; 255
    2db4:	30 f0       	brcs	.+12     	; 0x2dc2 <__ftoa_engine+0x38>
    2db6:	80 38       	cpi	r24, 0x80	; 128
    2db8:	71 05       	cpc	r23, r1
    2dba:	61 05       	cpc	r22, r1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <__ftoa_engine+0x36>
    2dbe:	3c 5f       	subi	r19, 0xFC	; 252
    2dc0:	3c 5f       	subi	r19, 0xFC	; 252
    2dc2:	3d 93       	st	X+, r19
    2dc4:	91 30       	cpi	r25, 0x01	; 1
    2dc6:	08 f0       	brcs	.+2      	; 0x2dca <__ftoa_engine+0x40>
    2dc8:	80 68       	ori	r24, 0x80	; 128
    2dca:	91 1d       	adc	r25, r1
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	1f 93       	push	r17
    2dd2:	0f 93       	push	r16
    2dd4:	ff 92       	push	r15
    2dd6:	ef 92       	push	r14
    2dd8:	19 2f       	mov	r17, r25
    2dda:	98 7f       	andi	r25, 0xF8	; 248
    2ddc:	96 95       	lsr	r25
    2dde:	e9 2f       	mov	r30, r25
    2de0:	96 95       	lsr	r25
    2de2:	96 95       	lsr	r25
    2de4:	e9 0f       	add	r30, r25
    2de6:	ff 27       	eor	r31, r31
    2de8:	e2 52       	subi	r30, 0x22	; 34
    2dea:	fe 4f       	sbci	r31, 0xFE	; 254
    2dec:	99 27       	eor	r25, r25
    2dee:	33 27       	eor	r19, r19
    2df0:	ee 24       	eor	r14, r14
    2df2:	ff 24       	eor	r15, r15
    2df4:	a7 01       	movw	r20, r14
    2df6:	e7 01       	movw	r28, r14
    2df8:	05 90       	lpm	r0, Z+
    2dfa:	08 94       	sec
    2dfc:	07 94       	ror	r0
    2dfe:	28 f4       	brcc	.+10     	; 0x2e0a <__ftoa_engine+0x80>
    2e00:	36 0f       	add	r19, r22
    2e02:	e7 1e       	adc	r14, r23
    2e04:	f8 1e       	adc	r15, r24
    2e06:	49 1f       	adc	r20, r25
    2e08:	51 1d       	adc	r21, r1
    2e0a:	66 0f       	add	r22, r22
    2e0c:	77 1f       	adc	r23, r23
    2e0e:	88 1f       	adc	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	06 94       	lsr	r0
    2e14:	a1 f7       	brne	.-24     	; 0x2dfe <__ftoa_engine+0x74>
    2e16:	05 90       	lpm	r0, Z+
    2e18:	07 94       	ror	r0
    2e1a:	28 f4       	brcc	.+10     	; 0x2e26 <__ftoa_engine+0x9c>
    2e1c:	e7 0e       	add	r14, r23
    2e1e:	f8 1e       	adc	r15, r24
    2e20:	49 1f       	adc	r20, r25
    2e22:	56 1f       	adc	r21, r22
    2e24:	c1 1d       	adc	r28, r1
    2e26:	77 0f       	add	r23, r23
    2e28:	88 1f       	adc	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	06 94       	lsr	r0
    2e30:	a1 f7       	brne	.-24     	; 0x2e1a <__ftoa_engine+0x90>
    2e32:	05 90       	lpm	r0, Z+
    2e34:	07 94       	ror	r0
    2e36:	28 f4       	brcc	.+10     	; 0x2e42 <__ftoa_engine+0xb8>
    2e38:	f8 0e       	add	r15, r24
    2e3a:	49 1f       	adc	r20, r25
    2e3c:	56 1f       	adc	r21, r22
    2e3e:	c7 1f       	adc	r28, r23
    2e40:	d1 1d       	adc	r29, r1
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	66 1f       	adc	r22, r22
    2e48:	77 1f       	adc	r23, r23
    2e4a:	06 94       	lsr	r0
    2e4c:	a1 f7       	brne	.-24     	; 0x2e36 <__ftoa_engine+0xac>
    2e4e:	05 90       	lpm	r0, Z+
    2e50:	07 94       	ror	r0
    2e52:	20 f4       	brcc	.+8      	; 0x2e5c <__ftoa_engine+0xd2>
    2e54:	49 0f       	add	r20, r25
    2e56:	56 1f       	adc	r21, r22
    2e58:	c7 1f       	adc	r28, r23
    2e5a:	d8 1f       	adc	r29, r24
    2e5c:	99 0f       	add	r25, r25
    2e5e:	66 1f       	adc	r22, r22
    2e60:	77 1f       	adc	r23, r23
    2e62:	88 1f       	adc	r24, r24
    2e64:	06 94       	lsr	r0
    2e66:	a9 f7       	brne	.-22     	; 0x2e52 <__ftoa_engine+0xc8>
    2e68:	84 91       	lpm	r24, Z
    2e6a:	10 95       	com	r17
    2e6c:	17 70       	andi	r17, 0x07	; 7
    2e6e:	41 f0       	breq	.+16     	; 0x2e80 <__ftoa_engine+0xf6>
    2e70:	d6 95       	lsr	r29
    2e72:	c7 95       	ror	r28
    2e74:	57 95       	ror	r21
    2e76:	47 95       	ror	r20
    2e78:	f7 94       	ror	r15
    2e7a:	e7 94       	ror	r14
    2e7c:	1a 95       	dec	r17
    2e7e:	c1 f7       	brne	.-16     	; 0x2e70 <__ftoa_engine+0xe6>
    2e80:	e4 e8       	ldi	r30, 0x84	; 132
    2e82:	f1 e0       	ldi	r31, 0x01	; 1
    2e84:	68 94       	set
    2e86:	15 90       	lpm	r1, Z+
    2e88:	15 91       	lpm	r17, Z+
    2e8a:	35 91       	lpm	r19, Z+
    2e8c:	65 91       	lpm	r22, Z+
    2e8e:	95 91       	lpm	r25, Z+
    2e90:	05 90       	lpm	r0, Z+
    2e92:	7f e2       	ldi	r23, 0x2F	; 47
    2e94:	73 95       	inc	r23
    2e96:	e1 18       	sub	r14, r1
    2e98:	f1 0a       	sbc	r15, r17
    2e9a:	43 0b       	sbc	r20, r19
    2e9c:	56 0b       	sbc	r21, r22
    2e9e:	c9 0b       	sbc	r28, r25
    2ea0:	d0 09       	sbc	r29, r0
    2ea2:	c0 f7       	brcc	.-16     	; 0x2e94 <__ftoa_engine+0x10a>
    2ea4:	e1 0c       	add	r14, r1
    2ea6:	f1 1e       	adc	r15, r17
    2ea8:	43 1f       	adc	r20, r19
    2eaa:	56 1f       	adc	r21, r22
    2eac:	c9 1f       	adc	r28, r25
    2eae:	d0 1d       	adc	r29, r0
    2eb0:	7e f4       	brtc	.+30     	; 0x2ed0 <__ftoa_engine+0x146>
    2eb2:	70 33       	cpi	r23, 0x30	; 48
    2eb4:	11 f4       	brne	.+4      	; 0x2eba <__ftoa_engine+0x130>
    2eb6:	8a 95       	dec	r24
    2eb8:	e6 cf       	rjmp	.-52     	; 0x2e86 <__ftoa_engine+0xfc>
    2eba:	e8 94       	clt
    2ebc:	01 50       	subi	r16, 0x01	; 1
    2ebe:	30 f0       	brcs	.+12     	; 0x2ecc <__ftoa_engine+0x142>
    2ec0:	08 0f       	add	r16, r24
    2ec2:	0a f4       	brpl	.+2      	; 0x2ec6 <__ftoa_engine+0x13c>
    2ec4:	00 27       	eor	r16, r16
    2ec6:	02 17       	cp	r16, r18
    2ec8:	08 f4       	brcc	.+2      	; 0x2ecc <__ftoa_engine+0x142>
    2eca:	20 2f       	mov	r18, r16
    2ecc:	23 95       	inc	r18
    2ece:	02 2f       	mov	r16, r18
    2ed0:	7a 33       	cpi	r23, 0x3A	; 58
    2ed2:	28 f0       	brcs	.+10     	; 0x2ede <__ftoa_engine+0x154>
    2ed4:	79 e3       	ldi	r23, 0x39	; 57
    2ed6:	7d 93       	st	X+, r23
    2ed8:	2a 95       	dec	r18
    2eda:	e9 f7       	brne	.-6      	; 0x2ed6 <__ftoa_engine+0x14c>
    2edc:	10 c0       	rjmp	.+32     	; 0x2efe <__ftoa_engine+0x174>
    2ede:	7d 93       	st	X+, r23
    2ee0:	2a 95       	dec	r18
    2ee2:	89 f6       	brne	.-94     	; 0x2e86 <__ftoa_engine+0xfc>
    2ee4:	06 94       	lsr	r0
    2ee6:	97 95       	ror	r25
    2ee8:	67 95       	ror	r22
    2eea:	37 95       	ror	r19
    2eec:	17 95       	ror	r17
    2eee:	17 94       	ror	r1
    2ef0:	e1 18       	sub	r14, r1
    2ef2:	f1 0a       	sbc	r15, r17
    2ef4:	43 0b       	sbc	r20, r19
    2ef6:	56 0b       	sbc	r21, r22
    2ef8:	c9 0b       	sbc	r28, r25
    2efa:	d0 09       	sbc	r29, r0
    2efc:	98 f0       	brcs	.+38     	; 0x2f24 <__ftoa_engine+0x19a>
    2efe:	23 95       	inc	r18
    2f00:	7e 91       	ld	r23, -X
    2f02:	73 95       	inc	r23
    2f04:	7a 33       	cpi	r23, 0x3A	; 58
    2f06:	08 f0       	brcs	.+2      	; 0x2f0a <__ftoa_engine+0x180>
    2f08:	70 e3       	ldi	r23, 0x30	; 48
    2f0a:	7c 93       	st	X, r23
    2f0c:	20 13       	cpse	r18, r16
    2f0e:	b8 f7       	brcc	.-18     	; 0x2efe <__ftoa_engine+0x174>
    2f10:	7e 91       	ld	r23, -X
    2f12:	70 61       	ori	r23, 0x10	; 16
    2f14:	7d 93       	st	X+, r23
    2f16:	30 f0       	brcs	.+12     	; 0x2f24 <__ftoa_engine+0x19a>
    2f18:	83 95       	inc	r24
    2f1a:	71 e3       	ldi	r23, 0x31	; 49
    2f1c:	7d 93       	st	X+, r23
    2f1e:	70 e3       	ldi	r23, 0x30	; 48
    2f20:	2a 95       	dec	r18
    2f22:	e1 f7       	brne	.-8      	; 0x2f1c <__ftoa_engine+0x192>
    2f24:	11 24       	eor	r1, r1
    2f26:	ef 90       	pop	r14
    2f28:	ff 90       	pop	r15
    2f2a:	0f 91       	pop	r16
    2f2c:	1f 91       	pop	r17
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	99 27       	eor	r25, r25
    2f34:	87 fd       	sbrc	r24, 7
    2f36:	90 95       	com	r25
    2f38:	08 95       	ret

00002f3a <strnlen_P>:
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	05 90       	lpm	r0, Z+
    2f3e:	61 50       	subi	r22, 0x01	; 1
    2f40:	70 40       	sbci	r23, 0x00	; 0
    2f42:	01 10       	cpse	r0, r1
    2f44:	d8 f7       	brcc	.-10     	; 0x2f3c <strnlen_P+0x2>
    2f46:	80 95       	com	r24
    2f48:	90 95       	com	r25
    2f4a:	8e 0f       	add	r24, r30
    2f4c:	9f 1f       	adc	r25, r31
    2f4e:	08 95       	ret

00002f50 <memset>:
    2f50:	dc 01       	movw	r26, r24
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <memset+0x6>
    2f54:	6d 93       	st	X+, r22
    2f56:	41 50       	subi	r20, 0x01	; 1
    2f58:	50 40       	sbci	r21, 0x00	; 0
    2f5a:	e0 f7       	brcc	.-8      	; 0x2f54 <memset+0x4>
    2f5c:	08 95       	ret

00002f5e <strnlen>:
    2f5e:	fc 01       	movw	r30, r24
    2f60:	61 50       	subi	r22, 0x01	; 1
    2f62:	70 40       	sbci	r23, 0x00	; 0
    2f64:	01 90       	ld	r0, Z+
    2f66:	01 10       	cpse	r0, r1
    2f68:	d8 f7       	brcc	.-10     	; 0x2f60 <strnlen+0x2>
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	8e 0f       	add	r24, r30
    2f70:	9f 1f       	adc	r25, r31
    2f72:	08 95       	ret

00002f74 <fputc>:
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	fb 01       	movw	r30, r22
    2f7e:	23 81       	ldd	r18, Z+3	; 0x03
    2f80:	21 fd       	sbrc	r18, 1
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <fputc+0x16>
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	28 c0       	rjmp	.+80     	; 0x2fda <fputc+0x66>
    2f8a:	22 ff       	sbrs	r18, 2
    2f8c:	16 c0       	rjmp	.+44     	; 0x2fba <fputc+0x46>
    2f8e:	46 81       	ldd	r20, Z+6	; 0x06
    2f90:	57 81       	ldd	r21, Z+7	; 0x07
    2f92:	24 81       	ldd	r18, Z+4	; 0x04
    2f94:	35 81       	ldd	r19, Z+5	; 0x05
    2f96:	42 17       	cp	r20, r18
    2f98:	53 07       	cpc	r21, r19
    2f9a:	44 f4       	brge	.+16     	; 0x2fac <fputc+0x38>
    2f9c:	a0 81       	ld	r26, Z
    2f9e:	b1 81       	ldd	r27, Z+1	; 0x01
    2fa0:	9d 01       	movw	r18, r26
    2fa2:	2f 5f       	subi	r18, 0xFF	; 255
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	31 83       	std	Z+1, r19	; 0x01
    2fa8:	20 83       	st	Z, r18
    2faa:	8c 93       	st	X, r24
    2fac:	26 81       	ldd	r18, Z+6	; 0x06
    2fae:	37 81       	ldd	r19, Z+7	; 0x07
    2fb0:	2f 5f       	subi	r18, 0xFF	; 255
    2fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb4:	37 83       	std	Z+7, r19	; 0x07
    2fb6:	26 83       	std	Z+6, r18	; 0x06
    2fb8:	10 c0       	rjmp	.+32     	; 0x2fda <fputc+0x66>
    2fba:	eb 01       	movw	r28, r22
    2fbc:	09 2f       	mov	r16, r25
    2fbe:	18 2f       	mov	r17, r24
    2fc0:	00 84       	ldd	r0, Z+8	; 0x08
    2fc2:	f1 85       	ldd	r31, Z+9	; 0x09
    2fc4:	e0 2d       	mov	r30, r0
    2fc6:	09 95       	icall
    2fc8:	89 2b       	or	r24, r25
    2fca:	e1 f6       	brne	.-72     	; 0x2f84 <fputc+0x10>
    2fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fce:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd0:	01 96       	adiw	r24, 0x01	; 1
    2fd2:	9f 83       	std	Y+7, r25	; 0x07
    2fd4:	8e 83       	std	Y+6, r24	; 0x06
    2fd6:	81 2f       	mov	r24, r17
    2fd8:	90 2f       	mov	r25, r16
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <sprintf>:
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	0d 89       	ldd	r16, Y+21	; 0x15
    2ffe:	1e 89       	ldd	r17, Y+22	; 0x16
    3000:	86 e0       	ldi	r24, 0x06	; 6
    3002:	8c 83       	std	Y+4, r24	; 0x04
    3004:	1a 83       	std	Y+2, r17	; 0x02
    3006:	09 83       	std	Y+1, r16	; 0x01
    3008:	8f ef       	ldi	r24, 0xFF	; 255
    300a:	9f e7       	ldi	r25, 0x7F	; 127
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	ae 01       	movw	r20, r28
    3012:	47 5e       	subi	r20, 0xE7	; 231
    3014:	5f 4f       	sbci	r21, 0xFF	; 255
    3016:	6f 89       	ldd	r22, Y+23	; 0x17
    3018:	78 8d       	ldd	r23, Y+24	; 0x18
    301a:	ce 01       	movw	r24, r28
    301c:	01 96       	adiw	r24, 0x01	; 1
    301e:	bf d9       	rcall	.-3202   	; 0x239e <vfprintf>
    3020:	2f 81       	ldd	r18, Y+7	; 0x07
    3022:	38 85       	ldd	r19, Y+8	; 0x08
    3024:	f8 01       	movw	r30, r16
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	10 82       	st	Z, r1
    302c:	2e 96       	adiw	r28, 0x0e	; 14
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <__ultoa_invert>:
    3042:	fa 01       	movw	r30, r20
    3044:	aa 27       	eor	r26, r26
    3046:	28 30       	cpi	r18, 0x08	; 8
    3048:	51 f1       	breq	.+84     	; 0x309e <__ultoa_invert+0x5c>
    304a:	20 31       	cpi	r18, 0x10	; 16
    304c:	81 f1       	breq	.+96     	; 0x30ae <__ultoa_invert+0x6c>
    304e:	e8 94       	clt
    3050:	6f 93       	push	r22
    3052:	6e 7f       	andi	r22, 0xFE	; 254
    3054:	6e 5f       	subi	r22, 0xFE	; 254
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	8f 4f       	sbci	r24, 0xFF	; 255
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	af 4f       	sbci	r26, 0xFF	; 255
    305e:	b1 e0       	ldi	r27, 0x01	; 1
    3060:	3e d0       	rcall	.+124    	; 0x30de <__ultoa_invert+0x9c>
    3062:	b4 e0       	ldi	r27, 0x04	; 4
    3064:	3c d0       	rcall	.+120    	; 0x30de <__ultoa_invert+0x9c>
    3066:	67 0f       	add	r22, r23
    3068:	78 1f       	adc	r23, r24
    306a:	89 1f       	adc	r24, r25
    306c:	9a 1f       	adc	r25, r26
    306e:	a1 1d       	adc	r26, r1
    3070:	68 0f       	add	r22, r24
    3072:	79 1f       	adc	r23, r25
    3074:	8a 1f       	adc	r24, r26
    3076:	91 1d       	adc	r25, r1
    3078:	a1 1d       	adc	r26, r1
    307a:	6a 0f       	add	r22, r26
    307c:	71 1d       	adc	r23, r1
    307e:	81 1d       	adc	r24, r1
    3080:	91 1d       	adc	r25, r1
    3082:	a1 1d       	adc	r26, r1
    3084:	20 d0       	rcall	.+64     	; 0x30c6 <__ultoa_invert+0x84>
    3086:	09 f4       	brne	.+2      	; 0x308a <__ultoa_invert+0x48>
    3088:	68 94       	set
    308a:	3f 91       	pop	r19
    308c:	2a e0       	ldi	r18, 0x0A	; 10
    308e:	26 9f       	mul	r18, r22
    3090:	11 24       	eor	r1, r1
    3092:	30 19       	sub	r19, r0
    3094:	30 5d       	subi	r19, 0xD0	; 208
    3096:	31 93       	st	Z+, r19
    3098:	de f6       	brtc	.-74     	; 0x3050 <__ultoa_invert+0xe>
    309a:	cf 01       	movw	r24, r30
    309c:	08 95       	ret
    309e:	46 2f       	mov	r20, r22
    30a0:	47 70       	andi	r20, 0x07	; 7
    30a2:	40 5d       	subi	r20, 0xD0	; 208
    30a4:	41 93       	st	Z+, r20
    30a6:	b3 e0       	ldi	r27, 0x03	; 3
    30a8:	0f d0       	rcall	.+30     	; 0x30c8 <__ultoa_invert+0x86>
    30aa:	c9 f7       	brne	.-14     	; 0x309e <__ultoa_invert+0x5c>
    30ac:	f6 cf       	rjmp	.-20     	; 0x309a <__ultoa_invert+0x58>
    30ae:	46 2f       	mov	r20, r22
    30b0:	4f 70       	andi	r20, 0x0F	; 15
    30b2:	40 5d       	subi	r20, 0xD0	; 208
    30b4:	4a 33       	cpi	r20, 0x3A	; 58
    30b6:	18 f0       	brcs	.+6      	; 0x30be <__ultoa_invert+0x7c>
    30b8:	49 5d       	subi	r20, 0xD9	; 217
    30ba:	31 fd       	sbrc	r19, 1
    30bc:	40 52       	subi	r20, 0x20	; 32
    30be:	41 93       	st	Z+, r20
    30c0:	02 d0       	rcall	.+4      	; 0x30c6 <__ultoa_invert+0x84>
    30c2:	a9 f7       	brne	.-22     	; 0x30ae <__ultoa_invert+0x6c>
    30c4:	ea cf       	rjmp	.-44     	; 0x309a <__ultoa_invert+0x58>
    30c6:	b4 e0       	ldi	r27, 0x04	; 4
    30c8:	a6 95       	lsr	r26
    30ca:	97 95       	ror	r25
    30cc:	87 95       	ror	r24
    30ce:	77 95       	ror	r23
    30d0:	67 95       	ror	r22
    30d2:	ba 95       	dec	r27
    30d4:	c9 f7       	brne	.-14     	; 0x30c8 <__ultoa_invert+0x86>
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	61 05       	cpc	r22, r1
    30da:	71 05       	cpc	r23, r1
    30dc:	08 95       	ret
    30de:	9b 01       	movw	r18, r22
    30e0:	ac 01       	movw	r20, r24
    30e2:	0a 2e       	mov	r0, r26
    30e4:	06 94       	lsr	r0
    30e6:	57 95       	ror	r21
    30e8:	47 95       	ror	r20
    30ea:	37 95       	ror	r19
    30ec:	27 95       	ror	r18
    30ee:	ba 95       	dec	r27
    30f0:	c9 f7       	brne	.-14     	; 0x30e4 <__ultoa_invert+0xa2>
    30f2:	62 0f       	add	r22, r18
    30f4:	73 1f       	adc	r23, r19
    30f6:	84 1f       	adc	r24, r20
    30f8:	95 1f       	adc	r25, r21
    30fa:	a0 1d       	adc	r26, r0
    30fc:	08 95       	ret

000030fe <_exit>:
    30fe:	f8 94       	cli

00003100 <__stop_program>:
    3100:	ff cf       	rjmp	.-2      	; 0x3100 <__stop_program>
